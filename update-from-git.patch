diff --git a/.github/workflows/build.yml b/.github/workflows/build.yml
index 4fa42f0..a5d8181 100644
--- a/.github/workflows/build.yml
+++ b/.github/workflows/build.yml
@@ -17,38 +17,82 @@ jobs:
   build:
     if: "!contains(github.event.head_commit.message, 'ci skip')"
     strategy:
+      fail-fast: false
       matrix:
+        container-image:
+          - "quay.io/fedora/fedora:rawhide"
+          - "quay.io/centos/centos:stream9"
+          - "registry.opensuse.org/opensuse/tumbleweed-dnf"
+          - "docker.io/library/ubuntu:22.04"
+          - "docker.io/library/ubuntu:23.04"
         compiler:
           - gcc
           - clang
-        container:
-          #- suse-qt512
-          - suse-qt515
-        pam:
-          - ON
-          - OFF
+        qt:
+          - "qt5"
+        include:
+          - container-image: "docker.io/library/ubuntu:23.04"
+            compiler: clang
+            qt: "qt6"
+          - container-image: "docker.io/library/ubuntu:23.04"
+            compiler: gcc
+            qt: "qt6"
     runs-on: ubuntu-latest
+
     container:
-      image: liridev/${{ matrix.container }}
+      image: ${{ matrix.container-image }}
+
     steps:
-      - uses: actions/checkout@v2
-      - name: Dependencies
+      - uses: actions/checkout@v3
+      - name: Dependencies (rpm-type)
+        if: ${{ contains(matrix.container-image, 'fedora') || contains(matrix.container-image, 'centos') || contains(matrix.container-image, 'opensuse') }}
         run: |
           set -x
-          zypper --non-interactive install python3-docutils
+          dnf --assumeyes install dnf-plugins-core
+          if [[ "${{ matrix.container-image }}" =~ "centos" ]]; then dnf --assumeyes config-manager --set-enabled crb && dnf --assumeyes install epel-release; fi
+          dnf --assumeyes builddep sddm
+          if [ "${{ matrix.qt }}" = "qt5" ] && [[ "${{ matrix.container-image }}" =~ "fedora" ]]; then dnf --assumeyes install qt5-qtbase-devel qt5-qtdeclarative-devel qt5-qttools-devel; fi
+          dnf --assumeyes --allowerasing --nobest install clang clazy
+      - name: Dependencies (deb-type)
+        if: ${{ contains(matrix.container-image, 'ubuntu') }}
+        run: |
+          set -x
+          sed -i '/^#\sdeb-src /s/^#//' "/etc/apt/sources.list"
+          apt-get update -y
+          DEBIAN_FRONTEND=noninteractive apt-get build-dep sddm -y
+          if [ "${{ matrix.qt }}" = "qt6" ]; then
+            DEBIAN_FRONTEND=noninteractive apt-get install clang clazy qt6-base-dev qt6-base-dev-tools qt6-tools-dev qt6-declarative-dev qml6-module-qtqml-workerscript qml6-module-qtquick-window -y
+          else
+            DEBIAN_FRONTEND=noninteractive apt-get install clang clazy qml-module-qttest -y
+          fi
       - name: Build
         run: |
           set -x
           mkdir -p build
           cd build
-          if [ "${{ matrix.compiler }}" == "clang" ]; then
+          if [ "${{ matrix.qt }}" = "qt6" ]; then
+            BUILD_WITH_QT6=ON
+          else
+            BUILD_WITH_QT6=OFF
+          fi
+          if [ "${{ matrix.compiler }}" = "clang" ]; then
             export CC=clang
             #export CXX=clang++
             export CXX=clazy
           fi
+          if [ -f "/usr/etc/login.defs" ]; then
+            export LOGIN_DEFS_PATH="/usr/etc/login.defs"
+          else
+            export LOGIN_DEFS_PATH="/etc/login.defs"
+          fi
           cmake .. \
             -DBUILD_MAN_PAGES:BOOL=ON \
-            -DENABLE_PAM:BOOL=${{ matrix.pam }} \
-            -DLOGIN_DEFS_PATH:path="/usr/etc/login.defs"
+            -DBUILD_WITH_QT6:BOOL=${BUILD_WITH_QT6} \
+            -DLOGIN_DEFS_PATH:PATH="${LOGIN_DEFS_PATH}"
           make -j $(getconf _NPROCESSORS_ONLN)
-          sudo make install
+          make install
+      - name: Test
+        env:
+          CTEST_OUTPUT_ON_FAILURE: "1"
+        working-directory: build
+        run: make test
diff --git a/.github/workflows/checks.yml b/.github/workflows/checks.yml
index 5d70019..043f389 100644
--- a/.github/workflows/checks.yml
+++ b/.github/workflows/checks.yml
@@ -14,34 +14,15 @@ on:
       - reopened
       - edited
 
-env:
-  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
-
 jobs:
-# No longer works as of 2020-11-03 due to npm 7.0.3 -> 7.0.7
-#  wip:
-#    if: "!contains(github.event.head_commit.message, 'ci skip') && github.event_name == 'pull_request'"
-#    runs-on: ubuntu-latest
-#    steps:
-#      - name: Work in progress
-#        uses: wip/action@master
-  xdg:
-    if: "!contains(github.event.head_commit.message, 'ci skip')"
-    runs-on: ubuntu-latest
-    steps:
-      - uses: actions/checkout@v2
-        with:
-          fetch-depth: 1
-      - name: Validate XDG files
-        uses: liri-infra/xdg-validator-action@master
-        with:
-          strict: false
   qml:
     if: "!contains(github.event.head_commit.message, 'ci skip')"
     runs-on: ubuntu-latest
     steps:
-      - uses: actions/checkout@v2
+      - uses: actions/checkout@v3
         with:
           fetch-depth: 1
       - name: Validate QML and JavaScript files
-        uses: liri-infra/qmllint-action@master
+        uses: liri-infra/qmllint-action@8bfbc8ec90b2f48147db9b47403448eda7b20a31
+        env:
+          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
diff --git a/CMakeLists.txt b/CMakeLists.txt
index e52e0e9..690ee70 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -1,4 +1,4 @@
-cmake_minimum_required(VERSION 2.8.8)
+cmake_minimum_required(VERSION 3.4)
 
 project(SDDM)
 
@@ -6,40 +6,27 @@ set(CMAKE_INCLUDE_CURRENT_DIR ON)
 set(CMAKE_AUTOMOC ON)
 SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)
 
-# Silence CMake 3.0 warnings
-if(POLICY CMP0043)
-    cmake_policy(SET CMP0043 OLD)
-endif()
-
 # Set version
 set(SDDM_VERSION_MAJOR 0)
-set(SDDM_VERSION_MINOR 19)
+set(SDDM_VERSION_MINOR 21)
 set(SDDM_VERSION_PATCH 0)
 set(SDDM_VERSION_STRING "${SDDM_VERSION_MAJOR}.${SDDM_VERSION_MINOR}.${SDDM_VERSION_PATCH}")
-
-# Set up packaging
-set(CPACK_PACKAGE_NAME "sddm")
-set(CPACK_PACKAGE_VERSION "${SDDM_VERSION_STRING}")
-set(CPACK_GENERATOR "TGZ")
-set(CPACK_SET_DESTDIR FALSE)
-set(CPACK_SOURCE_PACKAGE_FILE_NAME "${CPACK_PACKAGE_NAME}-${CPACK_PACKAGE_VERSION}")
-set(CPACK_SOURCE_IGNORE_FILES "/build/;/.git;/*.user;/.tx/;~$;${CPACK_SOURCE_IGNORE_FILES}")
-include(CPack)
-add_custom_target(dist COMMAND ${CMAKE_MAKE_PROGRAM} package_source)
+add_compile_definitions("SDDM_VERSION=\"${SDDM_VERSION_STRING}\"")
 
 # Options
 option(BUILD_MAN_PAGES "Build man pages" OFF)
 option(ENABLE_JOURNALD "Enable logging to journald" ON)
-option(ENABLE_PAM "Enable PAM support" ON)
 option(NO_SYSTEMD "Disable systemd support" OFF)
 option(USE_ELOGIND "Use elogind instead of logind" OFF)
+option(BUILD_WITH_QT6 "Build with Qt 6" OFF)
 
-# ECM
-find_package(ECM 1.4.0 REQUIRED NO_MODULE)
-set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH};${ECM_MODULE_PATH}")
+set(CMAKE_CXX_STANDARD 17)
+set(CMAKE_CXX_STANDARD_REQUIRED ON)
+
+set(CMAKE_MODULE_PATH "${CMAKE_SOURCE_DIR}/cmake;${CMAKE_MODULE_PATH}")
 
 # Definitions
-add_definitions(-Wall -std=c++11 -DQT_NO_CAST_FROM_ASCII -DQT_NO_CAST_FROM_BYTEARRAY -DQT_NO_FOREACH)
+add_definitions(-Wall -Wextra -DQT_NO_CAST_FROM_ASCII -DQT_NO_CAST_FROM_BYTEARRAY -DQT_NO_FOREACH)
 
 # Default build type
 if(NOT CMAKE_BUILD_TYPE)
@@ -75,18 +62,10 @@ include(FeatureSummary)
 find_package(PkgConfig)
 
 # PAM
-if(ENABLE_PAM)
-    find_package(PAM REQUIRED)
+find_package(PAM REQUIRED)
 
-    if(PAM_FOUND)
-        add_definitions(-DUSE_PAM)
-    endif()
-endif()
-add_feature_info("PAM" PAM_FOUND "PAM support")
-
-# getspnam and shadow(5) support
-include(CheckFunctionExists)
-check_function_exists(getspnam HAVE_GETSPNAM)
+# XAU
+pkg_check_modules(LIBXAU REQUIRED "xau")
 
 # XCB
 find_package(XCB REQUIRED)
@@ -94,21 +73,21 @@ find_package(XCB REQUIRED)
 # XKB
 find_package(XKB REQUIRED)
 
-# Qt 5
-find_package(Qt5 5.8.0 CONFIG REQUIRED Core DBus Gui Qml Quick LinguistTools Test)
+# Qt
+if(BUILD_WITH_QT6)
+    set(QT_MAJOR_VERSION 6)
+    message(STATUS "Building Qt 6 version")
+else()
+    set(QT_MAJOR_VERSION 5)
+    message(STATUS "Building Qt 5 version")
+endif()
+
+find_package(Qt${QT_MAJOR_VERSION} 5.15.0 CONFIG REQUIRED Core DBus Gui Qml Quick LinguistTools Test QuickTest)
 
 # find qt5 imports dir
-get_target_property(QMAKE_EXECUTABLE Qt5::qmake LOCATION)
+get_target_property(QMAKE_EXECUTABLE Qt${QT_MAJOR_VERSION}::qmake LOCATION)
 if(NOT QT_IMPORTS_DIR)
-    exec_program(${QMAKE_EXECUTABLE} ARGS "-query QT_INSTALL_QML" RETURN_VALUE return_code OUTPUT_VARIABLE QT_IMPORTS_DIR)
-endif()
-
-# Uninstall target
-if ("${ECM_VERSION}" VERSION_LESS "1.7.0")
-    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/cmake/cmake_uninstall.cmake.in"
-                   "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake"
-                   IMMEDIATE @ONLY)
-    add_custom_target(uninstall COMMAND ${CMAKE_COMMAND} -P "${CMAKE_CURRENT_BINARY_DIR}/cmake_uninstall.cmake")
+    execute_process(COMMAND ${QMAKE_EXECUTABLE} -query QT_INSTALL_QML OUTPUT_VARIABLE QT_IMPORTS_DIR OUTPUT_STRIP_TRAILING_WHITESPACE)
 endif()
 
 # systemd
@@ -137,11 +116,17 @@ if(SYSTEMD_FOUND)
     endif()
 
     if (NOT DEFINED SYSTEMD_SYSTEM_UNIT_DIR)
-        execute_process(COMMAND ${PKG_CONFIG_EXECUTABLE} --variable=systemdsystemunitdir systemd OUTPUT_VARIABLE SYSTEMD_SYSTEM_UNIT_DIR)
-        string(REGEX REPLACE "[ \t\n]+" "" SYSTEMD_SYSTEM_UNIT_DIR ${SYSTEMD_SYSTEM_UNIT_DIR})
+        pkg_get_variable(SYSTEMD_SYSTEM_UNIT_DIR systemd systemdsystemunitdir)
+    endif()
+
+    if (NOT DEFINED SYSTEMD_SYSUSERS_DIR)
+        pkg_get_variable(SYSTEMD_SYSUSERS_DIR systemd sysusersdir)
+    endif()
+
+    if (NOT DEFINED SYSTEMD_TMPFILES_DIR)
+        pkg_get_variable(SYSTEMD_TMPFILES_DIR systemd tmpfilesdir)
     endif()
 
-    set(MINIMUM_VT 1)
     set(HALT_COMMAND "/usr/bin/systemctl poweroff")
     set(REBOOT_COMMAND "/usr/bin/systemctl reboot")
 else()
@@ -159,7 +144,6 @@ if(ELOGIND_FOUND)
     add_definitions(-DHAVE_ELOGIND)
     set(CMAKE_AUTOMOC_MOC_OPTIONS -DHAVE_ELOGIND)
 
-    set(MINIMUM_VT 7)
     set(HALT_COMMAND "/usr/bin/loginctl poweroff")
     set(REBOOT_COMMAND "/usr/bin/loginctl reboot")
 endif()
@@ -171,21 +155,28 @@ if (NOT ELOGIND_FOUND AND NOT SYSTEMD_FOUND)
     # commands for shutdown and reboot. On FreeBSD, there are
     # normally more getty's running than on Linux.
     if("${CMAKE_SYSTEM_NAME}" STREQUAL "FreeBSD")
-        set(MINIMUM_VT 9)
         set(HALT_COMMAND "/sbin/shutdown -p now")
     else()
-        set(MINIMUM_VT 7)
         set(HALT_COMMAND "/sbin/shutdown -h -P now")
     endif()
     set(REBOOT_COMMAND "/sbin/shutdown -r now")
 endif()
 
+if (SYSTEMD_FOUND)
+    set(RUNTIME_DIR_DEFAULT "/run/sddm")
+else()
+    set(RUNTIME_DIR_DEFAULT "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run/sddm")
+endif()
+
+# utmps
+find_package(utmps)
+add_feature_info("utmps" UTMPS_FOUND "utmps support")
 
 # Set constants
 set(DATA_INSTALL_DIR            "${CMAKE_INSTALL_FULL_DATADIR}/sddm"                CACHE PATH      "System application data install directory")
-set(DBUS_CONFIG_DIR             "${CMAKE_INSTALL_SYSCONFDIR}/dbus-1/system.d"       CACHE PATH      "DBus config files directory")
+set(DBUS_CONFIG_DIR             "${CMAKE_INSTALL_FULL_DATADIR}/dbus-1/system.d"       CACHE PATH      "DBus config files directory")
 set(STATE_DIR                   "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/lib/sddm"      CACHE PATH      "State directory")
-set(RUNTIME_DIR                 "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/run/sddm"      CACHE PATH      "Runtime data storage directory")
+set(RUNTIME_DIR                 "${RUNTIME_DIR_DEFAULT}"                            CACHE PATH      "Runtime data storage directory")
 set(QML_INSTALL_DIR             "${QT_IMPORTS_DIR}"                                 CACHE PATH      "QML component installation directory")
 
 set(SESSION_COMMAND             "${DATA_INSTALL_DIR}/scripts/Xsession"              CACHE PATH      "Script to execute when starting the X11 desktop session")
@@ -193,10 +184,12 @@ set(WAYLAND_SESSION_COMMAND     "${DATA_INSTALL_DIR}/scripts/wayland-session"
 
 set(CONFIG_FILE                 "${CMAKE_INSTALL_FULL_SYSCONFDIR}/sddm.conf"        CACHE PATH      "Path of the sddm config file")
 set(CONFIG_DIR                  "${CMAKE_INSTALL_FULL_SYSCONFDIR}/sddm.conf.d"      CACHE PATH      "Path of the sddm config directory")
+set(ACCOUNTSSERVICE_DATA_DIR    "/var/lib/AccountsService"                          CACHE PATH      "Path of the accountsservice data directory")
 set(SYSTEM_CONFIG_DIR           "${CMAKE_INSTALL_PREFIX}/lib/sddm/sddm.conf.d"      CACHE PATH      "Path of the system sddm config directory")
 set(LOG_FILE                    "${CMAKE_INSTALL_FULL_LOCALSTATEDIR}/log/sddm.log"  CACHE PATH      "Path of the sddm log file")
 set(DBUS_CONFIG_FILENAME        "org.freedesktop.DisplayManager.conf"               CACHE STRING    "Name of the sddm config file")
-set(COMPONENTS_TRANSLATION_DIR  "${DATA_INSTALL_DIR}/translations"                  CACHE PATH      "Components translations directory")
+set(COMPONENTS_TRANSLATION_DIR  "${DATA_INSTALL_DIR}/translations-qt${QT_MAJOR_VERSION}" CACHE PATH      "Components translations directory")
+set(SDDM_INITIAL_VT             "1"                                                 CACHE STRING    "Initial tty to use")
 
 
 # Autodetect UID_MIN and UID_MAX from /etc/login.defs
diff --git a/ChangeLog b/ChangeLog
index ff2a68d..d4df938 100644
--- a/ChangeLog
+++ b/ChangeLog
@@ -4,6 +4,48 @@
     - Bug fixes
     * Others
 
+## 0.21.0
+----------------------
+    + sddm-greeter can now be built for both Qt5 and Qt6
+    + Themes can now declare their Qt version compatibility to control which greeter gets used
+    + New CMake option INSTALL_PAM_CONFIGURATION (defaults to ON)
+    + Bulgarian translation added
+    * DBus policy files are now installed in /usr rather than /etc
+    * Do not show keyboard layouts on wayland as switching is not implemented
+    * Switch the default commandline for Weston to use the kiosk shell (available in 9.0+)
+    - Fix building with Qt 6.7
+    - Handle autologin failure by falling back to the greeter (#1775)
+    - Fix session names containing ',' (#1745)
+    - Don't let tmpfiles delete x11 auth files for very long running sessions
+    - Many improvements for the **experimental** wayland support
+
+## 0.20.0 - 2023-06-23
+----------------------
+    + Initial Qt6 support (Will break themes which rely on Qt 5)
+    + **Experimental** support for running the greeter with Wayland
+    + Enable HiDPI scaling by default
+    + Support for running X11 display server without root privileges
+    + Greeter: Support setting environment variables
+    + Allow additional env vars to be defined in session files (#1370)
+    + Make accountsservice data directory overridable via CMake
+    + Add support for X11 cursor size configuration
+    + Search XDG Base Directories for session files
+    + Display information and errors from PAM in the greeter (#1486)
+    * Remove the Passwd backend, make PAM mandatory
+    * Bump minimum CMake version to 3.4
+    * Introduce SDDM_INITIAL_VT as the TTY to reach out to
+    * Set XCURSOR_SIZE in XorgDisplayServer::start
+    * Make it possible to start ConsoleKit D-Bus service during SDDM startup
+    * pam: Do not use tally2 if faillock is present
+    * Bump to Qt 5.15, port away from deprecated APIs
+    * remove `-logfile` arg that causes server to fail
+    - Set RUNTIME_DIR to /run/sddm when using systemd to follow FHS 3.0
+    - Use avatars in FacesDir first and if not found search other locations
+    - Switch to using libxau with `FamilyWild` (#1230)
+    - New interface to access config values from themes (#1097)
+    - Session names are translated now (#1645)
+    - Many more bugfixes
+
 ## 0.19.0 - 2020-11-02
 ----------------------
     * Don't disable authentication in --test-mode
@@ -33,9 +75,9 @@
     * Use modern connects
     * Update translations
 
-## 0.18.1 - 2019-03-31
+## 0.18.1 - 2019-03-11
 ----------------------
-    * Use C++ scoping for handling buffer deletion
+    - Fix crashes when creating a user session
 
 ## 0.18.0 - 2018-07-17
 ----------------------
diff --git a/README.md b/README.md
index 7c7a555..6f393cb 100644
--- a/README.md
+++ b/README.md
@@ -1,9 +1,9 @@
 ## INTRODUCTION
 
-[![Build Status](https://travis-ci.org/sddm/sddm.svg?branch=master)](https://travis-ci.org/sddm/sddm)
 [![IRC Network](https://img.shields.io/badge/irc-freenode-blue.svg "IRC Freenode")](https://webchat.freenode.net/?channels=sddm)
 
-SDDM is a modern display manager for X11 and Wayland aiming to be fast, simple and beautiful.
+SDDM is a modern display manager for X11 and Wayland sessions aiming to
+be fast, simple and beautiful.
 It uses modern technologies like QtQuick, which in turn gives the designer the ability to
 create smooth, animated user interfaces.
 
@@ -17,9 +17,6 @@ a combox etc.
 There are a few sample themes distributed with SDDM.
 They can be used as a starting point for new themes.
 
-SDDM is developed by volunteers, please consider [donating](https://www.bountysource.com/teams/sddm)
-money that can be used to support the features that you most desire.
-
 ## SCREENSHOTS
 
 ![sample screenshot](https://raw.github.com/sddm/sddm/master/src/greeter/theme/maui.jpg)
@@ -39,7 +36,7 @@ money that can be used to support the features that you most desire.
 
 ## INSTALLATION
 
-Qt >= 5.8.0 is required to use SDDM.
+Qt >= 5.15.0 is required to use SDDM.
 
 SDDM runs the greeter as a system user named "sddm" whose home directory needs
 to be set to `/var/lib/sddm`.
@@ -51,6 +48,17 @@ Distributions without pam and systemd will need to put the "sddm" user
 into the "video" group, otherwise errors regarding GL and drm devices
 might be experienced.
 
+## VIRTUAL TERMINALS
+
+SDDM is assumed to start at the tty specified by the cmake variable
+SDDM_INITIAL_VT which is an integer and defaults to 1.
+
+If SDDM_INITIAL_VT wasn't available, SDDM will use the next available one
+instead.
+
+You can override SDDM_INITIAL_VT if you want to have a different one if,
+for example, you were planning on using tty1 for something else.
+
 ## LICENSE
 
 Source code of SDDM is licensed under GNU GPL version 2 or later (at your choosing).
diff --git a/cmake/FindPAM.cmake b/cmake/FindPAM.cmake
index f209c0b..a64680b 100644
--- a/cmake/FindPAM.cmake
+++ b/cmake/FindPAM.cmake
@@ -13,6 +13,7 @@ endif (PAM_INCLUDE_DIR AND PAM_LIBRARY)
 find_path(PAM_INCLUDE_DIR NAMES security/pam_appl.h pam/pam_appl.h)
 find_library(PAM_LIBRARY pam)
 find_library(DL_LIBRARY dl)
+find_library(HAVE_PAM_FAILLOCK NAME pam_faillock.so PATH_SUFFIXES security)
 
 if (PAM_INCLUDE_DIR AND PAM_LIBRARY)
 	set(PAM_FOUND TRUE)
diff --git a/cmake/Findutmps.cmake b/cmake/Findutmps.cmake
new file mode 100644
index 0000000..0661875
--- /dev/null
+++ b/cmake/Findutmps.cmake
@@ -0,0 +1,12 @@
+# - Try to find utmps and its dependencies
+# Once done this will define
+# UTMPS_FOUND - system has utmps and dependencies
+# UTMPS_INCLUDE_DIR - the utmps include dir
+# UTMPS_LIBRARIES - libutmps
+
+find_path(UTMPS_INCLUDE_DIR NAMES utmps/utmpx.h)
+find_library(UTMPS_LIBRARIES utmps)
+
+if (UTMPS_INCLUDE_DIR AND UTMPS_LIBRARIES)
+    set(UTMPS_FOUND TRUE)
+endif (UTMPS_INCLUDE_DIR AND UTMPS_LIBRARIES)
diff --git a/cmake/cmake_uninstall.cmake.in b/cmake/cmake_uninstall.cmake.in
deleted file mode 100644
index c6d8094..0000000
--- a/cmake/cmake_uninstall.cmake.in
+++ /dev/null
@@ -1,22 +0,0 @@
-if (NOT EXISTS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
-    message(FATAL_ERROR "Cannot find install manifest: \"@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt\"")
-endif(NOT EXISTS "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt")
-
-file(READ "@CMAKE_CURRENT_BINARY_DIR@/install_manifest.txt" files)
-string(REGEX REPLACE "\n" ";" files "${files}")
-list(REVERSE files)
-foreach (file ${files})
-    message(STATUS "Uninstalling \"$ENV{DESTDIR}${file}\"")
-    if (EXISTS "$ENV{DESTDIR}${file}")
-        execute_process(
-            COMMAND @CMAKE_COMMAND@ -E remove "$ENV{DESTDIR}${file}"
-            OUTPUT_VARIABLE rm_out
-            RESULT_VARIABLE rm_retval
-        )
-        if(NOT ${rm_retval} EQUAL 0)
-            message(FATAL_ERROR "Problem when removing \"$ENV{DESTDIR}${file}\"")
-        endif (NOT ${rm_retval} EQUAL 0)
-    else (EXISTS "$ENV{DESTDIR}${file}")
-        message(STATUS "File \"$ENV{DESTDIR}${file}\" does not exist.")
-    endif (EXISTS "$ENV{DESTDIR}${file}")
-endforeach(file)
diff --git a/components/2.0/Button.qml b/components/2.0/Button.qml
index cedc835..4d6d40a 100644
--- a/components/2.0/Button.qml
+++ b/components/2.0/Button.qml
@@ -67,7 +67,9 @@ Rectangle {
         }
     ]
 
-    Behavior on color { NumberAnimation { duration: 200 } }
+    transitions: Transition {
+        ColorAnimation { duration: 200 }
+    }
 
     clip: true
     smooth: true
@@ -109,7 +111,7 @@ Rectangle {
         onReleased: { container.focus = true; container.released() }
     }
 
-    Keys.onPressed: {
+    Keys.onPressed: function (event) {
         if (event.key === Qt.Key_Space) {
             container.spaceDown = true;
             container.pressed()
@@ -120,7 +122,7 @@ Rectangle {
         }
     }
 
-    Keys.onReleased: {
+    Keys.onReleased: function (event) {
         if (event.key === Qt.Key_Space) {
             container.spaceDown = false;
             container.released()
diff --git a/components/2.0/ComboBox.qml b/components/2.0/ComboBox.qml
index 26bbef3..997a388 100644
--- a/components/2.0/ComboBox.qml
+++ b/components/2.0/ComboBox.qml
@@ -70,8 +70,6 @@ FocusScope {
         border.color: container.borderColor
         border.width: container.borderWidth
 
-        Behavior on border.color { ColorAnimation { duration: 100 } }
-
         states: [
             State {
                 name: "hover"; when: mouseArea.containsMouse
@@ -82,6 +80,10 @@ FocusScope {
                 PropertyChanges { target: main; border.width: container.borderWidth; border.color: container.focusColor }
             }
         ]
+
+        transitions: Transition {
+            ColorAnimation { property: "border.color"; duration: 100 }
+        }
     }
 
     Loader {
@@ -132,7 +134,7 @@ FocusScope {
         }
     }
 
-    Keys.onPressed: {
+    Keys.onPressed: function (event) {
         if (event.key === Qt.Key_Up) {
             listView.decrementCurrentIndex()
         } else if (event.key === Qt.Key_Down) {
@@ -157,8 +159,6 @@ FocusScope {
 
         clip: true
 
-        Behavior on height { NumberAnimation { duration: 100 } }
-
         Component {
             id: myDelegate
 
@@ -214,6 +214,10 @@ FocusScope {
                 PropertyChanges { target: dropDown; height: (container.height - 2*container.borderWidth) * listView.count + container.borderWidth}
             }
         ]
+
+        transitions: Transition {
+            NumberAnimation { property: "height"; duration: 100 }
+        }
     }
 
     function toggle() {
diff --git a/components/2.0/ImageButton.qml b/components/2.0/ImageButton.qml
index 6277148..b2c267d 100644
--- a/components/2.0/ImageButton.qml
+++ b/components/2.0/ImageButton.qml
@@ -53,7 +53,9 @@ Image {
         }
     ]
 
-    Behavior on opacity { NumberAnimation { duration: 200 } }
+    transitions: Transition {
+        NumberAnimation { property: "opacity"; duration: 200 }
+    }
 
     clip: true
     smooth: true
@@ -75,7 +77,7 @@ Image {
         onReleased: { container.focus = true; container.released() }
     }
 
-    Keys.onPressed: {
+    Keys.onPressed: function (event) {
         if (event.key === Qt.Key_Space) {
             container.spaceDown = true;
             container.pressed()
@@ -86,7 +88,7 @@ Image {
         }
     }
 
-    Keys.onReleased: {
+    Keys.onReleased: function (event) {
         if (event.key === Qt.Key_Space) {
             container.spaceDown = false;
             container.released()
diff --git a/components/2.0/LayoutBox.qml b/components/2.0/LayoutBox.qml
index b992f28..5e62acd 100644
--- a/components/2.0/LayoutBox.qml
+++ b/components/2.0/LayoutBox.qml
@@ -30,12 +30,16 @@ ComboBox {
     model: keyboard.layouts
     index: keyboard.currentLayout
 
-    onValueChanged: keyboard.currentLayout = id
+    function onValueChanged(id) {
+        keyboard.currentLayout = id
+    }
 
     Connections {
         target: keyboard
 
-        onCurrentLayoutChanged: combo.index = keyboard.currentLayout
+        function onCurrentLayoutChanged() {
+            combo.index = keyboard.currentLayout
+        }
     }
 
     rowDelegate: Rectangle {
diff --git a/components/2.0/Menu.qml b/components/2.0/Menu.qml
index 8ef2984..9acecb9 100644
--- a/components/2.0/Menu.qml
+++ b/components/2.0/Menu.qml
@@ -34,8 +34,6 @@ Rectangle {
     property alias model: menuList.model
     property alias index: menuList.currentIndex
 
-    Behavior on height { NumberAnimation { duration: 100 } }
-
     states: [
         State {
             name: "visible";
@@ -43,6 +41,10 @@ Rectangle {
         }
     ]
 
+    transitions: Transition {
+        NumberAnimation { property: "height"; duration: 100 }
+    }
+
     Component {
         id: listViewItem
 
diff --git a/components/2.0/PictureBox.qml b/components/2.0/PictureBox.qml
index eb2fbfe..560556e 100644
--- a/components/2.0/PictureBox.qml
+++ b/components/2.0/PictureBox.qml
@@ -37,8 +37,6 @@ FocusScope {
 
     signal login()
 
-    Behavior on height { NumberAnimation { duration: 100 } }
-
     states: [
         State {
             name: ""
@@ -50,6 +48,10 @@ FocusScope {
         }
     ]
 
+    transitions: Transition {
+        NumberAnimation { property: "height"; duration: 100 }
+    }
+
     Rectangle {
         id: shadow
         anchors.fill: parent
@@ -103,7 +105,7 @@ FocusScope {
             focus: true
             visible: showPassword
 
-            Keys.onPressed: {
+            Keys.onPressed: function (event) {
                 if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                     container.login();
                     event.accepted = true
diff --git a/components/2.0/TextBox.qml b/components/2.0/TextBox.qml
index a8d89af..0db8ce8 100644
--- a/components/2.0/TextBox.qml
+++ b/components/2.0/TextBox.qml
@@ -47,8 +47,6 @@ FocusScope {
         border.color: container.borderColor
         border.width: 1
 
-        Behavior on border.color { ColorAnimation { duration: 100 } }
-
         states: [
             State {
                 name: "hover"; when: mouseArea.containsMouse
@@ -59,6 +57,10 @@ FocusScope {
                 PropertyChanges { target: main; border.width: 1; border.color: container.focusColor }
             }
         ]
+
+        transitions: Transition {
+            ColorAnimation { duration: 100 }
+        }
     }
 
     MouseArea {
diff --git a/components/CMakeLists.txt b/components/CMakeLists.txt
index 22d75c9..de1a705 100644
--- a/components/CMakeLists.txt
+++ b/components/CMakeLists.txt
@@ -1,5 +1,5 @@
 configure_file("2.0/LayoutBox.qml" "2.0/LayoutBox.qml")
 
-install(DIRECTORY "2.0/" DESTINATION "${QML_INSTALL_DIR}/SddmComponents")
+install(DIRECTORY "2.0/" DESTINATION "${QML_INSTALL_DIR}/SddmComponents" PATTERN "LayoutBox.qml" EXCLUDE)
 install(DIRECTORY "common/" DESTINATION "${QML_INSTALL_DIR}/SddmComponents")
 install(DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}/2.0/" DESTINATION "${QML_INSTALL_DIR}/SddmComponents")
diff --git a/data/flags/bd.png b/data/flags/bd.png
new file mode 100644
index 0000000..b516bb7
Binary files /dev/null and b/data/flags/bd.png differ
diff --git a/data/interfaces/org.freedesktop.login1.Manager.xml b/data/interfaces/org.freedesktop.login1.Manager.xml
index 800d2bc..0a63f7f 100644
--- a/data/interfaces/org.freedesktop.login1.Manager.xml
+++ b/data/interfaces/org.freedesktop.login1.Manager.xml
@@ -185,6 +185,10 @@
    <arg type="s" direction="in"/>
    <arg type="h" direction="out"/>
   </method>
+  <signal name="SecureAttentionKey">
+   <arg type="s"/>
+   <arg type="o"/>
+  </signal>
   <signal name="SessionNew">
    <arg type="s"/>
    <arg type="o"/>
diff --git a/data/interfaces/org.freedesktop.login1.Seat.xml b/data/interfaces/org.freedesktop.login1.Seat.xml
index a726b95..a73a6b3 100644
--- a/data/interfaces/org.freedesktop.login1.Seat.xml
+++ b/data/interfaces/org.freedesktop.login1.Seat.xml
@@ -17,7 +17,7 @@
   <property name="CanGraphical" type="b" access="read">
   </property>
   <property name="Sessions" type="a(so)" access="read">
-   <annotation name="org.qtproject.QtDBus.QtTypeName" value="QList<NamedSessionPath>"/>
+   <annotation name="org.qtproject.QtDBus.QtTypeName" value="QList&lt;NamedSessionPath&gt;"/>
   </property>
   <property name="IdleHint" type="b" access="read">
   </property>
diff --git a/data/interfaces/org.freedesktop.login1.User.xml b/data/interfaces/org.freedesktop.login1.User.xml
index 802efaa..643d442 100644
--- a/data/interfaces/org.freedesktop.login1.User.xml
+++ b/data/interfaces/org.freedesktop.login1.User.xml
@@ -33,7 +33,7 @@
    <annotation name="org.freedesktop.DBus.Property.EmitsChangedSignal" value="false"/>
   </property>
   <property name="Sessions" type="a(so)" access="read">
-   <annotation name="org.qtproject.QtDBus.QtTypeName" value="QList<NamedSessionPath>"/>
+   <annotation name="org.qtproject.QtDBus.QtTypeName" value="QList&lt;NamedSessionPath&gt;"/>
   </property>
   <property name="IdleHint" type="b" access="read">
   </property>
diff --git a/data/man/sddm.conf.rst.in b/data/man/sddm.conf.rst.in
index bee0768..0d00919 100644
--- a/data/man/sddm.conf.rst.in
+++ b/data/man/sddm.conf.rst.in
@@ -6,7 +6,7 @@
 sddm display manager configuration
 ----------------------------------
 
-:Date: August 2015
+:Date: March 2021
 :Version: sddm @SDDM_VERSION_STRING@
 :Manual section: 5
 :Manual group: sddm
@@ -36,6 +36,17 @@ OPTIONS
 
 [General] section:
 
+`DisplayServer=`
+	Select the display server to use for the greeter.
+	Valid values are:
+
+	* `x11`: X server running as root.
+	* `x11-user`: X server running as unprivileged user.
+	* `wayland`: Wayland compositor as unprivileged user. (Experimental)
+
+	Default value is "x11".
+	For `x11-user` you might need to configure Xorg.wrap(1).
+
 `HaltCommand=`
 	Halt command.
 	Default value is "@HALT_COMMAND@".
@@ -85,6 +96,9 @@ OPTIONS
 	Name of the cursor theme to be set before starting
 	the display server.
 
+`CursorSize=`
+	Cursor size to be set before starting the display server.
+
 `Font=`
 	Name of the font to be set before starting the
 	display server. Please note that the theme can still override this option.
@@ -110,13 +124,9 @@ OPTIONS
 	Path of the Xephyr.
 	Default value is "/usr/bin/Xephyr".
 
-`XauthPath=`
-	Path of the Xauth.
-	Default value is "/usr/bin/xauth".
-
 `SessionDir=`
-	Path of the directory containing session files.
-	Default value is "/usr/share/xsessions".
+	Comma-separated list of directories containing session files.
+	Default value is "/usr/local/share/xsessions,/usr/share/xsessions".
 
 `SessionCommand=`
 	Path of script to execute when starting the user session. This script
@@ -128,34 +138,43 @@ OPTIONS
         Path to the user session log file, relative to the home directory.
         Default value is ".local/share/sddm/xorg-session.log".
 
-`UserAuthFile=`
-        Path to the Xauthority file, relative to the home directory.
-        Default value is ".Xauthority".
-
 `DisplayCommand=`
 	Path of script to execute when starting the display server.
+	The script will be executed as root when General.DisplayServer
+	is "x11", otherwise as sddm user.
 	Default value is "@DATA_INSTALL_DIR@/scripts/Xsetup".
 
 `DisplayStopCommand=`
 	Path of script to execute when stopping the display server.
+	The script will be executed as root when General.DisplayServer
+	is "x11", otherwise as sddm user.
 	Default value is "@DATA_INSTALL_DIR@/scripts/Xstop".
 
 `MinimumVT=`
 	Minimum virtual terminal number that will be used
 	by the first display. Virtual terminal number will
 	increase as new displays added.
-	Default value is @MINIMUM_VT@.
+	This setting is no longer available since SDDM v0.20.
 
 `EnableHiDPI=`
 	Enables Qt's automatic HiDPI scaling.
 	Can be either "true" or "false".
-	Default value is "false".
+	Default value is "true".
+
+The `XauthPath=` option is no longer necessary, libxau is used instead.
+
+The `UserAuthFile=` option was removed, the file is always created as
+`/tmp/xauth_XXXXX`. This is necessary for to the use of `FamilyWild` entries.
 
 [Wayland] section:
 
+`CompositorCommand=`
+        Path of the compositor to execute when starting the greeter.
+        Default value is "weston --shell=kiosk".
+
 `SessionDir=`
-	Path of the directory containing session files.
-	Default value is "/usr/share/wayland-sessions".
+	Comma-separated list of directories containing session files.
+	Default value is "/usr/local/share/wayland-sessions,/usr/share/wayland-sessions".
 
 `SessionCommand=`
 	Path of script to execute when starting the user session. This script
@@ -170,7 +189,7 @@ OPTIONS
 `EnableHiDPI=`
 	Enables Qt's automatic HiDPI scaling.
 	Can be either "true" or "false".
-	Default value is "false".
+	Default value is "true".
 
 [Users] section:
 
diff --git a/data/man/sddm.rst.in b/data/man/sddm.rst.in
index 6403368..5d2669f 100644
--- a/data/man/sddm.rst.in
+++ b/data/man/sddm.rst.in
@@ -34,6 +34,10 @@ Distributions without pam and systemd will need to put the **sddm** user
 into the **video** group, otherwise errors regarding GL and drm devices
 might be experienced.
 
+For X11 sessions, the cookie for X authorization is written into a
+temporary file `/tmp/xauth_XXXXXX`, owned and only accessible by the
+user.
+
 OPTIONS
 =======
 
diff --git a/data/scripts/Xsession b/data/scripts/Xsession
index 5449810..a971d40 100755
--- a/data/scripts/Xsession
+++ b/data/scripts/Xsession
@@ -8,26 +8,13 @@
 # Note that the respective logout scripts are not sourced.
 case $SHELL in
   */bash)
-    [ -z "$BASH" ] && exec $SHELL $0 "$@"
+    [ -z "$BASH" ] && exec $SHELL --login $0 "$@"
+    shopt -q login_shell || exec $SHELL --login $0 "$@"
     set +o posix
-    [ -f /etc/profile ] && . /etc/profile
-    if [ -f $HOME/.bash_profile ]; then
-      . $HOME/.bash_profile
-    elif [ -f $HOME/.bash_login ]; then
-      . $HOME/.bash_login
-    elif [ -f $HOME/.profile ]; then
-      . $HOME/.profile
-    fi
     ;;
-*/zsh)
-    [ -z "$ZSH_NAME" ] && exec $SHELL $0 "$@"
-    [ -d /etc/zsh ] && zdir=/etc/zsh || zdir=/etc
-    zhome=${ZDOTDIR:-$HOME}
-    # zshenv is always sourced automatically.
-    [ -f $zdir/zprofile ] && . $zdir/zprofile
-    [ -f $zhome/.zprofile ] && . $zhome/.zprofile
-    [ -f $zdir/zlogin ] && . $zdir/zlogin
-    [ -f $zhome/.zlogin ] && . $zhome/.zlogin
+  */zsh)
+    [ -z "$ZSH_NAME" ] && exec $SHELL --login $0 "$@"
+    [[ -o login ]] || exec $SHELL --login $0 "$@"
     emulate -R sh
     ;;
   */csh|*/tcsh)
@@ -39,6 +26,8 @@ case $SHELL in
     rm -f $xsess_tmp
     ;;
   */fish)
+    [ -f /etc/profile ] && . /etc/profile
+    [ -f $HOME/.profile ] && . $HOME/.profile
     xsess_tmp=`mktemp /tmp/xsess-env-XXXXXX`
     $SHELL --login -c "/bin/sh -c 'export -p' > $xsess_tmp"
     . $xsess_tmp
diff --git a/data/scripts/wayland-session b/data/scripts/wayland-session
index de4f519..bbeb7ce 100755
--- a/data/scripts/wayland-session
+++ b/data/scripts/wayland-session
@@ -6,28 +6,19 @@
 # Copyright (C) 2001-2005 Oswald Buddenhagen <ossi@kde.org>
 
 # Note that the respective logout scripts are not sourced.
+
+# Backup the user shell setting into SDDM specific variable
+SDDM_USER_SHELL=$SHELL
+
 case $SHELL in
   */bash)
-    [ -z "$BASH" ] && exec $SHELL $0 "$@"
+    [ -z "$BASH" ] && exec $SHELL --login $0 "$@"
+    shopt -q login_shell || exec $SHELL --login $0 "$@"
     set +o posix
-    [ -f /etc/profile ] && . /etc/profile
-    if [ -f $HOME/.bash_profile ]; then
-      . $HOME/.bash_profile
-    elif [ -f $HOME/.bash_login ]; then
-      . $HOME/.bash_login
-    elif [ -f $HOME/.profile ]; then
-      . $HOME/.profile
-    fi
     ;;
-*/zsh)
-    [ -z "$ZSH_NAME" ] && exec $SHELL $0 "$@"
-    [ -d /etc/zsh ] && zdir=/etc/zsh || zdir=/etc
-    zhome=${ZDOTDIR:-$HOME}
-    # zshenv is always sourced automatically.
-    [ -f $zdir/zprofile ] && . $zdir/zprofile
-    [ -f $zhome/.zprofile ] && . $zhome/.zprofile
-    [ -f $zdir/zlogin ] && . $zdir/zlogin
-    [ -f $zhome/.zlogin ] && . $zhome/.zlogin
+  */zsh)
+    [ -z "$ZSH_NAME" ] && exec $SHELL --login $0 "$@"
+    [[ -o login ]] || exec $SHELL --login $0 "$@"
     emulate -R sh
     ;;
   */csh|*/tcsh)
@@ -39,6 +30,8 @@ case $SHELL in
     rm -f $wlsess_tmp
     ;;
   */fish)
+    [ -f /etc/profile ] && . /etc/profile
+    [ -f $HOME/.profile ] && . $HOME/.profile
     xsess_tmp=`mktemp /tmp/xsess-env-XXXXXX`
     $SHELL --login -c "/bin/sh -c 'export -p' > $xsess_tmp"
     . $xsess_tmp
@@ -50,4 +43,7 @@ case $SHELL in
     ;;
 esac
 
+# Restore user shell setting that may have been clobbered by setting environment
+export SHELL=$SDDM_USER_SHELL
+
 exec $@
diff --git a/data/themes/CMakeLists.txt b/data/themes/CMakeLists.txt
index 132fd55..a18fe89 100644
--- a/data/themes/CMakeLists.txt
+++ b/data/themes/CMakeLists.txt
@@ -8,11 +8,17 @@ foreach(THEME ${THEMES})
 
     set_source_files_properties(${TRANSLATION_SOURCES} PROPERTIES OUTPUT_LOCATION "${CMAKE_CURRENT_BINARY_DIR}/${TRANSLATIONS_DIR}")
 
-    qt5_add_translation(QM_FILES "${TRANSLATION_SOURCES}")
+    qt_add_translation(QM_FILES "${TRANSLATION_SOURCES}")
 
-    install(DIRECTORY "${THEME}" DESTINATION "${DATA_INSTALL_DIR}/themes" PATTERN "${THEME}/*.ts"
-            EXCLUDE PATTERN "${THEME}/.gitattributes"
-            EXCLUDE)
+    configure_file("${THEME}/metadata.desktop.in" "${THEME}/metadata.desktop" @ONLY)
+
+    install(DIRECTORY "${THEME}" DESTINATION "${DATA_INSTALL_DIR}/themes"
+            PATTERN "${THEME}/*.in" EXCLUDE
+            PATTERN "${THEME}/*.ts" EXCLUDE
+            PATTERN "${THEME}/.gitattributes" EXCLUDE)
+
+    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/${THEME}/metadata.desktop"
+            DESTINATION "${DATA_INSTALL_DIR}/themes/${THEME}/")
 
     list(APPEND THEMES_QM_FILES ${QM_FILES})
 endforeach(THEME)
diff --git a/data/themes/elarun/Main.qml b/data/themes/elarun/Main.qml
index 365c4f1..d0caada 100644
--- a/data/themes/elarun/Main.qml
+++ b/data/themes/elarun/Main.qml
@@ -39,20 +39,23 @@ Rectangle {
 
     Connections {
         target: sddm
-        onLoginSucceeded: {
+        function onLoginSucceeded() {
         }
-        onLoginFailed: {
+        function onInformationMessage(message) {
+        }
+        function onLoginFailed() {
             pw_entry.text = ""
         }
     }
 
     Background {
         anchors.fill: parent
-        source: config.background
+        source: Qt.resolvedUrl(config.background)
         fillMode: Image.PreserveAspectCrop
         onStatusChanged: {
-            if (status == Image.Error && source != config.defaultBackground) {
-                source = config.defaultBackground
+            var defaultBackground = Qt.resolvedUrl(config.defaultBackground)
+            if (status == Image.Error && source != defaultBackground) {
+                source = defaultBackground
             }
         }
     }
@@ -70,12 +73,12 @@ Rectangle {
 
             Image {
                 anchors.fill: parent
-                source: "images/rectangle.png"
+                source: Qt.resolvedUrl("images/rectangle.png")
             }
 
             Image {
                 anchors.fill: parent
-                source: "images/rectangle_overlay.png"
+                source: Qt.resolvedUrl("images/rectangle_overlay.png")
                 opacity: 0.1
             }
 
@@ -101,7 +104,7 @@ Rectangle {
                     anchors.centerIn: parent
 
                     Row {
-                        Image { source: "images/user_icon.png" }
+                        Image { source: Qt.resolvedUrl("images/user_icon.png") }
 
                         TextBox {
                             id: user_entry
@@ -119,7 +122,7 @@ Rectangle {
 
                     Row {
 
-                        Image { source: "images/lock.png" }
+                        Image { source: Qt.resolvedUrl("images/lock.png") }
 
                         PasswordBox {
                             id: pw_entry
@@ -132,7 +135,7 @@ Rectangle {
 
                             KeyNavigation.backtab: user_entry; KeyNavigation.tab: login_button
 
-                            Keys.onPressed: {
+                            Keys.onPressed: function (event) {
                                 if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                                     sddm.login(user_entry.text, pw_entry.text, sessionIndex)
                                     event.accepted = true
@@ -148,11 +151,11 @@ Rectangle {
                     anchors.verticalCenter: parent.verticalCenter
                     anchors.margins: 20
 
-                    source: "images/login_normal.png"
+                    source: Qt.resolvedUrl("images/login_normal.png")
 
                     onClicked: sddm.login(user_entry.text, pw_entry.text, sessionIndex)
 
-                    KeyNavigation.backtab: pw_entry; KeyNavigation.tab: session_button
+		    KeyNavigation.backtab: pw_entry; KeyNavigation.tab: session
                 }
 
                 Item {
@@ -169,15 +172,15 @@ Rectangle {
 
                         ImageButton {
                             id: system_button
-                            source: "images/system_shutdown.png"
+                            source: Qt.resolvedUrl("images/system_shutdown.png")
                             onClicked: sddm.powerOff()
 
-                            KeyNavigation.backtab: session_button; KeyNavigation.tab: reboot_button
+			    KeyNavigation.backtab: session; KeyNavigation.tab: reboot_button
                         }
 
                         ImageButton {
                             id: reboot_button
-                            source: "images/system_reboot.png"
+                            source: Qt.resolvedUrl("images/system_reboot.png")
                             onClicked: sddm.reboot()
 
                             KeyNavigation.backtab: system_button; KeyNavigation.tab: suspend_button
@@ -185,7 +188,7 @@ Rectangle {
 
                         ImageButton {
                             id: suspend_button
-                            source: "images/system_suspend.png"
+                            source: Qt.resolvedUrl("images/system_suspend.png")
                             visible: sddm.canSuspend
                             onClicked: sddm.suspend()
 
@@ -194,7 +197,7 @@ Rectangle {
 
                         ImageButton {
                             id: hibernate_button
-                            source: "images/system_hibernate.png"
+                            source: Qt.resolvedUrl("images/system_hibernate.png")
                             visible: sddm.canHibernate
                             onClicked: sddm.hibernate()
 
@@ -254,7 +257,7 @@ Rectangle {
                 width: 245
                 anchors.verticalCenter: parent.verticalCenter
 
-                arrowIcon: "angle-down.png"
+                arrowIcon: Qt.resolvedUrl("angle-down.png")
 
                 model: sessionModel
                 index: sessionModel.lastIndex
@@ -268,6 +271,8 @@ Rectangle {
                 height: parent.height
                 anchors.verticalCenter: parent.verticalCenter
 
+                visible: layoutBox.visible
+
                 text: textConstants.layout
                 font.pixelSize: 14
                 verticalAlignment: Text.AlignVCenter
@@ -279,7 +284,9 @@ Rectangle {
                 anchors.verticalCenter: parent.verticalCenter
                 font.pixelSize: 14
 
-                arrowIcon: "angle-down.png"
+                visible: keyboard.enabled && keyboard.layouts.length > 0
+
+                arrowIcon: Qt.resolvedUrl("angle-down.png")
 
                 KeyNavigation.backtab: session; KeyNavigation.tab: user_entry
             }
diff --git a/data/themes/elarun/metadata.desktop b/data/themes/elarun/metadata.desktop.in
similarity index 97%
rename from data/themes/elarun/metadata.desktop
rename to data/themes/elarun/metadata.desktop.in
index 5045588..a992a61 100644
--- a/data/themes/elarun/metadata.desktop
+++ b/data/themes/elarun/metadata.desktop.in
@@ -46,4 +46,4 @@ TranslationsDirectory=translations
 Theme-Id=elarun
 Theme-API=2.0
 Website=https://github.com/sddm/sddm
-
+QtVersion=@QT_MAJOR_VERSION@
diff --git a/data/themes/maldives/Main.qml b/data/themes/maldives/Main.qml
index 659e48f..17b1b8a 100644
--- a/data/themes/maldives/Main.qml
+++ b/data/themes/maldives/Main.qml
@@ -40,25 +40,29 @@ Rectangle {
     Connections {
         target: sddm
 
-        onLoginSucceeded: {
+        function onLoginSucceeded() {
             errorMessage.color = "steelblue"
             errorMessage.text = textConstants.loginSucceeded
         }
-
-        onLoginFailed: {
+        function onLoginFailed() {
             password.text = ""
             errorMessage.color = "red"
             errorMessage.text = textConstants.loginFailed
         }
+        function onInformationMessage(message) {
+            errorMessage.color = "red"
+            errorMessage.text = message
+        }
     }
 
     Background {
         anchors.fill: parent
-        source: config.background
+        source: Qt.resolvedUrl(config.background)
         fillMode: Image.PreserveAspectCrop
         onStatusChanged: {
-            if (status == Image.Error && source != config.defaultBackground) {
-                source = config.defaultBackground
+            var defaultBackground = Qt.resolvedUrl(config.defaultBackground)
+            if (status == Image.Error && source != defaultBackground) {
+                source = defaultBackground
             }
         }
     }
@@ -83,7 +87,7 @@ Rectangle {
             width: Math.max(320, mainColumn.implicitWidth + 50)
             height: Math.max(320, mainColumn.implicitHeight + 50)
 
-            source: "rectangle.png"
+            source: Qt.resolvedUrl("rectangle.png")
 
             Column {
                 id: mainColumn
@@ -121,7 +125,7 @@ Rectangle {
 
                         KeyNavigation.backtab: rebootButton; KeyNavigation.tab: password
 
-                        Keys.onPressed: {
+                        Keys.onPressed: function (event) {
                             if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                                 sddm.login(name.text, password.text, sessionIndex)
                                 event.accepted = true
@@ -148,7 +152,7 @@ Rectangle {
 
                         KeyNavigation.backtab: name; KeyNavigation.tab: session
 
-                        Keys.onPressed: {
+                        Keys.onPressed: function (event) {
                             if (event.key === Qt.Key_Return || event.key === Qt.Key_Enter) {
                                 sddm.login(name.text, password.text, sessionIndex)
                                 event.accepted = true
@@ -182,7 +186,7 @@ Rectangle {
                             width: parent.width; height: 30
                             font.pixelSize: 14
 
-                            arrowIcon: "angle-down.png"
+                            arrowIcon: Qt.resolvedUrl("angle-down.png")
 
                             model: sessionModel
                             index: sessionModel.lastIndex
@@ -197,6 +201,8 @@ Rectangle {
                         spacing : 4
                         anchors.bottom: parent.bottom
 
+                        visible: keyboard.enabled && keyboard.layouts.length > 0
+
                         Text {
                             id: lblLayout
                             width: parent.width
@@ -211,7 +217,7 @@ Rectangle {
                             width: parent.width; height: 30
                             font.pixelSize: 14
 
-                            arrowIcon: "angle-down.png"
+                            arrowIcon: Qt.resolvedUrl("angle-down.png")
 
                             KeyNavigation.backtab: session; KeyNavigation.tab: loginButton
                         }
diff --git a/data/themes/maldives/metadata.desktop b/data/themes/maldives/metadata.desktop.in
similarity index 92%
rename from data/themes/maldives/metadata.desktop
rename to data/themes/maldives/metadata.desktop.in
index acd0fa4..8931da6 100644
--- a/data/themes/maldives/metadata.desktop
+++ b/data/themes/maldives/metadata.desktop.in
@@ -14,3 +14,4 @@ TranslationsDirectory=translations
 Email=abdurrahmanavci@gmail.com
 Theme-Id=maldives
 Theme-API=2.0
+QtVersion=@QT_MAJOR_VERSION@
diff --git a/data/themes/maya/Main.qml b/data/themes/maya/Main.qml
index c663c5d..60473a4 100644
--- a/data/themes/maya/Main.qml
+++ b/data/themes/maya/Main.qml
@@ -75,7 +75,7 @@ Rectangle {
   Connections {
     target: sddm
 
-    onLoginSucceeded: {
+    function onLoginSucceeded() {
       prompt_bg.color = successText
       prompt_txt.text = textConstants.loginSucceeded
 
@@ -84,13 +84,22 @@ Rectangle {
 
       anim_success.start()
     }
-    onLoginFailed: {
+    function onLoginFailed() {
       prompt_bg.color = failureText
       prompt_txt.text = textConstants.loginFailed
 
       maya_busy.visible = false;
       maya_busy_anim.stop()
 
+      anim_failure.start()
+    }
+    function onInformationMessage(message) {
+      prompt_bg.color = failureText
+      prompt_txt.text = message
+
+      maya_busy.visible = false;
+      maya_busy_anim.stop()
+
       anim_failure.start()
     }
   }
@@ -230,6 +239,8 @@ Rectangle {
         width   : spUnit * 2
         height  : parent.height
 
+        visible : keyboard.enabled && keyboard.layouts.length > 0
+
         color       : primaryHue1
         borderColor : primaryHue3
         focusColor  : accentLight
@@ -240,7 +251,7 @@ Rectangle {
         font.family     : opensans_cond_light.name
         font.pixelSize  : spFontNormal
 
-        arrowIcon: "images/ic_arrow_drop_down_white_24px.svg"
+        arrowIcon: Qt.resolvedUrl("images/ic_arrow_drop_down_white_24px.svg")
         arrowColor: primaryHue3
 
         KeyNavigation.tab     : maya_username
@@ -252,6 +263,8 @@ Rectangle {
 
         text    : textConstants.layout
 
+        visible : maya_layout.visible
+
         color   : normalText
 
         font.family     : opensans_cond_light.name
@@ -283,7 +296,7 @@ Rectangle {
         font.family     : opensans_cond_light.name
         font.pixelSize  : spFontNormal
 
-        arrowIcon: "images/ic_arrow_drop_down_white_24px.svg"
+        arrowIcon: Qt.resolvedUrl("images/ic_arrow_drop_down_white_24px.svg")
         arrowColor: primaryHue3
 
         KeyNavigation.tab     : maya_layout
@@ -342,7 +355,7 @@ Rectangle {
         label       : textConstants.shutdown
         labelColor  : normalText
 
-        icon        : "images/ic_power_settings_new_white_24px.svg"
+        icon        : Qt.resolvedUrl("images/ic_power_settings_new_white_24px.svg")
         iconColor   : accentShade
 
         hoverIconColor  : powerColor
@@ -368,7 +381,7 @@ Rectangle {
         label       : textConstants.reboot
         labelColor  : normalText
 
-        icon        : "images/ic_refresh_white_24px.svg"
+        icon        : Qt.resolvedUrl("images/ic_refresh_white_24px.svg")
         iconColor   : accentLight
 
         hoverIconColor  : rebootColor
@@ -479,7 +492,7 @@ Rectangle {
         hoverColor  : accentLight
         textColor   : normalText
 
-        image       : "images/ic_warning_white_24px.svg"
+        image       : Qt.resolvedUrl("images/ic_warning_white_24px.svg")
 
         tooltipEnabled  : true
         tooltipText     : textConstants.capslockWarning
@@ -492,7 +505,7 @@ Rectangle {
         KeyNavigation.tab     : maya_login
         KeyNavigation.backtab : maya_username
 
-        Keys.onPressed: {
+        Keys.onPressed: function (event) {
           if ((event.key === Qt.Key_Return) || (event.key === Qt.Key_Enter)) {
             maya_root.tryLogin()
 
@@ -533,7 +546,7 @@ Rectangle {
 
         onClicked: maya_root.tryLogin()
 
-        Keys.onPressed: {
+        Keys.onPressed: function (event) {
           if ((event.key === Qt.Key_Return) || (event.key === Qt.Key_Enter)) {
             maya_root.tryLogin()
 
diff --git a/data/themes/maya/metadata.desktop b/data/themes/maya/metadata.desktop.in
similarity index 92%
rename from data/themes/maya/metadata.desktop
rename to data/themes/maya/metadata.desktop.in
index 0c2ab26..ccda38b 100644
--- a/data/themes/maya/metadata.desktop
+++ b/data/themes/maya/metadata.desktop.in
@@ -14,3 +14,4 @@ TranslationsDirectory=translations
 Email=spremi@ymail.com
 Theme-Id=maya
 Theme-API=2.0
+QtVersion=@QT_MAJOR_VERSION@
diff --git a/data/translations/CMakeLists.txt b/data/translations/CMakeLists.txt
index 9558a1f..83467fd 100644
--- a/data/translations/CMakeLists.txt
+++ b/data/translations/CMakeLists.txt
@@ -1,5 +1,6 @@
 set(TRANSLATION_FILES
     ar.ts
+    bg.ts
     bn.ts
     ca.ts
     cs.ts
@@ -10,6 +11,7 @@ set(TRANSLATION_FILES
     eu.ts
     fi.ts
     fr.ts
+    gl.ts
     hi_IN.ts
     he.ts
     hu.ts
@@ -17,6 +19,7 @@ set(TRANSLATION_FILES
     is.ts
     it.ts
     ja.ts
+    ka.ts
     kk.ts
     ko.ts
     lt.ts
@@ -42,7 +45,7 @@ set(TRANSLATION_FILES
     zh_TW.ts
 )
 
-qt5_add_translation(QM_FILES ${TRANSLATION_FILES})
+qt_add_translation(QM_FILES ${TRANSLATION_FILES})
 
 install(FILES ${QM_FILES} DESTINATION "${COMPONENTS_TRANSLATION_DIR}")
 
diff --git a/data/translations/ar.ts b/data/translations/ar.ts
index a8651d1..4bf1fd1 100644
--- a/data/translations/ar.ts
+++ b/data/translations/ar.ts
@@ -62,7 +62,7 @@
         <translation>أطفئ</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>اسم المستخدم</translation>
     </message>
     <message>
diff --git a/data/translations/bg.ts b/data/translations/bg.ts
new file mode 100644
index 0000000..97f1907
--- /dev/null
+++ b/data/translations/bg.ts
@@ -0,0 +1,117 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!DOCTYPE TS>
+<TS version="2.1" language="bg">
+<context>
+    <name>PictureBox</name>
+    <message>
+        <source>Press to login</source>
+        <translation>Натиснете, за да влезете</translation>
+    </message>
+</context>
+<context>
+    <name>QObject</name>
+    <message>
+        <source>%1 (Wayland)</source>
+        <translation>%1 (Wayland)</translation>
+    </message>
+</context>
+<context>
+    <name>TextConstants</name>
+    <message>
+        <source>Welcome to %1</source>
+        <translation>Добре дошли в %1</translation>
+    </message>
+    <message>
+        <source>Warning, Caps Lock is ON!</source>
+        <translation>Внимание, Caps Lock е включен!</translation>
+    </message>
+    <message>
+        <source>Layout</source>
+        <translation>Клавиатура</translation>
+    </message>
+    <message>
+        <source>Login</source>
+        <translation>Влизане</translation>
+    </message>
+    <message>
+        <source>Login failed</source>
+        <translation>Неуспешно влизане</translation>
+    </message>
+    <message>
+        <source>Login succeeded</source>
+        <translation>Успешно влизане</translation>
+    </message>
+    <message>
+        <source>Password</source>
+        <translation>Парола</translation>
+    </message>
+    <message>
+        <source>Enter your username and password</source>
+        <translation>Въведете потребителско име и парола</translation>
+    </message>
+    <message>
+        <source>Reboot</source>
+        <translation>Рестартиране</translation>
+    </message>
+        <message>
+        <source>Suspend</source>
+        <translation>Приспиване</translation>
+    </message>
+        <message>
+        <source>Hibernate</source>
+        <translation>Дълбоко заспиване</translation>
+    </message>
+    <message>
+        <source>Session</source>
+        <translation>Сесия</translation>
+    </message>
+    <message>
+        <source>Shutdown</source>
+        <translation>Изключване</translation>
+    </message>
+    <message>
+        <source>Username</source>
+        <translation>Потребителско име</translation>
+    </message>
+        <message>
+        <source>Enter your username</source>
+        <translation>Въведете потребителското си име</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Въведете паролата си</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>Изберете потребител и въведете парола</translation>
+    </message>
+     <message>
+        <source>Show password</source>
+        <translation>Показване на парола</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>Скриване на парола</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>Моля, въведете парола!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>Промяна на парола</translation>
+    </message>
+    <message>
+        <source>Password:</source>
+        <translation>Парола:</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>Промяната на паролата е прекратена, тъй като е достигнат максималния брой опити</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>Нов рунд за промяна на паролата! Моля, въведете текущата парола отново!</translation>
+    </message>
+</context>
+</TS>
diff --git a/data/translations/bn.ts b/data/translations/bn.ts
index f2dff58..934a2aa 100644
--- a/data/translations/bn.ts
+++ b/data/translations/bn.ts
@@ -65,7 +65,7 @@
         <translation>শাটডাউন</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>ব্যবহারকারীর নাম</translation>
     </message>
     <message>
diff --git a/data/translations/ca.ts b/data/translations/ca.ts
index 916bf35..27cb437 100644
--- a/data/translations/ca.ts
+++ b/data/translations/ca.ts
@@ -62,7 +62,7 @@
         <translation>Apaga</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Usuari</translation>
     </message>
     <message>
diff --git a/data/translations/cs.ts b/data/translations/cs.ts
index 8d47f3f..1b8abff 100644
--- a/data/translations/cs.ts
+++ b/data/translations/cs.ts
@@ -62,7 +62,7 @@
         <translation>Vypnout</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Uživatelské jméno</translation>
     </message>
     <message>
diff --git a/data/translations/da.ts b/data/translations/da.ts
index 9bd2d59..a90f078 100644
--- a/data/translations/da.ts
+++ b/data/translations/da.ts
@@ -70,7 +70,7 @@
         <translation>Luk ned</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Brugernavn</translation>
     </message>
     <message>
diff --git a/data/translations/es.ts b/data/translations/es.ts
index 9f27a54..cea361e 100644
--- a/data/translations/es.ts
+++ b/data/translations/es.ts
@@ -62,7 +62,7 @@
         <translation>Apagar</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Usuario</translation>
     </message>
     <message>
diff --git a/data/translations/et.ts b/data/translations/et.ts
index ad3158d..4fbf811 100644
--- a/data/translations/et.ts
+++ b/data/translations/et.ts
@@ -62,7 +62,7 @@
         <translation>Seiska</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Kasutajanimi</translation>
     </message>
     <message>
diff --git a/data/translations/eu.ts b/data/translations/eu.ts
index a6b3fde..2b286bd 100644
--- a/data/translations/eu.ts
+++ b/data/translations/eu.ts
@@ -62,7 +62,7 @@
         <translation>Itzali</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Erabiltzaile izena</translation>
     </message>
     <message>
diff --git a/data/translations/fi.ts b/data/translations/fi.ts
index a4c3c01..07d3592 100644
--- a/data/translations/fi.ts
+++ b/data/translations/fi.ts
@@ -62,7 +62,7 @@
         <translation>Sammuta</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Käyttäjätunnus</translation>
     </message>
     <message>
diff --git a/data/translations/fr.ts b/data/translations/fr.ts
index 252e642..af06e15 100644
--- a/data/translations/fr.ts
+++ b/data/translations/fr.ts
@@ -70,7 +70,7 @@
         <translation>Éteindre</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Identifiant</translation>
     </message>
         <message>
diff --git a/data/translations/gl.ts b/data/translations/gl.ts
new file mode 100644
index 0000000..04b34b4
--- /dev/null
+++ b/data/translations/gl.ts
@@ -0,0 +1,73 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!DOCTYPE TS>
+<TS>
+<context>
+    <name>PictureBox</name>
+    <message>
+        <source>Press to login</source>
+        <translation>Prema para acceder</translation>
+    </message>
+</context>
+<context>
+    <name>QObject</name>
+    <message>
+        <source>%1 (Wayland)</source>
+        <translation>%1 (Wayland)</translation>
+    </message>
+</context>
+<context>
+    <name>TextConstants</name>
+    <message>
+        <source>Welcome to %1</source>
+        <translation>Dámoslle a benvida a %1</translation>
+    </message>
+    <message>
+        <source>Warning, Caps Lock is ON!</source>
+        <translation>Aviso, as maiúsculas están BLOQUEADAS!</translation>
+    </message>
+    <message>
+        <source>Layout</source>
+        <translation>Disposición</translation>
+    </message>
+    <message>
+        <source>Login</source>
+        <translation>Acceder</translation>
+    </message>
+    <message>
+        <source>Login failed</source>
+        <translation>O acceso fallou</translation>
+    </message>
+    <message>
+        <source>Login succeeded</source>
+        <translation>Accedeuse</translation>
+    </message>
+    <message>
+        <source>Password</source>
+        <translation>Contrasinal</translation>
+    </message>
+    <message>
+        <source>Enter your username and password</source>
+        <translation>Escriba o seu nome de persoa usuaria e contrasinal</translation>
+    </message>
+    <message>
+        <source>Reboot</source>
+        <translation>Reiniciar</translation>
+    </message>
+    <message>
+        <source>Session</source>
+        <translation>Sesión</translation>
+    </message>
+    <message>
+        <source>Shutdown</source>
+        <translation>Apagar</translation>
+    </message>
+    <message>
+        <source>Username</source>
+        <translation>Usuaria</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>Seleccione a súa conta e escriba o contrasinal</translation>
+    </message>
+</context>
+</TS>
diff --git a/data/translations/he.ts b/data/translations/he.ts
index a67f287..438265b 100644
--- a/data/translations/he.ts
+++ b/data/translations/he.ts
@@ -62,7 +62,7 @@
         <translation>כיבוי</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>שם משתמש</translation>
     </message>
     <message>
diff --git a/data/translations/hi_IN.ts b/data/translations/hi_IN.ts
index 4df7e97..498a02e 100644
--- a/data/translations/hi_IN.ts
+++ b/data/translations/hi_IN.ts
@@ -62,7 +62,7 @@
         <translation>बंद कीजिए</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>आपकी पहचान</translation>
     </message>
     <message>
diff --git a/data/translations/hsb.ts b/data/translations/hsb.ts
new file mode 100644
index 0000000..c296d8b
--- /dev/null
+++ b/data/translations/hsb.ts
@@ -0,0 +1,117 @@
+<?xml version='1.0' encoding='utf-8'?>
+<!DOCTYPE TS>
+<TS version="2.1" language="hsb">
+<context>
+    <name>PictureBox</name>
+    <message>
+        <source>Press to login</source>
+        <translation>Klikńće tu, zo byšće so přizjewili</translation>
+    </message>
+</context>
+<context>
+    <name>QObject</name>
+    <message>
+        <source>%1 (Wayland)</source>
+        <translation>%1 (Wayland)</translation>
+    </message>
+</context>
+<context>
+    <name>TextConstants</name>
+    <message>
+        <source>Welcome to %1</source>
+        <translation>Witajće na %1</translation>
+    </message>
+    <message>
+        <source>Warning, Caps Lock is ON!</source>
+        <translation>Kedźbu, wulkopisanje je zaswěćene!</translation>
+    </message>
+    <message>
+        <source>Layout</source>
+        <translation>Layout</translation>
+    </message>
+    <message>
+        <source>Login</source>
+        <translation>So přizjewić</translation>
+    </message>
+    <message>
+        <source>Login failed</source>
+        <translation>Přizjewjenje njeje so poradźiło</translation>
+    </message>
+    <message>
+        <source>Login succeeded</source>
+        <translation>Přizjewjenje bě wuspěšne</translation>
+    </message>
+    <message>
+        <source>Password</source>
+        <translation>Hesło</translation>
+    </message>
+    <message>
+        <source>Enter your username and password</source>
+        <translation>Prošu zapodajće wužiwarske mjeno a hesło</translation>
+    </message>
+    <message>
+        <source>Reboot</source>
+        <translation>Znowa startować</translation>
+    </message>
+    <message>
+        <source>Suspend</source>
+        <translation>Spinkać</translation>
+    </message>
+    <message>
+        <source>Hibernate</source>
+        <translation>Zymski spar</translation>
+    </message>
+    <message>
+        <source>Session</source>
+        <translation>Posedźenje</translation>
+    </message>
+    <message>
+        <source>Shutdown</source>
+        <translation>Hasnyć</translation>
+    </message>
+    <message>
+        <source>Username</source>
+        <translation>Wužiwarske mjeno</translation>
+    </message>
+    <message>
+        <source>Enter your username</source>
+        <translation>Zapodajće swoje wužiwarske mjeno</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Zapodajće swoje hesło</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>Wužiwarja wubrać a hesło zapodać</translation>
+    </message>
+    <message>
+        <source>Show password</source>
+        <translation>Hesło pokazać</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>Hesło chować</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>Prošu zapodajće hesło!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>Hesło změnić</translation>
+    </message>
+    <message>
+        <source>Password:</source>
+        <translation>Hesło:</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>Změna hesła přetorhnjena (přewjele pospytow)</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>Přichodny pospyt změny hesła! Prošu zapodajće tuchwilne hesło znowa!</translation>
+    </message>
+</context>
+</TS>
diff --git a/data/translations/hu.ts b/data/translations/hu.ts
index f1cc9e3..cdd41c5 100644
--- a/data/translations/hu.ts
+++ b/data/translations/hu.ts
@@ -62,7 +62,7 @@
         <translation>Leállítás</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Felhasználónév</translation>
     </message>
     <message>
diff --git a/data/translations/ie.ts b/data/translations/ie.ts
index 856824a..80eb25d 100644
--- a/data/translations/ie.ts
+++ b/data/translations/ie.ts
@@ -60,7 +60,7 @@
     </message>
     <message>
         <location filename="TextConstants.qml" line="43"/>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Usator</translation>
     </message>
     <message>
diff --git a/data/translations/is.ts b/data/translations/is.ts
index 6baac7c..11edff9 100644
--- a/data/translations/is.ts
+++ b/data/translations/is.ts
@@ -62,7 +62,7 @@
         <translation>Slökkva</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Notandanafn</translation>
     </message>
     <message>
diff --git a/data/translations/it.ts b/data/translations/it.ts
index 3d4c077..a5e1b25 100644
--- a/data/translations/it.ts
+++ b/data/translations/it.ts
@@ -62,7 +62,7 @@
         <translation>Spegni</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Nome utente</translation>
     </message>
     <message>
diff --git a/data/translations/ja.ts b/data/translations/ja.ts
index 4c90a65..2bd0bc0 100644
--- a/data/translations/ja.ts
+++ b/data/translations/ja.ts
@@ -62,7 +62,7 @@
         <translation>シャットダウン</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>ユーザ名</translation>
     </message>
     <message>
diff --git a/data/translations/ka.ts b/data/translations/ka.ts
new file mode 100644
index 0000000..eb5c521
--- /dev/null
+++ b/data/translations/ka.ts
@@ -0,0 +1,125 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!DOCTYPE TS>
+<TS version="2.1" language="ka_GE">
+    <extra-po-header-language>ka</extra-po-header-language>
+    <extra-po-header-language_team>Georgian &lt;(nothing)&gt;</extra-po-header-language_team>
+    <extra-po-header-last_translator>Temuri Doghonadze &lt;temuri.doghonadze@gmail.com&gt;</extra-po-header-last_translator>
+    <extra-po-header-po_revision_date></extra-po-header-po_revision_date>
+    <extra-po-header-pot_creation_date></extra-po-header-pot_creation_date>
+    <extra-po-header-project_id_version>SDDM</extra-po-header-project_id_version>
+    <extra-po-header-x_generator>Poedit 3.1.1</extra-po-header-x_generator>
+    <extra-po-headers>Project-Id-Version,POT-Creation-Date,PO-Revision-Date,Last-Translator,Language-Team,Language,MIME-Version,Content-Type,Content-Transfer-Encoding,Plural-Forms,X-Language,X-Qt-Contexts,X-Generator</extra-po-headers>
+<context>
+    <name>PictureBox</name>
+    <message>
+        <source>Press to login</source>
+        <translation>დააწექით შესასვლელად</translation>
+    </message>
+</context>
+<context>
+    <name>QObject</name>
+    <message>
+        <source>%1 (Wayland)</source>
+        <translation>%1 (Wayland)</translation>
+    </message>
+</context>
+<context>
+    <name>TextConstants</name>
+    <message>
+        <source>Welcome to %1</source>
+        <translation>მოგესალმებით %1-ში</translation>
+    </message>
+    <message>
+        <source>Warning, Caps Lock is ON!</source>
+        <translation>გაფრთხილება: CapsLock ჩართულია!</translation>
+    </message>
+    <message>
+        <source>Layout</source>
+        <translation>განლაგება</translation>
+    </message>
+    <message>
+        <source>Login</source>
+        <translation>შესვლა</translation>
+    </message>
+    <message>
+        <source>Login failed</source>
+        <translation>შესვლის შეცდომა</translation>
+    </message>
+    <message>
+        <source>Login succeeded</source>
+        <translation>შესვლა წარმატებულია</translation>
+    </message>
+    <message>
+        <source>Password</source>
+        <translation>პაროლი</translation>
+    </message>
+    <message>
+        <source>Enter your username and password</source>
+        <translation>შეიყვანეთ თქვენი მომხარებლის სახელი და პაროლი</translation>
+    </message>
+    <message>
+        <source>Reboot</source>
+        <translation>გადატვირთვა</translation>
+    </message>
+    <message>
+        <source>Suspend</source>
+        <translation>ძილი</translation>
+    </message>
+    <message>
+        <source>Hibernate</source>
+        <translation>პროგრამული ძილი</translation>
+    </message>
+    <message>
+        <source>Session</source>
+        <translation>სესია</translation>
+    </message>
+    <message>
+        <source>Shutdown</source>
+        <translation>გამორთვა</translation>
+    </message>
+    <message>
+        <source>Username</source>
+        <translation>მოხმარებელი</translation>
+    </message>
+    <message>
+        <source>Enter your username</source>
+        <translation>შეიყვანეთ თქვენი მომხარებლის სახელი</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>შეიყვანეთ თქვენი პაროლი</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>აირჩიეთ თქვენი მომხმარებელი და შეიყვანეთ პაროლი</translation>
+    </message>
+    <message>
+        <source>Show password</source>
+        <translation>პაროლის ჩვენება</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>პაროლის დამალვა</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>შეიყვანეთ პაროლი!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>პაროლის შეცვლა</translation>
+    </message>
+    <message>
+        <source>Password:</source>
+        <translation>პაროლი:</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>პაროლის შეცვლა გაუქმდა ცდების მაქსიმალური რაოდენობის გადაჭარბების გამო</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>დროა თავიდან შეცვალოთ პაროლი! თავიდან შეიყვანეთ თქვენი მიმდინარე პაროლი!</translation>
+    </message>
+</context>
+</TS>
diff --git a/data/translations/kk.ts b/data/translations/kk.ts
index a1eb5f4..5c56a77 100644
--- a/data/translations/kk.ts
+++ b/data/translations/kk.ts
@@ -62,7 +62,7 @@
         <translation>Сөндіру</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Пайдаланушы аты</translation>
     </message>
     <message>
diff --git a/data/translations/ko.ts b/data/translations/ko.ts
index d491738..5ee5bf1 100644
--- a/data/translations/ko.ts
+++ b/data/translations/ko.ts
@@ -65,10 +65,6 @@
         <source>Shutdown</source>
         <translation>컴퓨터 끄기</translation>
     </message>
-    <message>
-        <source>User name</source>
-        <translation>사용자 이름</translation>
-    </message>
     <message>
         <source>Welcome to %1</source>
         <translation>%1에 오신 것을 환영합니다</translation>
diff --git a/data/translations/lt.ts b/data/translations/lt.ts
index e674de0..2333eed 100644
--- a/data/translations/lt.ts
+++ b/data/translations/lt.ts
@@ -53,6 +53,14 @@
         <source>Reboot</source>
         <translation>Paleisti iš naujo</translation>
     </message>
+    <message>
+        <source>Suspend</source>
+        <translation>Pristabdyti</translation>
+    </message>
+    <message>
+        <source>Hibernate</source>
+        <translation>Užmigdyti</translation>
+    </message>
     <message>
         <source>Session</source>
         <translation>Seansas</translation>
@@ -62,12 +70,48 @@
         <translation>Išjungti</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Naudotojo vardas</translation>
     </message>
+    <message>
+        <source>Enter your username</source>
+        <translation>Įveskite savo naudotojo vardą</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Įveskite savo slaptažodį</translation>
+    </message>
     <message>
         <source>Select your user and enter password</source>
         <translation>Pasirinkite savo naudotoją ir įveskite slaptažodį</translation>
     </message>
+    <message>
+        <source>Show password</source>
+        <translation>Rodyti slaptažodį</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>Slėpti slaptažodį</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>Įveskite slaptažodį!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>Keisti slaptažodį</translation>
+    </message>
+    <message>
+        <source>Password:</source>
+        <translation>Slaptažodis:</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>Slaptažodžio keitimas nutrauktas, nes pasiektas didžiausias bandymų skaičius</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>Dar kartą įveskite dabartinį slaptažodį!</translation>
+    </message>
 </context>
 </TS>
diff --git a/data/translations/lv.ts b/data/translations/lv.ts
index 05721e9..67823cd 100644
--- a/data/translations/lv.ts
+++ b/data/translations/lv.ts
@@ -62,7 +62,7 @@
         <translation>Izslēgt</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Lietotāja vārds</translation>
     </message>
     <message>
diff --git a/data/translations/nb.ts b/data/translations/nb.ts
index 56a6116..3d3c694 100644
--- a/data/translations/nb.ts
+++ b/data/translations/nb.ts
@@ -4,7 +4,6 @@
 <context>
     <name>PictureBox</name>
     <message>
-        <location filename="../../components/2.0/PictureBox.qml" line="123"/>
         <source>Press to login</source>
         <translation>Trykk for å logge inn</translation>
     </message>
@@ -12,7 +11,6 @@
 <context>
     <name>QObject</name>
     <message>
-        <location filename="../../src/common/Session.cpp" line="166"/>
         <source>%1 (Wayland)</source>
         <translation>%1 (Wayland)</translation>
     </message>
@@ -20,69 +18,100 @@
 <context>
     <name>TextConstants</name>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="28"/>
+        <source>Welcome to %1</source>
+        <translation>Velkommen til %1</translation>
+    </message>
+    <message>
         <source>Warning, Caps Lock is ON!</source>
         <translation>Advarsel: «Caps Lock» står på!</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="29"/>
         <source>Layout</source>
         <translation>Tastatur</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="30"/>
         <source>Login</source>
         <translation>Logg inn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="31"/>
         <source>Login failed</source>
-        <translation>Klarte ikke logge inn</translation>
+        <translation>Innlogging feilet</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="32"/>
         <source>Login succeeded</source>
-        <translation>Innlogget</translation>
+        <translation>Innlogging lyktes</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="33"/>
         <source>Password</source>
         <translation>Passord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="34"/>
         <source>Enter your username and password</source>
-        <translation>Skriv inn brukernavn og passord</translation>
+        <translation>Skriv inn ditt brukernavn og passord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="35"/>
-        <source>Select your user and enter password</source>
-        <translation>Velg bruker og skriv inn passord</translation>
-    </message>
-    <message>
-        <location filename="../../components/common/TextConstants.qml" line="36"/>
         <source>Reboot</source>
-        <translation>Start på nytt</translation>
+        <translation>Omstart</translation>
+    </message>
+    <message>
+        <source>Suspend</source>
+        <translation>Hvile</translation>
+    </message>
+    <message>
+        <source>Hibernate</source>
+        <translation>Dvale</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="37"/>
         <source>Session</source>
         <translation>Økt</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="38"/>
         <source>Shutdown</source>
         <translation>Slå av</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="39"/>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Brukernavn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="40"/>
-        <source>Welcome to %1</source>
-        <translation>Velkommen til %1</translation>
+        <source>Enter your username</source>
+        <translation>Skriv inn ditt brukernavn</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Skriv inn ditt passord</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>Velg bruker og skriv inn passord</translation>
+    </message>
+    <message>
+        <source>Show password</source>
+        <translation>Vis passord</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>Skjul passord</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>Vennligst skriv inn et passord!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>Endre passord</translation>
+    </message>
+    <message>
+        <source>Unregistered user</source>
+        <translation>Ugyldig bruker</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>Endring av passord ble avbrutt da høyeste antall forsøk er nådd</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>Ny runde for ending av passord! Vennligst skriv inn det nåværende passordet igjen!</translation>
     </message>
 </context>
 </TS>
diff --git a/data/translations/nl.ts b/data/translations/nl.ts
index 1e43949..35c250a 100644
--- a/data/translations/nl.ts
+++ b/data/translations/nl.ts
@@ -62,7 +62,7 @@
         <translation>Uitschakelen</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Gebruikersnaam</translation>
     </message>
     <message>
diff --git a/data/translations/nn.ts b/data/translations/nn.ts
index 729e443..29d8523 100644
--- a/data/translations/nn.ts
+++ b/data/translations/nn.ts
@@ -4,7 +4,6 @@
 <context>
     <name>PictureBox</name>
     <message>
-        <location filename="../../components/2.0/PictureBox.qml" line="123"/>
         <source>Press to login</source>
         <translation>Trykk for å logga inn</translation>
     </message>
@@ -12,7 +11,6 @@
 <context>
     <name>QObject</name>
     <message>
-        <location filename="../../src/common/Session.cpp" line="166"/>
         <source>%1 (Wayland)</source>
         <translation>%1 (Wayland)</translation>
     </message>
@@ -20,69 +18,100 @@
 <context>
     <name>TextConstants</name>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="28"/>
+        <source>Welcome to %1</source>
+        <translation>Velkommen til %1</translation>
+    </message>
+    <message>
         <source>Warning, Caps Lock is ON!</source>
         <translation>Åtvaring: «Caps Lock» står på!</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="29"/>
         <source>Layout</source>
         <translation>Tastatur</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="30"/>
         <source>Login</source>
         <translation>Logg inn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="31"/>
         <source>Login failed</source>
         <translation>Klarte ikkje logga inn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="32"/>
         <source>Login succeeded</source>
         <translation>Logga inn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="33"/>
         <source>Password</source>
         <translation>Passord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="34"/>
-        <source>Enter your username and password</source>
-        <translation>Skriv inn brukarnamn og passord</translation>
+        <source>Enter your username</source>
+        <translation>Skriv inn brukarnamn</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Skriv inn passord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="35"/>
         <source>Select your user and enter password</source>
         <translation>Vel brukar og skriv inn passord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="36"/>
         <source>Reboot</source>
         <translation>Start på nytt</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="37"/>
         <source>Session</source>
         <translation>Økt</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="38"/>
         <source>Shutdown</source>
         <translation>Slå av</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="39"/>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Brukarnamn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="40"/>
-        <source>Welcome to %1</source>
-        <translation>Velkommen til %1</translation>
+        <source>Enter your username</source>
+        <translation>Skriv inn brukarnamn</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Skriv inn passord</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>Vel brukar og skriv inn passord</translation>
+    </message>
+    <message>
+        <source>Show password</source>
+        <translation>Vis passord</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>Skjul passord</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>Ver vennleg og skriv inn eit passord!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>Endre passord</translation>
+    </message>
+    <message>
+        <source>Unregistered user</source>
+        <translation>Ugyldig brukar</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>Endring av passord vart avbrotne då høgaste talet på forsøk er nådd</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>Ny runde for ending av passord! Ver vennleg og skriv inn det noverande passordet igjen!</translation>
     </message>
 </context>
 </TS>
diff --git a/data/translations/oc.ts b/data/translations/oc.ts
index 3826d94..0823beb 100644
--- a/data/translations/oc.ts
+++ b/data/translations/oc.ts
@@ -62,7 +62,7 @@
         <translation>Atudar</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Nom d’utilizaire</translation>
     </message>
     <message>
diff --git a/data/translations/pl.ts b/data/translations/pl.ts
index 58ae76a..b0b728d 100644
--- a/data/translations/pl.ts
+++ b/data/translations/pl.ts
@@ -78,7 +78,7 @@
         <translation>Zahibernuj</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Nazwa użytkownika</translation>
     </message>
     <message>
diff --git a/data/translations/pt_BR.ts b/data/translations/pt_BR.ts
index 40b03c2..ec3fe9b 100644
--- a/data/translations/pt_BR.ts
+++ b/data/translations/pt_BR.ts
@@ -5,14 +5,14 @@
     <name>PictureBox</name>
     <message>
         <source>Press to login</source>
-        <translation type="unfinished"></translation>
+        <translation>Aperte para fazer login</translation>
     </message>
 </context>
 <context>
     <name>QObject</name>
     <message>
         <source>%1 (Wayland)</source>
-        <translation type="unfinished"></translation>
+        <translation>%1 (Wayland)</translation>
     </message>
 </context>
 <context>
@@ -62,7 +62,7 @@
         <translation>Desligar</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Usuário</translation>
     </message>
     <message>
diff --git a/data/translations/pt_PT.ts b/data/translations/pt_PT.ts
index bc2c5c8..97f2088 100644
--- a/data/translations/pt_PT.ts
+++ b/data/translations/pt_PT.ts
@@ -5,14 +5,14 @@
     <name>PictureBox</name>
     <message>
         <source>Press to login</source>
-        <translation type="unfinished"></translation>
+        <translation>Pressione para fazer login</translation>
     </message>
 </context>
 <context>
     <name>QObject</name>
     <message>
         <source>%1 (Wayland)</source>
-        <translation type="unfinished"></translation>
+        <translation>%1 (Wayland)</translation>
     </message>
 </context>
 <context>
@@ -62,7 +62,7 @@
         <translation>Desligar</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Utilizador</translation>
     </message>
     <message>
diff --git a/data/translations/ro.ts b/data/translations/ro.ts
index 96883f5..062a43e 100644
--- a/data/translations/ro.ts
+++ b/data/translations/ro.ts
@@ -62,7 +62,7 @@
         <translation>Oprește</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Nume de utilizator</translation>
     </message>
     <message>
diff --git a/data/translations/sk.ts b/data/translations/sk.ts
index efc7eb0..395abc4 100644
--- a/data/translations/sk.ts
+++ b/data/translations/sk.ts
@@ -62,7 +62,7 @@
         <translation>Vypnúť</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Užívateľské meno</translation>
     </message>
     <message>
diff --git a/data/translations/sr.ts b/data/translations/sr.ts
index 994eab9..2c81253 100644
--- a/data/translations/sr.ts
+++ b/data/translations/sr.ts
@@ -62,7 +62,7 @@
         <translation>Угаси</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Корисничко име</translation>
     </message>
     <message>
diff --git a/data/translations/sr@ijekavian.ts b/data/translations/sr@ijekavian.ts
index d6558dc..ad73ecc 100644
--- a/data/translations/sr@ijekavian.ts
+++ b/data/translations/sr@ijekavian.ts
@@ -62,7 +62,7 @@
         <translation>Угаси</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Корисничко име</translation>
     </message>
     <message>
diff --git a/data/translations/sr@ijekavianlatin.ts b/data/translations/sr@ijekavianlatin.ts
index 73ea97b..80b8cc2 100644
--- a/data/translations/sr@ijekavianlatin.ts
+++ b/data/translations/sr@ijekavianlatin.ts
@@ -62,7 +62,7 @@
         <translation>Ugasi</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Korisničko ime</translation>
     </message>
     <message>
diff --git a/data/translations/sr@latin.ts b/data/translations/sr@latin.ts
index 221f669..fc540c3 100644
--- a/data/translations/sr@latin.ts
+++ b/data/translations/sr@latin.ts
@@ -62,7 +62,7 @@
         <translation>Ugasi</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Korisničko ime</translation>
     </message>
     <message>
diff --git a/data/translations/sv.ts b/data/translations/sv.ts
index 319ff23..3421a71 100644
--- a/data/translations/sv.ts
+++ b/data/translations/sv.ts
@@ -1,10 +1,9 @@
 <?xml version="1.0" encoding="utf-8"?>
 <!DOCTYPE TS>
-<TS version="2.1" language="nn">
+<TS version="2.1" language="sv">
 <context>
     <name>PictureBox</name>
     <message>
-        <location filename="../../components/2.0/PictureBox.qml" line="123"/>
         <source>Press to login</source>
         <translation>Tryck för att logga in</translation>
     </message>
@@ -12,7 +11,6 @@
 <context>
     <name>QObject</name>
     <message>
-        <location filename="../../src/common/Session.cpp" line="166"/>
         <source>%1 (Wayland)</source>
         <translation>%1 (Wayland)</translation>
     </message>
@@ -20,69 +18,101 @@
 <context>
     <name>TextConstants</name>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="28"/>
+        <source>Welcome to %1</source>
+        <translation>Välkommen till %1</translation>
+    </message>
+    <message>
         <source>Warning, Caps Lock is ON!</source>
         <translation>Varning, «Caps Lock» är på!</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="29"/>
         <source>Layout</source>
         <translation>Tangentbordslayout</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="30"/>
         <source>Login</source>
         <translation>Logga in</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="31"/>
         <source>Login failed</source>
         <translation>Inloggningen misslyckades</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="32"/>
         <source>Login succeeded</source>
         <translation>Inloggningen lyckades</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="33"/>
         <source>Password</source>
         <translation>Lösenord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="34"/>
         <source>Enter your username and password</source>
         <translation>Fyll i ditt användarnamn och lösenord</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="35"/>
-        <source>Select your user and enter password</source>
-        <translation>Välj din användare och ange lösenord</translation>
-    </message>
-    <message>
-        <location filename="../../components/common/TextConstants.qml" line="36"/>
         <source>Reboot</source>
         <translation>Starta om</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="37"/>
+        <source>Suspend</source>
+        <translation>Vänteläge</translation>
+    </message>
+    <message>
+        <source>Hibernate</source>
+        <translation>Viloläge</translation>
+    </message>
+    <message>
         <source>Session</source>
         <translation>Session</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="38"/>
         <source>Shutdown</source>
         <translation>Stäng av</translation>
     </message>
     <message>
         <location filename="../../components/common/TextConstants.qml" line="39"/>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Användarnamn</translation>
     </message>
     <message>
-        <location filename="../../components/common/TextConstants.qml" line="40"/>
-        <source>Welcome to %1</source>
-        <translation>Välkommen till %1</translation>
+        <source>Enter your username</source>
+        <translation>Fyll i ditt användarnamn</translation>
+    </message>
+    <message>
+        <source>Enter your password</source>
+        <translation>Fyll i ditt lösenord</translation>
+    </message>
+    <message>
+        <source>Select your user and enter password</source>
+        <translation>Välj användarnamn och skriv in lösenord</translation>
+    </message>
+    <message>
+        <source>Show password</source>
+        <translation>Visa lösenord</translation>
+    </message>
+    <message>
+        <source>Hide password</source>
+        <translation>Dölj lösenord</translation>
+    </message>
+    <message>
+        <source>Please enter a password!</source>
+        <translation>Fyll i lösenord!</translation>
+    </message>
+    <message>
+        <source>Change password</source>
+        <translation>Ändra lösenord</translation>
+    </message>
+    <message>
+        <source>Unregistered user</source>
+        <translation>Ogiltig användarnamn</translation>
+    </message>
+    <message>
+        <source>Password change aborted because maximum tries reached</source>
+        <translation>Lösenordsbyte avbröts eftersom maximalt antal försök har uppnåtts</translation>
+    </message>
+    <message>
+        <source>New password change round! Please input current password again!</source>
+        <translation>Nytt varv för lösenordsbyte! Skriv in nuvarande lösenord igen!</translation>
     </message>
 </context>
 </TS>
diff --git a/data/translations/tr.ts b/data/translations/tr.ts
index dc52078..16924b9 100644
--- a/data/translations/tr.ts
+++ b/data/translations/tr.ts
@@ -5,14 +5,14 @@
     <name>PictureBox</name>
     <message>
         <source>Press to login</source>
-        <translation type="unfinished"></translation>
+        <translation>Giriş yapmak için tıklayın</translation>
     </message>
 </context>
 <context>
     <name>QObject</name>
     <message>
         <source>%1 (Wayland)</source>
-        <translation type="unfinished"></translation>
+        <translation>%1 (Wayland)</translation>
     </message>
 </context>
 <context>
@@ -62,7 +62,7 @@
         <translation>Kapat</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Kullanıcı adı</translation>
     </message>
     <message>
diff --git a/data/translations/uk.ts b/data/translations/uk.ts
index bb14d69..23d8e39 100644
--- a/data/translations/uk.ts
+++ b/data/translations/uk.ts
@@ -48,7 +48,7 @@
         <translation>Вимкнути</translation>
     </message>
     <message>
-        <source>User name</source>
+        <source>Username</source>
         <translation>Ім'я користувача</translation>
     </message>
     <message>
diff --git a/docs/THEMING.md b/docs/THEMING.md
index bc69be0..69997e8 100644
--- a/docs/THEMING.md
+++ b/docs/THEMING.md
@@ -8,11 +8,13 @@ We also provide models containing information about the screens, available sessi
 
     ComboBox {
     	id: session
-    	arrowIcon: "angle-down.png"
+    	arrowIcon: Qt.resolvedPath("angle-down.png")
     	model: sessionModel
     	index: sessionModel.lastIndex
     }
 
+Themes are run by a Qt 5 built sddm-greeter, unless the `QtVersion` property in metadata.desktop specifies a different version, such as `QtVersion=6` for using `sddm-greeter-qt6`.
+
 ## Proxy Object
 
 We provide a proxy object, called as `sddm` to the themes as a context property. This object holds some useful properties about the host system. It also acts as a proxy between the greeter and the daemon. All of the methods called on this object will be transferred to the daemon through a local socket to be executed there.
diff --git a/services/CMakeLists.txt b/services/CMakeLists.txt
index fbf7608..f542c55 100644
--- a/services/CMakeLists.txt
+++ b/services/CMakeLists.txt
@@ -1,15 +1,13 @@
 if(SYSTEMD_FOUND)
-    configure_file("${CMAKE_CURRENT_SOURCE_DIR}/sddm.service.in" "${CMAKE_CURRENT_BINARY_DIR}/sddm.service")
+    configure_file(sddm.service.in sddm.service)
     install(FILES "${CMAKE_CURRENT_BINARY_DIR}/sddm.service" DESTINATION "${SYSTEMD_SYSTEM_UNIT_DIR}")
-endif()
 
-if(USE_ELOGIND)
-    set(LOGIND_PAM_MODULE "pam_elogind.so")
-else()
-    set(LOGIND_PAM_MODULE "pam_systemd.so")
+    configure_file(sddm-sysuser.conf.in sddm-sysuser.conf)
+    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/sddm-sysuser.conf" DESTINATION "${SYSTEMD_SYSUSERS_DIR}" RENAME sddm.conf)
 endif()
-configure_file("${CMAKE_CURRENT_SOURCE_DIR}/sddm-greeter.pam.in" "${CMAKE_CURRENT_BINARY_DIR}/sddm-greeter.pam")
 
-install(FILES sddm.pam DESTINATION ${CMAKE_INSTALL_FULL_SYSCONFDIR}/pam.d RENAME sddm)
-install(FILES sddm-autologin.pam DESTINATION ${CMAKE_INSTALL_FULL_SYSCONFDIR}/pam.d RENAME sddm-autologin)
-install(FILES "${CMAKE_CURRENT_BINARY_DIR}/sddm-greeter.pam" DESTINATION ${CMAKE_INSTALL_FULL_SYSCONFDIR}/pam.d RENAME sddm-greeter)
+# systemd-tmpfiles can be used standalone without other systemd parts
+if(DEFINED SYSTEMD_TMPFILES_DIR)
+    configure_file(sddm-tmpfiles.conf.in sddm-tmpfiles.conf)
+    install(FILES "${CMAKE_CURRENT_BINARY_DIR}/sddm-tmpfiles.conf" DESTINATION "${SYSTEMD_TMPFILES_DIR}" RENAME sddm.conf)
+endif()
diff --git a/services/sddm-autologin.pam b/services/sddm-autologin.pam
deleted file mode 100755
index 99729bc..0000000
--- a/services/sddm-autologin.pam
+++ /dev/null
@@ -1,13 +0,0 @@
-#%PAM-1.0
-auth        required    pam_env.so
-auth        required    pam_tally2.so file=/var/log/tallylog onerr=succeed
-auth        required    pam_shells.so
-auth        required    pam_nologin.so
-auth        required    pam_permit.so
--auth       optional    pam_gnome_keyring.so
--auth       optional    pam_kwallet5.so
-account     include     system-local-login
-password    include     system-local-login
-session     include     system-local-login
--session    optional    pam_gnome_keyring.so auto_start
--session    optional    pam_kwallet5.so auto_start
diff --git a/services/sddm-greeter.pam.in b/services/sddm-greeter.pam.in
deleted file mode 100644
index d41792d..0000000
--- a/services/sddm-greeter.pam.in
+++ /dev/null
@@ -1,17 +0,0 @@
-#%PAM-1.0
-
-# Load environment from /etc/environment and ~/.pam_environment
-auth		required pam_env.so
-
-# Always let the greeter start without authentication
-auth		required pam_permit.so
-
-# No action required for account management
-account		required pam_permit.so
-
-# Can't change password
-password	required pam_deny.so
-
-# Setup session
-session		required pam_unix.so
-session		optional @LOGIND_PAM_MODULE@
diff --git a/services/sddm-sysuser.conf.in b/services/sddm-sysuser.conf.in
new file mode 100644
index 0000000..d35500a
--- /dev/null
+++ b/services/sddm-sysuser.conf.in
@@ -0,0 +1,2 @@
+#Type Name ID GECOS                  Home directory Shell
+u     sddm -  "SDDM Greeter Account" ${STATE_DIR}   -
diff --git a/services/sddm-tmpfiles.conf.in b/services/sddm-tmpfiles.conf.in
new file mode 100644
index 0000000..4261e6b
--- /dev/null
+++ b/services/sddm-tmpfiles.conf.in
@@ -0,0 +1,14 @@
+# Home dir of the sddm user, also contains state.conf
+d	${STATE_DIR}	0750	sddm	sddm
+# This contains X11 auth files passed to Xorg and the greeter
+d	${RUNTIME_DIR}	0711	root	root
+# Sockets for IPC
+r!	/tmp/sddm-auth*
+# xauth files passed to user sessions
+r!	/tmp/xauth_*
+# "r!" above means to remove the files if existent (r), but only at boot (!).
+# tmpfiles.d/tmp.conf declares a periodic cleanup of old /tmp/ files, which
+# would ordinarily result in the deletion of our xauth files. To prevent that
+# from happening, explicitly tag these as X (ignore).
+X	/tmp/sddm-auth*
+X	/tmp/xauth_*
diff --git a/services/sddm.pam b/services/sddm.pam
deleted file mode 100755
index 343650e..0000000
--- a/services/sddm.pam
+++ /dev/null
@@ -1,15 +0,0 @@
-#%PAM-1.0
-
-auth		include		system-login
--auth		optional	pam_gnome_keyring.so
--auth   optional  pam_kwallet5.so
-
-account		include		system-login
-
-password	include		system-login
--password	optional	pam_gnome_keyring.so use_authtok
-
-session		optional	pam_keyinit.so force revoke
-session		include		system-login
--session		optional	pam_gnome_keyring.so auto_start
--session  optional  pam_kwallet5.so auto_start
diff --git a/services/sddm.service.in b/services/sddm.service.in
index 0335685..0b46443 100644
--- a/services/sddm.service.in
+++ b/services/sddm.service.in
@@ -1,8 +1,9 @@
 [Unit]
 Description=Simple Desktop Display Manager
 Documentation=man:sddm(1) man:sddm.conf(5)
-Conflicts=getty@tty1.service
-After=systemd-user-sessions.service getty@tty1.service plymouth-quit.service systemd-logind.service
+Conflicts=getty@tty${SDDM_INITIAL_VT}.service
+After=systemd-user-sessions.service getty@tty${SDDM_INITIAL_VT}.service plymouth-quit.service systemd-logind.service
+PartOf=graphical.target
 StartLimitIntervalSec=30
 StartLimitBurst=2
 
diff --git a/src/auth/Auth.cpp b/src/auth/Auth.cpp
index caca314..6c9b5c6 100644
--- a/src/auth/Auth.cpp
+++ b/src/auth/Auth.cpp
@@ -62,9 +62,10 @@ namespace SDDM {
         AuthRequest *request { nullptr };
         QProcess *child { nullptr };
         QLocalSocket *socket { nullptr };
+        QString displayServerCmd;
         QString sessionPath { };
         QString user { };
-        QString cookie { };
+        QByteArray cookie { };
         bool autologin { false };
         bool greeter { false };
         QProcessEnvironment environment { };
@@ -101,7 +102,7 @@ namespace SDDM {
         static std::unique_ptr<Auth::SocketServer> self;
         if (!self) {
             self.reset(new SocketServer());
-            self->listen(QStringLiteral("sddm-auth%1").arg(QUuid::createUuid().toString().replace(QRegExp(QStringLiteral("[{}]")), QString())));
+            self->listen(QStringLiteral("sddm-auth-%1").arg(QUuid::createUuid().toString(QUuid::WithoutBraces)));
         }
         return self.get();
     }
@@ -132,7 +133,7 @@ namespace SDDM {
             env.insert(QStringLiteral("LANG"), QStringLiteral("C"));
         child->setProcessEnvironment(env);
         connect(child, QOverload<int,QProcess::ExitStatus>::of(&QProcess::finished), this, &Auth::Private::childExited);
-        connect(child, QOverload<QProcess::ProcessError>::of(&QProcess::error), this, &Auth::Private::childError);
+        connect(child, &QProcess::errorOccurred, this, &Auth::Private::childError);
         connect(request, &AuthRequest::finished, this, &Auth::Private::requestFinished);
         connect(request, &AuthRequest::promptsChanged, parent, &Auth::requestChanged);
     }
@@ -152,62 +153,75 @@ namespace SDDM {
         Auth *auth = qobject_cast<Auth*>(parent());
         Msg m = MSG_UNKNOWN;
         SafeDataStream str(socket);
-        str.receive();
-        str >> m;
-        switch (m) {
-            case ERROR: {
-                QString message;
-                Error type = ERROR_NONE;
-                str >> message >> type;
-                Q_EMIT auth->error(message, type);
-                break;
-            }
-            case INFO: {
-                QString message;
-                Info type = INFO_NONE;
-                str >> message >> type;
-                Q_EMIT auth->info(message, type);
-                break;
-            }
-            case REQUEST: {
-                Request r;
-                str >> r;
-                request->setRequest(&r);
-                break;
-            }
-            case AUTHENTICATED: {
-                QString user;
-                str >> user;
-                if (!user.isEmpty()) {
-                    auth->setUser(user);
-                    Q_EMIT auth->authentication(user, true);
+        while (socket->bytesAvailable() > 0) {
+            str.receive();
+            str >> m;
+            switch (m) {
+                case ERROR: {
+                    QString message;
+                    Error type = ERROR_NONE;
+                    str >> message >> type;
+                    Q_EMIT auth->error(message, type);
+                    break;
+                }
+                case INFO: {
+                    QString message;
+                    Info type = INFO_NONE;
+                    str >> message >> type;
+                    Q_EMIT auth->info(message, type);
+                    break;
+                }
+                case REQUEST: {
+                    Request r;
+                    str >> r;
+                    request->setRequest(&r);
+                    break;
+                }
+                case AUTHENTICATED: {
+                    QString user;
+                    str >> user;
+                    if (!user.isEmpty()) {
+                        auth->setUser(user);
+                        Q_EMIT auth->authentication(user, true);
+                        str.reset();
+                        str << AUTHENTICATED << environment << cookie;
+                        str.send();
+                    }
+                    else {
+                        Q_EMIT auth->authentication(user, false);
+                    }
+                    break;
+                }
+                case SESSION_STATUS: {
+                    bool status;
+                    str >> status;
+                    Q_EMIT auth->sessionStarted(status);
+                    str.reset();
+                    str << SESSION_STATUS;
+                    str.send();
+                    break;
+                }
+                case DISPLAY_SERVER_STARTED: {
+                    QString displayName;
+                    str >> displayName;
+                    Q_EMIT auth->displayServerReady(displayName);
                     str.reset();
-                    str << AUTHENTICATED << environment << cookie;
+                    str << DISPLAY_SERVER_STARTED;
                     str.send();
+                    break;
                 }
-                else {
-                    Q_EMIT auth->authentication(user, false);
+                default: {
+                    Q_EMIT auth->error(QStringLiteral("Auth: Unexpected value received: %1").arg(m), ERROR_INTERNAL);
                 }
-                break;
-            }
-            case SESSION_STATUS: {
-                bool status;
-                str >> status;
-                Q_EMIT auth->sessionStarted(status);
-                str.reset();
-                str << SESSION_STATUS;
-                str.send();
-                break;
-            }
-            default: {
-                Q_EMIT auth->error(QStringLiteral("Auth: Unexpected value received: %1").arg(m), ERROR_INTERNAL);
             }
         }
     }
 
     void Auth::Private::childExited(int exitCode, QProcess::ExitStatus exitStatus) {
         if (exitStatus != QProcess::NormalExit) {
-            qWarning("Auth: sddm-helper crashed (exit code %d)", exitCode);
+            qWarning("Auth: sddm-helper (%s) crashed (exit code %d)",
+                     qPrintable(child->arguments().join(QLatin1Char(' '))),
+                     HelperExitStatus(exitStatus));
             Q_EMIT qobject_cast<Auth*>(parent())->error(child->errorString(), ERROR_INTERNAL);
         }
 
@@ -248,12 +262,13 @@ namespace SDDM {
     }
 
     Auth::~Auth() {
+        stop();
         delete d;
     }
 
     void Auth::registerTypes() {
-        qmlRegisterType<AuthPrompt>();
-        qmlRegisterType<AuthRequest>();
+        qmlRegisterAnonymousType<AuthPrompt>("Auth", 1);
+        qmlRegisterAnonymousType<AuthRequest>("Auth", 1);
         qmlRegisterType<Auth>("Auth", 1, 0, "Auth");
     }
 
@@ -266,7 +281,7 @@ namespace SDDM {
         return d->greeter;
     }
 
-    const QString& Auth::cookie() const {
+    const QByteArray& Auth::cookie() const {
         return d->cookie;
     }
 
@@ -298,7 +313,7 @@ namespace SDDM {
         d->environment.insert(key, value);
     }
 
-    void Auth::setCookie(const QString& cookie) {
+    void Auth::setCookie(const QByteArray& cookie) {
         if (cookie != d->cookie) {
             d->cookie = cookie;
             Q_EMIT cookieChanged();
@@ -327,6 +342,14 @@ namespace SDDM {
         }
     }
 
+    void Auth::setDisplayServerCommand(const QString &command)
+    {
+        if (d->displayServerCmd != command) {
+            d->displayServerCmd = command;
+            Q_EMIT displayServerCommandChanged();
+        }
+    }
+
     void Auth::setSession(const QString& path) {
         if (path != d->sessionPath) {
             d->sessionPath = path;
@@ -347,17 +370,31 @@ namespace SDDM {
     void Auth::start() {
         QStringList args;
         args << QStringLiteral("--socket") << SocketServer::instance()->fullServerName();
-        args << QStringLiteral("--id") << QStringLiteral("%1").arg(d->id);
+        args << QStringLiteral("--id") << QString::number(d->id);
         if (!d->sessionPath.isEmpty())
             args << QStringLiteral("--start") << d->sessionPath;
         if (!d->user.isEmpty())
             args << QStringLiteral("--user") << d->user;
         if (d->autologin)
             args << QStringLiteral("--autologin");
+        if (!d->displayServerCmd.isEmpty())
+            args << QStringLiteral("--display-server") << d->displayServerCmd;
         if (d->greeter)
             args << QStringLiteral("--greeter");
         d->child->start(QStringLiteral("%1/sddm-helper").arg(QStringLiteral(LIBEXEC_INSTALL_DIR)), args);
     }
+
+    void Auth::stop() {
+        if (d->child->state() == QProcess::NotRunning) {
+            return;
+        }
+
+        d->child->terminate();
+
+        // wait for finished
+        if (!d->child->waitForFinished(5000))
+            d->child->kill();
+    }
 }
 
 #include "Auth.moc"
diff --git a/src/auth/Auth.h b/src/auth/Auth.h
index 87f5f44..c78da55 100644
--- a/src/auth/Auth.h
+++ b/src/auth/Auth.h
@@ -54,7 +54,7 @@ namespace SDDM {
         Q_PROPERTY(bool autologin READ autologin WRITE setAutologin NOTIFY autologinChanged)
         Q_PROPERTY(bool greeter READ isGreeter WRITE setGreeter NOTIFY greeterChanged)
         Q_PROPERTY(bool verbose READ verbose WRITE setVerbose NOTIFY verboseChanged)
-        Q_PROPERTY(QString cookie READ cookie WRITE setCookie NOTIFY cookieChanged)
+        Q_PROPERTY(QByteArray cookie READ cookie WRITE setCookie NOTIFY cookieChanged)
         Q_PROPERTY(QString user READ user WRITE setUser NOTIFY userChanged)
         Q_PROPERTY(QString session READ session WRITE setSession NOTIFY sessionChanged)
         Q_PROPERTY(AuthRequest* request READ request NOTIFY requestChanged)
@@ -69,6 +69,7 @@ namespace SDDM {
             INFO_PASS_CHANGE_REQUIRED,
             _INFO_LAST
         };
+        Q_ENUM(Info)
 
         enum Error {
             ERROR_NONE = 0,
@@ -77,20 +78,24 @@ namespace SDDM {
             ERROR_INTERNAL,
             _ERROR_LAST
         };
+        Q_ENUM(Error)
 
         enum HelperExitStatus {
             HELPER_SUCCESS = 0,
             HELPER_AUTH_ERROR,
             HELPER_SESSION_ERROR,
-            HELPER_OTHER_ERROR
+            HELPER_OTHER_ERROR,
+            HELPER_DISPLAYSERVER_ERROR,
+            HELPER_TTY_ERROR,
         };
+        Q_ENUM(HelperExitStatus)
 
         static void registerTypes();
 
         bool autologin() const;
         bool isGreeter() const;
         bool verbose() const;
-        const QString &cookie() const;
+        const QByteArray &cookie() const;
         const QString &user() const;
         const QString &session() const;
         AuthRequest *request();
@@ -139,6 +144,12 @@ namespace SDDM {
         */
         void setUser(const QString &user);
 
+        /**
+         * Set the display server command to be started before the greeter.
+         * @param command Command of the display server to be started
+         */
+        void setDisplayServerCommand(const QString &command);
+
         /**
         * Set the session to be started after authenticating.
         * @param path Path of the session executable to be started
@@ -149,7 +160,7 @@ namespace SDDM {
          * Set the display server cookie, to be inserted into the user's $XAUTHORITY
          * @param cookie cookie data
          */
-        void setCookie(const QString &cookie);
+        void setCookie(const QByteArray &cookie);
 
     public Q_SLOTS:
         /**
@@ -157,12 +168,18 @@ namespace SDDM {
         */
         void start();
 
+        /**
+         * Indicates that we do not need the process anymore.
+         */
+        void stop();
+
     Q_SIGNALS:
         void autologinChanged();
         void greeterChanged();
         void verboseChanged();
         void cookieChanged();
         void userChanged();
+        void displayServerCommandChanged();
         void sessionChanged();
         void requestChanged();
 
@@ -184,6 +201,13 @@ namespace SDDM {
         */
         void sessionStarted(bool success);
 
+        /**
+         * Emitted when the display server is ready.
+         *
+         * @param displayName display name
+         */
+        void displayServerReady(const QString &displayName);
+
         /**
         * Emitted when the helper quits, either after authentication or when the session ends.
         * Or, when something goes wrong.
diff --git a/src/auth/AuthMessages.h b/src/auth/AuthMessages.h
index 3bc97b6..6aea748 100644
--- a/src/auth/AuthMessages.h
+++ b/src/auth/AuthMessages.h
@@ -97,6 +97,7 @@ namespace SDDM {
         REQUEST,
         AUTHENTICATED,
         SESSION_STATUS,
+        DISPLAY_SERVER_STARTED,
         MSG_LAST,
     };
 
diff --git a/src/auth/AuthPrompt.h b/src/auth/AuthPrompt.h
index 8ed394d..dcaa539 100644
--- a/src/auth/AuthPrompt.h
+++ b/src/auth/AuthPrompt.h
@@ -40,7 +40,6 @@ namespace SDDM {
     */
     class AuthPrompt : public QObject {
         Q_OBJECT
-        Q_ENUMS(Type)
         Q_PROPERTY(Type type READ type CONSTANT)
         Q_PROPERTY(QString message READ message CONSTANT)
         Q_PROPERTY(bool hidden READ hidden CONSTANT)
@@ -59,6 +58,7 @@ namespace SDDM {
             LOGIN_USER = 0x0080,      ///< On logging in: The username
             LOGIN_PASSWORD            ///< On logging in: The password
         };
+        Q_ENUM(Type)
         /**
         * @return the type of the prompt
         */
@@ -99,4 +99,4 @@ namespace SDDM {
     };
 }
 
-#endif //PROMPT_H
\ No newline at end of file
+#endif //PROMPT_H
diff --git a/src/auth/AuthRequest.cpp b/src/auth/AuthRequest.cpp
index 9583b0a..9ccc2d2 100644
--- a/src/auth/AuthRequest.cpp
+++ b/src/auth/AuthRequest.cpp
@@ -73,7 +73,7 @@ namespace SDDM {
     }
 
     QQmlListProperty<AuthPrompt> AuthRequest::promptsDecl() {
-        return QQmlListProperty<AuthPrompt>(this, d->prompts);
+        return QQmlListProperty<AuthPrompt>(this, &d->prompts);
     }
 
     void AuthRequest::done() {
diff --git a/src/common/ConfigReader.cpp b/src/common/ConfigReader.cpp
index 041e5ed..da7d92a 100644
--- a/src/common/ConfigReader.cpp
+++ b/src/common/ConfigReader.cpp
@@ -27,19 +27,19 @@
 #include <QtCore/QMap>
 #include <QtCore/QBuffer>
 #include <QtCore/QFileInfo>
+#include <QtCore/QtGlobal>
+#include <QtCore/QStringView>
 
 QTextStream &operator>>(QTextStream &str, QStringList &list)  {
     list.clear();
 
     QString line = str.readLine();
-
-    const auto strings = line.splitRef(QLatin1Char(','));
-    for (const QStringRef &s : strings) {
-        QStringRef trimmed = s.trimmed();
+    const auto strings = QStringView{line}.split(u',');
+    for (const QStringView &s : strings) {
+        QStringView trimmed = s.trimmed();
         if (!trimmed.isEmpty())
             list.append(trimmed.toString());
     }
-
     return str;
 }
 
@@ -50,7 +50,7 @@ QTextStream &operator<<(QTextStream &str, const QStringList &list) {
 
 QTextStream &operator>>(QTextStream &str, bool &val) {
     QString line = str.readLine();
-    val = (0 == QStringRef(&line).trimmed().compare(QLatin1String("true"), Qt::CaseInsensitive));
+    val = (0 == QStringView(line).trimmed().compare(QLatin1String("true"), Qt::CaseInsensitive));
     return str;
 }
 
@@ -197,7 +197,7 @@ namespace SDDM {
             return;
         while (!in.atEnd()) {
             QString line = QString::fromUtf8(in.readLine());
-            QStringRef lineRef = QStringRef(&line).trimmed();
+            QStringView lineRef = QStringView(line).trimmed();
             // get rid of comments first
             lineRef = lineRef.left(lineRef.indexOf(QLatin1Char('#'))).trimmed();
 
@@ -211,7 +211,7 @@ namespace SDDM {
             int separatorPosition = lineRef.indexOf(QLatin1Char('='));
             if (separatorPosition >= 0) {
                 QString name = lineRef.left(separatorPosition).trimmed().toString();
-                QStringRef value = lineRef.mid(separatorPosition + 1).trimmed();
+                QStringView value = lineRef.mid(separatorPosition + 1).trimmed();
 
                 auto sectionIterator = m_sections.constFind(currentSection);
                 if (sectionIterator != m_sections.constEnd() && sectionIterator.value()->entry(name))
@@ -265,7 +265,7 @@ namespace SDDM {
         QByteArray junk;
         // stores the junk to the temporary storage
         auto collectJunk = [&junk](const QString &data) {
-            junk.append(data);
+            junk.append(data.toUtf8());
         };
 
         // a short function to assign the current junk and current line to the right section, eventually create a new one
@@ -275,7 +275,7 @@ namespace SDDM {
                 sectionData[currentSection] = QByteArray();
             }
             sectionData[currentSection].append(junk);
-            sectionData[currentSection].append(data);
+            sectionData[currentSection].append(data.toUtf8());
             junk.clear();
         };
 
@@ -285,16 +285,16 @@ namespace SDDM {
         while (!file.atEnd()) {
             const QString line = QString::fromUtf8(file.readLine());
             // get rid of comments first
-            QStringRef trimmedLine = line.leftRef(line.indexOf(QLatin1Char('#'))).trimmed();
-            QStringRef comment;
+            QStringView trimmedLine = QStringView{line}.left(line.indexOf(QLatin1Char('#'))).trimmed();
+            QStringView comment;
             if (line.indexOf(QLatin1Char('#')) >= 0)
-                comment = line.midRef(line.indexOf(QLatin1Char('#'))).trimmed();
+                comment = QStringView{line}.mid(line.indexOf(QLatin1Char('#'))).trimmed();
 
             // value assignment
             int separatorPosition = trimmedLine.indexOf(QLatin1Char('='));
             if (separatorPosition >= 0) {
                 QString name = trimmedLine.left(separatorPosition).trimmed().toString();
-                QStringRef value = trimmedLine.mid(separatorPosition + 1).trimmed();
+                QStringView value = trimmedLine.mid(separatorPosition + 1).trimmed();
 
                 if (currentSection && currentSection->entry(name)) {
                     // this monstrous condition checks the parameters if only one entry/section should be saved
diff --git a/src/common/ConfigReader.h b/src/common/ConfigReader.h
index c9c60c7..8a24b4e 100644
--- a/src/common/ConfigReader.h
+++ b/src/common/ConfigReader.h
@@ -51,8 +51,8 @@
         __VA_ARGS__ \
     }
 // entry wrapper
-#define Entry(name, type, default, description) \
-    SDDM::ConfigEntry<type> name { this, QStringLiteral(#name), (default), (description) }
+#define Entry(name, type, default, description, ...) \
+    SDDM::ConfigEntry<type> name { this, QStringLiteral(#name), default, description, __VA_ARGS__ }
 // section wrapper
 #define Section(name, ...) \
     class name : public SDDM::ConfigSection { \
diff --git a/src/common/Configuration.h b/src/common/Configuration.h
index cf44a62..4c3572d 100644
--- a/src/common/Configuration.h
+++ b/src/common/Configuration.h
@@ -37,6 +37,9 @@ namespace SDDM {
         enum NumState { NUM_NONE, NUM_SET_ON, NUM_SET_OFF };
 
         //  Name                   Type         Default value                                   Description
+        // TODO: Change default to x11-user in a future release
+        Entry(DisplayServer,       QString,     _S("x11"),                                      _S("Which display server should be used.\n"
+                                                                                                   "Valid values are: x11, x11-user, wayland. Wayland support is experimental"));
         Entry(HaltCommand,         QString,     _S(HALT_COMMAND),                               _S("Halt command"));
         Entry(RebootCommand,       QString,     _S(REBOOT_COMMAND),                             _S("Reboot command"));
         Entry(Numlock,             NumState,    NUM_NONE,                                       _S("Initial NumLock state. Can be on, off or none.\n"
@@ -44,6 +47,7 @@ namespace SDDM {
                                                                                                    "NOTE: Currently ignored if autologin is enabled."));
         Entry(InputMethod,         QString,     QStringLiteral("qtvirtualkeyboard"),                   _S("Input method module"));
         Entry(Namespaces,          QStringList, QStringList(),                                  _S("Comma-separated list of Linux namespaces for user session to enter"));
+        Entry(GreeterEnvironment,  QStringList, QStringList(),                                  _S("Comma-separated list of environment variables to be set"));
         //  Name   Entries (but it's a regular class again)
         Section(Theme,
             Entry(ThemeDir,            QString,     _S(DATA_INSTALL_DIR "/themes"),             _S("Theme directory path"));
@@ -51,6 +55,7 @@ namespace SDDM {
             Entry(FacesDir,            QString,     _S(DATA_INSTALL_DIR "/faces"),              _S("Global directory for user avatars\n"
                                                                                                    "The files should be named <username>.face.icon"));
             Entry(CursorTheme,         QString,     QString(),                                  _S("Cursor theme used in the greeter"));
+            Entry(CursorSize,          QString,     QString(),                                  _S("Cursor size used in the greeter"));
             Entry(Font,                QString,     QString(),                                  _S("Font used in the greeter"));
             Entry(EnableAvatars,       bool,        true,                                       _S("Enable display of custom user avatars"));
             Entry(DisableAvatarsThreshold,int,      7,                                          _S("Number of users to use as threshold\n"
@@ -63,22 +68,22 @@ namespace SDDM {
             Entry(ServerPath,          QString,     _S("/usr/bin/X"),                           _S("Path to X server binary"));
             Entry(ServerArguments,     QString,     _S("-nolisten tcp"),                        _S("Arguments passed to the X server invocation"));
             Entry(XephyrPath,          QString,     _S("/usr/bin/Xephyr"),                      _S("Path to Xephyr binary"));
-            Entry(XauthPath,           QString,     _S("/usr/bin/xauth"),                       _S("Path to xauth binary"));
-            Entry(SessionDir,          QString,     _S("/usr/share/xsessions"),                 _S("Directory containing available X sessions"));
+            Entry(SessionDir,          QStringList, {_S("/usr/local/share/xsessions"),
+                                                     _S("/usr/share/xsessions")},               _S("Comma-separated list of directories containing available X sessions"));
             Entry(SessionCommand,      QString,     _S(SESSION_COMMAND),                        _S("Path to a script to execute when starting the desktop session"));
-	    Entry(SessionLogFile,      QString,     _S(".local/share/sddm/xorg-session.log"),   _S("Path to the user session log file"));
-	    Entry(UserAuthFile,        QString,     _S(".Xauthority"),                          _S("Path to the Xauthority file"));
+            Entry(SessionLogFile,      QString,     _S(".local/share/sddm/xorg-session.log"),   _S("Path to the user session log file"));
             Entry(DisplayCommand,      QString,     _S(DATA_INSTALL_DIR "/scripts/Xsetup"),     _S("Path to a script to execute when starting the display server"));
             Entry(DisplayStopCommand,  QString,     _S(DATA_INSTALL_DIR "/scripts/Xstop"),      _S("Path to a script to execute when stopping the display server"));
-            Entry(MinimumVT,           int,         MINIMUM_VT,                                 _S("The lowest virtual terminal number that will be used."));
-            Entry(EnableHiDPI,         bool,        false,                                      _S("Enable Qt's automatic high-DPI scaling"));
+            Entry(EnableHiDPI,         bool,        true,                                      _S("Enable Qt's automatic high-DPI scaling"));
         );
 
         Section(Wayland,
-            Entry(SessionDir,          QString,     _S("/usr/share/wayland-sessions"),          _S("Directory containing available Wayland sessions"));
+            Entry(CompositorCommand,   QString,     _S("weston --shell=kiosk"),                 _S("Path of the Wayland compositor to execute when starting the greeter"));
+            Entry(SessionDir,          QStringList, {_S("/usr/local/share/wayland-sessions"),
+                                                     _S("/usr/share/wayland-sessions")},        _S("Comma-separated list of directories containing available Wayland sessions"));
             Entry(SessionCommand,      QString,     _S(WAYLAND_SESSION_COMMAND),                _S("Path to a script to execute when starting the desktop session"));
-	    Entry(SessionLogFile,      QString,     _S(".local/share/sddm/wayland-session.log"),_S("Path to the user session log file"));
-            Entry(EnableHiDPI,         bool,        false,                                      _S("Enable Qt's automatic high-DPI scaling"));
+            Entry(SessionLogFile,      QString,     _S(".local/share/sddm/wayland-session.log"),_S("Path to the user session log file"));
+            Entry(EnableHiDPI,         bool,        true,                                       _S("Enable Qt's automatic high-DPI scaling"));
         );
 
         Section(Users,
diff --git a/src/common/Constants.h.in b/src/common/Constants.h.in
index e174b5b..405da5e 100644
--- a/src/common/Constants.h.in
+++ b/src/common/Constants.h.in
@@ -28,6 +28,7 @@
 #define COMPONENTS_TRANSLATION_DIR  "@COMPONENTS_TRANSLATION_DIR@"
 #define RUNTIME_DIR                 "@RUNTIME_DIR@"
 #define STATE_DIR                   "@STATE_DIR@"
+#define ACCOUNTSSERVICE_DATA_DIR    "@ACCOUNTSSERVICE_DATA_DIR@"
 
 #define SESSION_COMMAND             "@SESSION_COMMAND@"
 #define WAYLAND_SESSION_COMMAND     "@WAYLAND_SESSION_COMMAND@"
@@ -37,7 +38,6 @@
 #define SYSTEM_CONFIG_DIR           "@SYSTEM_CONFIG_DIR@"
 
 #define LOG_FILE                    "@LOG_FILE@"
-#define MINIMUM_VT                  @MINIMUM_VT@
 
 #define UID_MIN                     @UID_MIN@
 #define UID_MAX                     @UID_MAX@
diff --git a/src/common/MessageHandler.h b/src/common/MessageHandler.h
index ba45d82..8526a02 100644
--- a/src/common/MessageHandler.h
+++ b/src/common/MessageHandler.h
@@ -24,13 +24,15 @@
 #include "Constants.h"
 
 #include <QDateTime>
+#include <QStandardPaths>
 #include <QFile>
+#include <QDir>
 
 #include <stdio.h>
-
-#ifdef HAVE_JOURNALD
-#include <systemd/sd-journal.h>
 #include <unistd.h>
+
+#ifdef HAVE_JOURNALD
+#include <systemd/sd-journal.h>
 #endif
 
 namespace SDDM {
@@ -41,6 +43,9 @@ namespace SDDM {
             case QtDebugMsg:
                 priority = LOG_DEBUG;
             break;
+            case QtInfoMsg:
+                priority = LOG_INFO;
+            break;
             case QtWarningMsg:
                 priority = LOG_WARNING;
             break;
@@ -50,8 +55,6 @@ namespace SDDM {
             case QtFatalMsg:
                 priority = LOG_ALERT;
             break;
-            default:
-            break;
         }
 
         char fileBuffer[PATH_MAX + sizeof("CODE_FILE=")];
@@ -69,17 +72,27 @@ namespace SDDM {
     static void standardLogger(QtMsgType type, const QString &msg) {
         static QFile file(QStringLiteral(LOG_FILE));
 
-        // try to open file only if it's not already open
-        if (!file.isOpen()) {
+        // Try to open the log file if we're not outputting to a terminal
+        if (!file.isOpen() && !isatty(STDERR_FILENO)) {
             if (!file.open(QFile::Append | QFile::WriteOnly))
                 file.open(QFile::Truncate | QFile::WriteOnly);
+
+            // If we can't open the file, create it in a writable location
+            // It will look spmething like ~/.local/share/$appname/sddm.log
+            // or for the sddm user /var/lib/sddm/.local/share/$appname/sddm.log
+            if (!file.isOpen()) {
+                QDir().mkpath(QStandardPaths::writableLocation(QStandardPaths::AppDataLocation));
+                file.setFileName(QStandardPaths::writableLocation(QStandardPaths::AppDataLocation) + QLatin1String("/sddm.log"));
+                if (!file.open(QFile::Append | QFile::WriteOnly))
+                    file.open(QFile::Truncate | QFile::WriteOnly);
+            }
         }
 
         // create timestamp
         QString timestamp = QDateTime::currentDateTime().toString(QStringLiteral("hh:mm:ss.zzz"));
 
         // set log priority
-	QString logPriority = QStringLiteral("(II)");
+        QString logPriority = QStringLiteral("(II)");
         switch (type) {
             case QtDebugMsg:
             break;
@@ -102,36 +115,27 @@ namespace SDDM {
             file.write(logMessage.toLocal8Bit());
             file.flush();
         } else {
-            printf("%s", qPrintable(logMessage));
-            fflush(stdout);
+            fputs(qPrintable(logMessage), stderr);
+            fflush(stderr);
         }
     }
 
     static void messageHandler(QtMsgType type, const QMessageLogContext &context, const QString &prefix, const QString &msg) {
-        // copy message to edit it
-        QString logMessage = msg;
-
 #ifdef HAVE_JOURNALD
         // don't log to journald if running interactively, this is likely
         // the case when running sddm in test mode
-        static bool isInteractive = isatty(STDIN_FILENO);
+        static bool isInteractive = isatty(STDERR_FILENO) && qgetenv("USER") != "sddm";
         if (!isInteractive) {
             // log to journald
-            journaldLogger(type, context, logMessage);
-        } else {
-            // prepend program name
-            logMessage = prefix + msg;
-
-            // log to file or stdout
-            standardLogger(type, logMessage);
+            journaldLogger(type, context, msg);
+            return;
         }
-#else
+#endif
         // prepend program name
-        logMessage = prefix + msg;
+        QString logMessage = prefix + msg;
 
-        // log to file or stdout
+        // log to file or stderr
         standardLogger(type, logMessage);
-#endif
     }
 
     void DaemonMessageHandler(QtMsgType type, const QMessageLogContext &context, const QString &msg) {
diff --git a/src/common/Messages.h b/src/common/Messages.h
index c779791..f79a9db 100644
--- a/src/common/Messages.h
+++ b/src/common/Messages.h
@@ -37,7 +37,8 @@ namespace SDDM {
         HostName,
         Capabilities,
         LoginSucceeded,
-        LoginFailed
+        LoginFailed,
+        InformationMessage,
     };
 
     enum Capability {
diff --git a/src/common/SafeDataStream.cpp b/src/common/SafeDataStream.cpp
index f62a074..3b99a66 100644
--- a/src/common/SafeDataStream.cpp
+++ b/src/common/SafeDataStream.cpp
@@ -21,6 +21,7 @@
 #include "SafeDataStream.h"
 
 #include <QtCore/QDebug>
+#include <QIODevice>
 
 namespace SDDM {
     SafeDataStream::SafeDataStream(QIODevice* device)
diff --git a/src/common/SafeDataStream.h b/src/common/SafeDataStream.h
index 8bbbe8e..721a042 100644
--- a/src/common/SafeDataStream.h
+++ b/src/common/SafeDataStream.h
@@ -22,6 +22,7 @@
 #define SAFEDATASTREAM_H
 
 #include <QtCore/QDataStream>
+#include <QByteArray>
 
 namespace SDDM {
     class SafeDataStream : public QDataStream {
diff --git a/src/common/Session.cpp b/src/common/Session.cpp
index 2d7b04f..5eec648 100644
--- a/src/common/Session.cpp
+++ b/src/common/Session.cpp
@@ -21,6 +21,12 @@
 #include <QFile>
 #include <QFileInfo>
 #include <QTextStream>
+#include <QSettings>
+#include <QLocale>
+#include <QRegularExpression>
+#include <QtGlobal>
+#include <QtCore/QtGlobal>
+#include <QtCore/QStringView>
 
 #include "Configuration.h"
 #include "Session.h"
@@ -28,6 +34,56 @@
 const QString s_entryExtention = QStringLiteral(".desktop");
 
 namespace SDDM {
+    // QSettings::IniFormat can't be used to read .desktop files due to different
+    // syntax of values (escape sequences, quoting, automatic QStringList detection).
+    // So implement yet another .desktop file parser.
+    class DesktopFileFormat {
+        static bool readFunc(QIODevice &device, QSettings::SettingsMap &map)
+        {
+            QString currentSectionName;
+            while(!device.atEnd())
+            {
+                // Iterate each line, remove line terminators
+                const auto line = device.readLine().replace("\r", "").replace("\n", "");
+                if(line.isEmpty() || line.startsWith('#'))
+                    continue; // Ignore empty lines and comments
+
+                if(line.startsWith('[')) // Section header
+                {
+                    // Remove [ and ].
+                    currentSectionName = QString::fromUtf8(line.mid(1, line.length() - 2));
+                }
+                else if(int equalsPos = line.indexOf('='); equalsPos > 0) // Key=Value
+                {
+                    const auto key = QString::fromUtf8(line.left(equalsPos));
+
+                    // Read the value, handle escape sequences
+                    auto valueBytes = line.mid(equalsPos + 1);
+                    valueBytes.replace("\\s", " ").replace("\\n", "\n");
+                    valueBytes.replace("\\t", "\t").replace("\\r", "\r");
+                    valueBytes.replace("\\\\", "\\");
+
+                    auto value = QString::fromUtf8(valueBytes);
+                    map.insert(currentSectionName + QLatin1Char('/') + key, value);
+                }
+            }
+
+            return true;
+        }
+    public:
+        // Register the .desktop file format if necessary, return its id.
+        static QSettings::Format format()
+        {
+            static QSettings::Format s_format = QSettings::InvalidFormat;
+            if (s_format == QSettings::InvalidFormat)
+                s_format = QSettings::registerFormat(QStringLiteral("desktop"),
+                                                     DesktopFileFormat::readFunc, nullptr,
+                                                     Qt::CaseSensitive);
+
+            return s_format;
+        }
+    };
+
     Session::Session()
         : m_valid(false)
         , m_type(UnknownSession)
@@ -52,6 +108,16 @@ namespace SDDM {
         return m_type;
     }
 
+    int Session::vt() const
+    {
+        return m_vt;
+    }
+
+    void Session::setVt(int vt)
+    {
+        m_vt = vt;
+    }
+
     QString Session::xdgSessionType() const
     {
         return m_xdgSessionType;
@@ -89,7 +155,7 @@ namespace SDDM {
 
     QString Session::desktopSession() const
     {
-        return fileName().replace(s_entryExtention, QString());
+        return QFileInfo(m_fileName).completeBaseName();
     }
 
     QString Session::desktopNames() const
@@ -107,6 +173,10 @@ namespace SDDM {
         return m_isNoDisplay;
     }
 
+    QProcessEnvironment Session::additionalEnv() const {
+        return m_additionalEnv;
+    }
+
     void Session::setTo(Type type, const QString &_fileName)
     {
         QString fileName(_fileName);
@@ -119,13 +189,15 @@ namespace SDDM {
         m_valid = false;
         m_desktopNames.clear();
 
+        QStringList sessionDirs;
+
         switch (type) {
         case WaylandSession:
-            m_dir = QDir(mainConfig.Wayland.SessionDir.get());
+            sessionDirs = mainConfig.Wayland.SessionDir.get();
             m_xdgSessionType = QStringLiteral("wayland");
             break;
         case X11Session:
-            m_dir = QDir(mainConfig.X11.SessionDir.get());
+            sessionDirs = mainConfig.X11.SessionDir.get();
             m_xdgSessionType = QStringLiteral("x11");
             break;
         default:
@@ -133,54 +205,56 @@ namespace SDDM {
             break;
         }
 
-        m_fileName = m_dir.absoluteFilePath(fileName);
+        QFile file;
+        for (const auto &path: qAsConst(sessionDirs)) {
+            m_dir.setPath(path);
+            m_fileName = m_dir.absoluteFilePath(fileName);
 
-        qDebug() << "Reading from" << m_fileName;
+            qDebug() << "Reading from" << m_fileName;
 
-        QFile file(m_fileName);
-        if (!file.open(QIODevice::ReadOnly))
+            file.setFileName(m_fileName);
+            if (file.open(QIODevice::ReadOnly))
+                break;
+        }
+        if (!file.isOpen())
             return;
 
-        QString current_section;
-
-        QTextStream in(&file);
-        while (!in.atEnd()) {
-            QString line = in.readLine();
-
-            if (line.startsWith(QLatin1String("["))) {
-                // The section name ends before the last ] before the start of a comment
-                int end = line.lastIndexOf(QLatin1Char(']'), line.indexOf(QLatin1Char('#')));
-                if (end != -1)
-                    current_section = line.mid(1, end - 1);
-            }
-
-            if (current_section != QLatin1String("Desktop Entry"))
-                continue; // We are only interested in the "Desktop Entry" section
-
-            if (line.startsWith(QLatin1String("Name="))) {
-                if (type == WaylandSession)
-                    if (line.mid(5).endsWith(QLatin1String(" (Wayland)")))
-                        m_displayName = QObject::tr("%1").arg(line.mid(5));
-                    else
-                        m_displayName = QObject::tr("%1 (Wayland)").arg(line.mid(5));
-                else
-                    m_displayName = line.mid(5);
-            }
-            if (line.startsWith(QLatin1String("Comment=")))
-                m_comment = line.mid(8);
-            if (line.startsWith(QLatin1String("Exec=")))
-                m_exec = line.mid(5);
-            if (line.startsWith(QStringLiteral("TryExec=")))
-                m_tryExec = line.mid(8);
-            if (line.startsWith(QLatin1String("DesktopNames=")))
-                m_desktopNames = line.mid(13).replace(QLatin1Char(';'), QLatin1Char(':'));
-            if (line.startsWith(QLatin1String("Hidden=")))
-                m_isHidden = line.mid(7).toLower() == QLatin1String("true");
-            if (line.startsWith(QLatin1String("NoDisplay=")))
-                m_isNoDisplay = line.mid(10).toLower() == QLatin1String("true");
+        QSettings settings(m_fileName, DesktopFileFormat::format());
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
+        settings.setIniCodec("UTF-8");
+#endif
+        QStringList locales = { QLocale().name() };
+        if (auto clean = QLocale().name().remove(QRegularExpression(QLatin1String("_.*"))); clean != locales.constFirst()) {
+            locales << clean;
         }
 
-        file.close();
+        if (settings.status() != QSettings::NoError)
+                return;
+
+        settings.beginGroup(QLatin1String("Desktop Entry"));
+
+        auto localizedValue = [&] (const QLatin1String &key) {
+            for (QString locale : qAsConst(locales)) {
+                QString localizedValue = settings.value(key + QLatin1Char('[') + locale + QLatin1Char(']'), QString()).toString();
+                if (!localizedValue.isEmpty()) {
+                    return localizedValue;
+                }
+            }
+            return settings.value(key).toString();
+        };
+
+        m_displayName = localizedValue(QLatin1String("Name"));
+        m_comment = localizedValue(QLatin1String("Comment"));
+        m_exec = settings.value(QLatin1String("Exec"), QString()).toString();
+        m_tryExec = settings.value(QLatin1String("TryExec"), QString()).toString();
+        m_desktopNames = settings.value(QLatin1String("DesktopNames"), QString()).toString().replace(QLatin1Char(';'), QLatin1Char(':'));
+        QString hidden = settings.value(QLatin1String("Hidden"), QString()).toString();
+        m_isHidden = hidden.toLower() == QLatin1String("true");
+        QString noDisplay = settings.value(QLatin1String("NoDisplay"), QString()).toString();
+        m_isNoDisplay = noDisplay.toLower() == QLatin1String("true");
+        QString additionalEnv = settings.value(QLatin1String("X-SDDM-Env"), QString()).toString();
+        m_additionalEnv = parseEnv(additionalEnv);
+        settings.endGroup();
 
         m_type = type;
         m_valid = true;
@@ -191,4 +265,21 @@ namespace SDDM {
         setTo(other.type(), other.fileName());
         return *this;
     }
+
+    QProcessEnvironment SDDM::Session::parseEnv(const QString &list)
+    {
+        QProcessEnvironment env;
+        const auto entryList = QStringView{list}.split(u',', Qt::SkipEmptyParts);
+        for (const auto &entry: entryList) {
+            int midPoint = entry.indexOf(QLatin1Char('='));
+            if (midPoint < 0) {
+                qWarning() << "Malformed entry in" << fileName() << ":" << entry;
+                continue;
+            }
+            env.insert(entry.left(midPoint).toString(), entry.mid(midPoint+1).toString());
+        }
+        return env;
+    }
+
+
 }
diff --git a/src/common/Session.h b/src/common/Session.h
index 9fd86cd..3abc993 100644
--- a/src/common/Session.h
+++ b/src/common/Session.h
@@ -23,6 +23,7 @@
 #include <QDataStream>
 #include <QDir>
 #include <QSharedPointer>
+#include <QProcessEnvironment>
 
 namespace SDDM {
     class SessionModel;
@@ -42,6 +43,9 @@ namespace SDDM {
 
         Type type() const;
 
+        int vt() const;
+        void setVt(int vt);
+
         QString xdgSessionType() const;
 
         QDir directory() const;
@@ -59,13 +63,17 @@ namespace SDDM {
         bool isHidden() const;
         bool isNoDisplay() const;
 
+        QProcessEnvironment additionalEnv() const;
+
         void setTo(Type type, const QString &name);
 
         Session &operator=(const Session &other);
 
     private:
+        QProcessEnvironment parseEnv(const QString &list);
         bool m_valid;
         Type m_type;
+        int m_vt = 0;
         QDir m_dir;
         QString m_name;
         QString m_fileName;
@@ -75,6 +83,7 @@ namespace SDDM {
         QString m_tryExec;
         QString m_xdgSessionType;
         QString m_desktopNames;
+        QProcessEnvironment m_additionalEnv;
         bool m_isHidden;
         bool m_isNoDisplay;
 
diff --git a/src/daemon/SignalHandler.cpp b/src/common/SignalHandler.cpp
similarity index 61%
rename from src/daemon/SignalHandler.cpp
rename to src/common/SignalHandler.cpp
index 810105e..b829899 100644
--- a/src/daemon/SignalHandler.cpp
+++ b/src/common/SignalHandler.cpp
@@ -19,56 +19,42 @@
 
 #include "SignalHandler.h"
 
+#include <QCoreApplication>
 #include <QDebug>
 #include <QSocketNotifier>
 
 #include <signal.h>
 #include <unistd.h>
+#include <mutex>
 
 #include <sys/socket.h>
 
 namespace SDDM {
-    int sighupFd[2];
+    std::once_flag signalsInitialized;
+
     int sigintFd[2];
     int sigtermFd[2];
-    int sigusr1Fd[2];
+    int sigcustomFd[2];
 
     SignalHandler::SignalHandler(QObject *parent) : QObject(parent) {
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sighupFd))
-            qCritical() << "Failed to create socket pair for SIGHUP handling.";
+        std::call_once(signalsInitialized, &initialize);
 
-        snhup = new QSocketNotifier(sighupFd[1], QSocketNotifier::Read, this);
-        connect(snhup, &QSocketNotifier::activated, this, &SignalHandler::handleSighup);
-
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigintFd))
-            qCritical() << "Failed to create socket pair for SIGINT handling.";
+        // If it's done before creating the QCoreApplication, it just will not work
+        Q_ASSERT(QCoreApplication::instance());
 
         snint = new QSocketNotifier(sigintFd[1], QSocketNotifier::Read, this);
         connect(snint, &QSocketNotifier::activated, this, &SignalHandler::handleSigint);
 
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigtermFd))
-            qCritical() << "Failed to create socket pair for SIGTERM handling.";
-
         snterm = new QSocketNotifier(sigtermFd[1], QSocketNotifier::Read, this);
         connect(snterm, &QSocketNotifier::activated, this, &SignalHandler::handleSigterm);
 
-        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigusr1Fd))
-            qCritical() << "Failed to create socket pair for SIGUSR1 handling.";
-
-        snusr1 = new QSocketNotifier(sigusr1Fd[1], QSocketNotifier::Read, this);
-        connect(snusr1, &QSocketNotifier::activated, this, &SignalHandler::handleSigusr1);
+        sncustom = new QSocketNotifier(sigcustomFd[1], QSocketNotifier::Read, this);
+        connect(sncustom, &QSocketNotifier::activated, this, &SignalHandler::handleSigCustom);
     }
 
     void SignalHandler::initialize() {
-        struct sigaction sighup = { };
-        sighup.sa_handler = SignalHandler::hupSignalHandler;
-        sigemptyset(&sighup.sa_mask);
-        sighup.sa_flags = SA_RESTART;
-
-        if (sigaction(SIGHUP, &sighup, 0) > 0) {
-            qCritical() << "Failed to setup SIGHUP handler.";
-            return;
-        }
+        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigintFd))
+            qCritical() << "Failed to create socket pair for SIGINT handling.";
 
         struct sigaction sigint = { };
         sigint.sa_handler = SignalHandler::intSignalHandler;
@@ -80,6 +66,9 @@ namespace SDDM {
             return;
         }
 
+        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigtermFd))
+            qCritical() << "Failed to create socket pair for SIGTERM handling.";
+
         struct sigaction sigterm = { };
         sigterm.sa_handler = SignalHandler::termSignalHandler;
         sigemptyset(&sigterm.sa_mask);
@@ -89,36 +78,20 @@ namespace SDDM {
             qCritical() << "Failed to set up SIGTERM handler.";
             return;
         }
-    }
-
-    void SignalHandler::initializeSigusr1() {
-        struct sigaction sigusr1 = { };
-        sigusr1.sa_handler = SignalHandler::usr1SignalHandler;
-        sigemptyset(&sigusr1.sa_mask);
-        sigusr1.sa_flags = SA_RESTART;
 
-        if (sigaction(SIGUSR1, &sigusr1, 0) > 0) {
-            qCritical() << "Failed to set up SIGUSR1 handler.";
-            return;
-        }
+        if (::socketpair(AF_UNIX, SOCK_STREAM | SOCK_CLOEXEC, 0, sigcustomFd))
+            qCritical() << "Failed to create socket pair for custom signals handling.";
     }
 
-    void SignalHandler::ignoreSigusr1() {
-        struct sigaction sigusr1 = { };
-        sigusr1.sa_handler = SIG_IGN;
-        sigemptyset(&sigusr1.sa_mask);
-        sigusr1.sa_flags = SA_RESTART;
-
-        if (sigaction(SIGUSR1, &sigusr1, 0) > 0) {
-            qCritical() << "Failed to set up SIGUSR1 handler.";
-            return;
-        }
-    }
+    void SignalHandler::addCustomSignal(int signal)
+    {
+        struct sigaction sigcustom = { };
+        sigcustom.sa_handler = SignalHandler::customSignalHandler;
+        sigemptyset(&sigcustom.sa_mask);
+        sigcustom.sa_flags = SA_RESTART;
 
-    void SignalHandler::hupSignalHandler(int) {
-        char a = 1;
-        if (::write(sighupFd[0], &a, sizeof(a)) == -1) {
-            qCritical() << "Error writing to the SIGHUP handler";
+        if (sigaction(signal, &sigcustom, 0) > 0) {
+            qCritical() << "Failed to set up " << strsignal(signal) << " handler.";
             return;
         }
     }
@@ -139,36 +112,13 @@ namespace SDDM {
         }
     }
 
-    void SignalHandler::usr1SignalHandler(int) {
-        char a = 1;
-        if (::write(sigusr1Fd[0], &a, sizeof(a)) == -1) {
-            qCritical() << "Error writing to the SIGUSR1 handler";
+    void SignalHandler::customSignalHandler(int signal) {
+        if (::write(sigcustomFd[0], &signal, sizeof(signal)) == -1) {
+            qCritical() << "Error writing to the " << strsignal(signal) << " handler";
             return;
         }
     }
 
-    void SignalHandler::handleSighup() {
-        // disable notifier
-        snhup->setEnabled(false);
-
-        // read from socket
-        char a;
-        if (::read(sighupFd[1], &a, sizeof(a)) == -1) {
-            // something went wrong!
-            qCritical() << "Error reading from the socket";
-            return;
-        }
-
-        // log event
-        qWarning() << "Signal received: SIGHUP";
-
-        // emit signal
-        emit sighupReceived();
-
-        // enable notifier
-        snhup->setEnabled(true);
-    }
-
     void SignalHandler::handleSigint() {
         // disable notifier
         snint->setEnabled(false);
@@ -213,25 +163,27 @@ namespace SDDM {
         snterm->setEnabled(true);
     }
 
-    void SignalHandler::handleSigusr1() {
+    void SignalHandler::handleSigCustom() {
         // disable notifier
-        snusr1->setEnabled(false);
+        sncustom->setEnabled(false);
 
         // read from socket
-        char a;
-        if (::read(sigusr1Fd[1], &a, sizeof(a)) == -1) {
+        int signal;
+        if (::read(sigcustomFd[1], &signal, sizeof(signal)) == -1) {
             // something went wrong!
             qCritical() << "Error reading from the socket";
             return;
         }
 
         // log event
-        qWarning() << "Signal received: SIGUSR1";
+        qWarning() << "Signal received: " << strsignal(signal);
 
         // emit signal
-        emit sigusr1Received();
+        emit customSignalReceived(signal);
 
         // enable notifier
-        snusr1->setEnabled(true);
+        sncustom->setEnabled(true);
     }
+
+
 }
diff --git a/src/daemon/SignalHandler.h b/src/common/SignalHandler.h
similarity index 82%
rename from src/daemon/SignalHandler.h
rename to src/common/SignalHandler.h
index 567ce07..3568ef6 100644
--- a/src/daemon/SignalHandler.h
+++ b/src/common/SignalHandler.h
@@ -31,31 +31,28 @@ namespace SDDM {
     public:
         SignalHandler(QObject *parent = 0);
 
-        static void initialize();
-        static void initializeSigusr1();
-        static void ignoreSigusr1();
-        static void hupSignalHandler(int unused);
-        static void intSignalHandler(int unused);
-        static void termSignalHandler(int unused);
-        static void usr1SignalHandler(int unused);
+        void addCustomSignal(int signal);
 
     signals:
         void sighupReceived();
         void sigintReceived();
         void sigtermReceived();
-        void sigusr1Received();
+        void customSignalReceived(int signal);
 
     private slots:
-        void handleSighup();
         void handleSigint();
         void handleSigterm();
-        void handleSigusr1();
+        void handleSigCustom();
 
     private:
-        QSocketNotifier *snhup { nullptr };
+        static void initialize();
+        static void intSignalHandler(int unused);
+        static void termSignalHandler(int unused);
+        static void customSignalHandler(int unused);
+
         QSocketNotifier *snint { nullptr };
         QSocketNotifier *snterm { nullptr };
-        QSocketNotifier *snusr1 { nullptr };
+        QSocketNotifier *sncustom { nullptr };
     };
 }
 #endif // SDDM_SIGNALHANDLER_H
diff --git a/src/common/ThemeConfig.cpp b/src/common/ThemeConfig.cpp
index 961a4f4..3274bbe 100644
--- a/src/common/ThemeConfig.cpp
+++ b/src/common/ThemeConfig.cpp
@@ -1,4 +1,5 @@
 /***************************************************************************
+* Copyright (c) 2023 Fabian Vogt <fabian@ritter-vogt.de>
 * Copyright (c) 2016 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
 * Copyright (c) 2014 David Edmundson <davidedmundson@kde.org>
 * Copyright (c) 2013 Abdurrahman AVCI <abdurrahmanavci@gmail.com>
@@ -26,12 +27,20 @@
 #include <QStringList>
 
 namespace SDDM {
-    ThemeConfig::ThemeConfig(const QString &path) {
+    ThemeConfig::ThemeConfig(const QString &path, QObject *parent)
+        : QQmlPropertyMap(this, parent) {
         setTo(path);
     }
 
     void ThemeConfig::setTo(const QString &path) {
-        clear();
+        for(const QString &key : keys()) {
+            clear(key);
+        }
+
+        if (path.isNull()) {
+            qDebug() << "Loaded empty theme configuration";
+            return;
+        }
 
         qDebug() << "Loading theme configuration from" << path;
 
@@ -41,8 +50,10 @@ namespace SDDM {
         // Support non-latin strings in background picture path
         // Warning: The codec must be set immediately after creating the QSettings object,
         // before accessing any data.
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
         settings.setIniCodec("UTF-8");
         userSettings.setIniCodec("UTF-8");
+#endif
 
         // read default keys
         for (const QString &key: settings.allKeys()) {
@@ -61,4 +72,38 @@ namespace SDDM {
             insert(QStringLiteral("defaultBackground"), settings.value(QStringLiteral("background")));
         }
     }
+
+    QVariant ThemeConfig::value(const QString &key, const QVariant &def) {
+        if (!contains(key)) {
+            return def;
+        }
+
+        return value(key);
+    }
+
+    bool ThemeConfig::boolValue(const QString &key) {
+        return value(key).toBool();
+    }
+
+    int ThemeConfig::intValue(const QString &key) {
+        bool ok;
+        auto ret = value(key).toInt(&ok);
+        if (!ok) {
+            qWarning() << "Could not convert" << key << "(value" << value(key) << ") to int";
+        }
+        return ret;
+    }
+
+    qreal ThemeConfig::realValue(const QString &key) {
+        bool ok;
+        auto ret = value(key).toReal(&ok);
+        if (!ok) {
+            qWarning() << "Could not convert" << key << "(value" << value(key) << ") to real";
+        }
+        return ret;
+    }
+
+    QString ThemeConfig::stringValue(const QString &key) {
+        return value(key).toString();
+    }
 }
diff --git a/src/common/ThemeConfig.h b/src/common/ThemeConfig.h
index 971b644..172fd9b 100644
--- a/src/common/ThemeConfig.h
+++ b/src/common/ThemeConfig.h
@@ -21,14 +21,26 @@
 #ifndef SDDM_THEMECONFIG_H
 #define SDDM_THEMECONFIG_H
 
-#include <QVariantMap>
+#include <QQmlPropertyMap>
 
 namespace SDDM {
-    class ThemeConfig : public QVariantMap {
+    class ThemeConfig : public QQmlPropertyMap {
+        Q_OBJECT
     public:
-        explicit ThemeConfig(const QString &path);
+        explicit ThemeConfig(const QString &path, QObject *parent = nullptr);
 
         void setTo(const QString &path);
+
+        // Also provide QVariantMap's value(key, default) method
+        using QQmlPropertyMap::value;
+        QVariant value(const QString &key, const QVariant &def);
+
+        // QSettings::IniFormat returns string types for basic
+        // types. Let the theme request specific conversions.
+        Q_INVOKABLE bool boolValue(const QString &key);
+        Q_INVOKABLE int intValue(const QString &key);
+        Q_INVOKABLE qreal realValue(const QString &key);
+        Q_INVOKABLE QString stringValue(const QString &key);
     };
 }
 
diff --git a/src/common/ThemeMetadata.cpp b/src/common/ThemeMetadata.cpp
index 3bae0ff..2cb3762 100644
--- a/src/common/ThemeMetadata.cpp
+++ b/src/common/ThemeMetadata.cpp
@@ -28,6 +28,7 @@ namespace SDDM {
         QString mainScript { QStringLiteral("Main.qml") };
         QString configFile;
         QString translationsDirectory { QStringLiteral(".") };
+        int qtVersion = 5;
     };
 
     ThemeMetadata::ThemeMetadata(const QString &path, QObject *parent) : QObject(parent), d(new ThemeMetadataPrivate()) {
@@ -50,11 +51,16 @@ namespace SDDM {
         return d->translationsDirectory;
     }
 
+    int ThemeMetadata::qtVersion() const {
+        return d->qtVersion;
+    }
+
     void ThemeMetadata::setTo(const QString &path) {
         QSettings settings(path, QSettings::IniFormat);
         // read values
         d->mainScript = settings.value(QStringLiteral("SddmGreeterTheme/MainScript"), QStringLiteral("Main.qml")).toString();
         d->configFile = settings.value(QStringLiteral("SddmGreeterTheme/ConfigFile"), QStringLiteral("theme.conf")).toString();
         d->translationsDirectory = settings.value(QStringLiteral("SddmGreeterTheme/TranslationsDirectory"), QStringLiteral(".")).toString();
+        d->qtVersion = settings.value(QStringLiteral("SddmGreeterTheme/QtVersion"), 5).toInt();
     }
 }
diff --git a/src/common/ThemeMetadata.h b/src/common/ThemeMetadata.h
index 0612337..fdb89a9 100644
--- a/src/common/ThemeMetadata.h
+++ b/src/common/ThemeMetadata.h
@@ -36,6 +36,7 @@ namespace SDDM {
         const QString &mainScript() const;
         const QString &configFile() const;
         const QString &translationsDirectory() const;
+        int qtVersion() const;
 
         void setTo(const QString &path);
 
diff --git a/src/common/VirtualTerminal.cpp b/src/common/VirtualTerminal.cpp
index 3ce6aff..9c0261e 100644
--- a/src/common/VirtualTerminal.cpp
+++ b/src/common/VirtualTerminal.cpp
@@ -27,29 +27,68 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <signal.h>
+#ifdef __FreeBSD__
+#include <sys/consio.h>
+#else
 #include <linux/vt.h>
 #include <linux/kd.h>
+#endif
 #include <sys/ioctl.h>
+#include <qscopeguard.h>
+#include <QFileInfo>
 
 #define RELEASE_DISPLAY_SIGNAL (SIGRTMAX)
 #define ACQUIRE_DISPLAY_SIGNAL (SIGRTMAX - 1)
 
 namespace SDDM {
     namespace VirtualTerminal {
-        static void onAcquireDisplay(int signal) {
-            int fd = open("/dev/tty0", O_RDWR | O_NOCTTY);
+#ifdef __FreeBSD__
+        const char *defaultVtPath = "/dev/ttyv0";
+
+        QString path(int vt) {
+            char c = (vt <= 10 ? '0' : 'a') + (vt - 1);
+            return QStringLiteral("/dev/ttyv%1").arg(c);
+        }
+
+        int getVtActive(int fd) {
+            int vtActive = 0;
+            if (ioctl(fd, VT_GETACTIVE, &vtActive) < 0) {
+                qCritical() << "Failed to get current VT:" << strerror(errno);
+                return -1;
+            }
+            return vtActive;
+        }
+#else
+        const char *defaultVtPath = "/dev/tty0";
+
+        QString path(int vt) {
+            return QStringLiteral("/dev/tty%1").arg(vt);
+        }
+
+        int getVtActive(int fd) {
+            vt_stat vtState { };
+            if (ioctl(fd, VT_GETSTATE, &vtState) < 0) {
+                qCritical() << "Failed to get current VT:" << strerror(errno);
+                return -1;
+            }
+            return vtState.v_active;
+        }
+#endif
+
+        static void onAcquireDisplay([[maybe_unused]] int signal) {
+            int fd = open(defaultVtPath, O_RDWR | O_NOCTTY);
             ioctl(fd, VT_RELDISP, VT_ACKACQ);
             close(fd);
         }
 
-        static void onReleaseDisplay(int signal) {
-            int fd = open("/dev/tty0", O_RDWR | O_NOCTTY);
+        static void onReleaseDisplay([[maybe_unused]] int signal) {
+            int fd = open(defaultVtPath, O_RDWR | O_NOCTTY);
             ioctl(fd, VT_RELDISP, 1);
             close(fd);
         }
 
         static bool handleVtSwitches(int fd) {
-            vt_mode setModeRequest = { 0 };
+            vt_mode setModeRequest { };
             bool ok = true;
 
             setModeRequest.mode = VT_PROCESS;
@@ -68,7 +107,7 @@ namespace SDDM {
         }
 
         static void fixVtMode(int fd, bool vt_auto) {
-            vt_mode getmodeReply = { 0 };
+            vt_mode getmodeReply { };
             int kernelDisplayMode = 0;
             bool modeFixed = false;
             bool ok = true;
@@ -115,34 +154,43 @@ out:
                 qDebug() << "VT mode didn't need to be fixed";
         }
 
+        int currentVt()
+        {
+            int fd = open(defaultVtPath, O_RDWR | O_NOCTTY);
+            if (fd < 0) {
+                qCritical() << "Failed to open VT master:" << strerror(errno);
+                return -1;
+            }
+            auto closeFd = qScopeGuard([fd] {
+                close(fd);
+            });
+
+            return getVtActive(fd);
+        }
+
+
         int setUpNewVt() {
             // open VT master
-            int fd = open("/dev/tty0", O_RDWR | O_NOCTTY);
+            int fd = open(defaultVtPath, O_RDWR | O_NOCTTY);
             if (fd < 0) {
                 qCritical() << "Failed to open VT master:" << strerror(errno);
                 return -1;
             }
-
-            vt_stat vtState = { 0 };
-            if (ioctl(fd, VT_GETSTATE, &vtState) < 0) {
-                qCritical() << "Failed to get current VT:" << strerror(errno);
+            auto closeFd = qScopeGuard([fd] {
                 close(fd);
-                return -1;
-            }
+            });
 
             int vt = 0;
             if (ioctl(fd, VT_OPENQRY, &vt) < 0) {
                 qCritical() << "Failed to open new VT:" << strerror(errno);
-                close(fd);
                 return -1;
             }
 
-            close(fd);
-
             // fallback to active VT
             if (vt <= 0) {
-                qWarning() << "New VT" << vt << "is not valid, fall back to" << vtState.v_active;
-                return vtState.v_active;
+                int vtActive = getVtActive(fd);
+                qWarning() << "New VT" << vt << "is not valid, fall back to" << vtActive;
+                return vtActive;
             }
 
             return vt;
@@ -153,13 +201,19 @@ out:
 
             int fd;
 
-            int activeVtFd = open("/dev/tty0", O_RDWR | O_NOCTTY);
+            int activeVtFd = open(defaultVtPath, O_RDWR | O_NOCTTY);
 
-            QString ttyString = QStringLiteral("/dev/tty%1").arg(vt);
+            QString ttyString = path(vt);
             int vtFd = open(qPrintable(ttyString), O_RDWR | O_NOCTTY);
             if (vtFd != -1) {
                 fd = vtFd;
 
+                // Clear VT
+                static const char *clearEscapeSequence = "\33[H\33[2J";
+                if (write(vtFd, clearEscapeSequence, sizeof(clearEscapeSequence)) == -1) {
+                    qWarning("Failed to clear VT %d: %s", vt, strerror(errno));
+                }
+
                 // set graphics mode to prevent flickering
                 if (ioctl(fd, KDSETMODE, KD_GRAPHICS) < 0)
                     qWarning("Failed to set graphics mode for VT %d: %s", vt, strerror(errno));
@@ -171,7 +225,7 @@ out:
                 fixVtMode(activeVtFd, vt_auto);
             } else {
                 qWarning("Failed to open %s: %s", qPrintable(ttyString), strerror(errno));
-                qDebug("Using /dev/tty0 instead of %s!", qPrintable(ttyString));
+                qDebug("Using %s instead of %s!", defaultVtPath, qPrintable(ttyString));
                 fd = activeVtFd;
             }
 
@@ -181,11 +235,21 @@ out:
             if (!vt_auto)
                 handleVtSwitches(fd);
 
-            if (ioctl(fd, VT_ACTIVATE, vt) < 0)
-                qWarning("Couldn't initiate jump to VT %d: %s", vt, strerror(errno));
-            else if (ioctl(fd, VT_WAITACTIVE, vt) < 0)
-                qWarning("Couldn't finalize jump to VT %d: %s", vt, strerror(errno));
+            do {
+                errno = 0;
 
+                if (ioctl(fd, VT_ACTIVATE, vt) < 0) {
+                    if (errno == EINTR)
+                        continue;
+
+                    qWarning("Couldn't initiate jump to VT %d: %s", vt, strerror(errno));
+                    break;
+                }
+
+                if (ioctl(fd, VT_WAITACTIVE, vt) < 0 && errno != EINTR)
+                    qWarning("Couldn't finalize jump to VT %d: %s", vt, strerror(errno));
+
+            } while (errno == EINTR);
             close(activeVtFd);
             if (vtFd != -1)
                 close(vtFd);
diff --git a/src/common/VirtualTerminal.h b/src/common/VirtualTerminal.h
index 1b17086..378375c 100644
--- a/src/common/VirtualTerminal.h
+++ b/src/common/VirtualTerminal.h
@@ -20,8 +20,14 @@
 #ifndef SDDM_VIRTUALTERMINAL_H
 #define SDDM_VIRTUALTERMINAL_H
 
+#include <QString>
+
 namespace SDDM {
     namespace VirtualTerminal {
+        extern const char *defaultVtPath;
+
+        QString path(int vt);
+        int currentVt();
         int setUpNewVt();
         void jumpToVt(int vt, bool vt_auto);
     }
diff --git a/src/common/XAuth.cpp b/src/common/XAuth.cpp
new file mode 100644
index 0000000..cfabff4
--- /dev/null
+++ b/src/common/XAuth.cpp
@@ -0,0 +1,182 @@
+/***************************************************************************
+* Copyright (c) 2023 Fabian Vogt <fvogt@suse.de>
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+* Copyright (c) 2013 Abdurrahman AVCI <abdurrahmanavci@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include <limits.h>
+#include <QDebug>
+#include <QDir>
+#include <QScopeGuard>
+#include <QString>
+#include <QStringView>
+#include <random>
+#include <sys/stat.h>
+#include <sys/types.h>
+#include <unistd.h>
+#include <X11/Xauth.h>
+
+#ifdef __FreeBSD__
+#define HOST_NAME_MAX _POSIX_HOST_NAME_MAX
+#endif
+
+#include "Configuration.h"
+#include "Constants.h"
+#include "XAuth.h"
+
+namespace SDDM {
+
+XAuth::XAuth()
+{
+    m_authDir = QStringLiteral(RUNTIME_DIR);
+}
+
+QString XAuth::authDirectory() const
+{
+    return m_authDir;
+}
+
+void XAuth::setAuthDirectory(const QString &path)
+{
+    if (m_setup) {
+        qWarning("Unable to set xauth directory after setup");
+        return;
+    }
+
+    m_authDir = path;
+}
+
+QString XAuth::authPath() const
+{
+    return m_authFile.fileName();
+}
+
+QByteArray XAuth::cookie() const
+{
+    return m_cookie;
+}
+
+void XAuth::setup()
+{
+    if (m_setup)
+        return;
+
+    m_setup = true;
+
+    // Create directory if not existing
+    QDir().mkpath(m_authDir);
+
+    // Set path
+    m_authFile.setFileTemplate(m_authDir + QStringLiteral("/xauth_XXXXXX"));
+    if(!m_authFile.open()) {
+        qFatal("Failed to create xauth file");
+    }
+
+    qDebug() << "Xauthority path:" << authPath();
+
+    // Generate cookie
+    std::random_device rd;
+    std::mt19937 gen(rd());
+    std::uniform_int_distribution<> dis(0, 0xFF);
+
+    m_cookie.truncate(0);
+    m_cookie.reserve(16);
+
+    // Create a random hexadecimal number
+    for(int i = 0; i < 16; i++)
+        m_cookie.append(dis(gen));
+}
+
+bool XAuth::addCookie(const QString &display)
+{
+    if (!m_setup) {
+        qWarning("Please setup xauth before adding a cookie");
+        return false;
+    }
+
+    return XAuth::writeCookieToFile(display, authPath(), m_cookie);
+}
+
+bool XAuth::writeCookieToFile(const QString &display, const QString &fileName,
+                              QByteArray cookie)
+{
+
+    qDebug() << "Writing cookie to" << fileName;
+
+    if(display.size() < 2 || display[0] != QLatin1Char(':') || cookie.size() != 16) {
+        qWarning().nospace() << "Unexpected DISPLAY='" << display << "' or cookie.size() = " << cookie.size();
+        return false;
+    }
+
+    // The file needs 0600 permissions
+    const int oldumask = umask(077);
+
+    // Truncate the file. We don't support merging like the xauth tool does.
+    FILE * const authFp = fopen(qPrintable(fileName), "wb");
+    auto error = errno;
+    umask(oldumask);
+    if (authFp == nullptr) {
+        qWarning().nospace() << "fopen() failed with errno=" << error;
+        return false;
+    }
+
+    auto fileCloser = qScopeGuard([authFp]{ fclose(authFp); });
+    char localhost[HOST_NAME_MAX + 1] = "";
+    if (gethostname(localhost, sizeof(localhost)) < 0)
+        strcpy(localhost, "localhost");
+
+    ::Xauth auth = {};
+    char cookieName[] = "MIT-MAGIC-COOKIE-1";
+
+    // Skip the ':'
+    QByteArray displayNumberUtf8 = QStringView{display}.mid(1).toUtf8();
+
+    auth.family = FamilyLocal;
+    auth.address = localhost;
+    auth.address_length = strlen(auth.address);
+    auth.number = displayNumberUtf8.data();
+    auth.number_length = displayNumberUtf8.size();
+    auth.name = cookieName;
+    auth.name_length = sizeof(cookieName) - 1;
+    auth.data = cookie.data();
+    auth.data_length = cookie.size();
+
+    errno = 0;
+    if (XauWriteAuth(authFp, &auth) == 0) {
+        qWarning().nospace() << "XauWriteAuth(FamilyLocal) failed with errno=" << errno;
+        return false;
+    }
+
+    // Write the same entry again, just with FamilyWild
+    auth.family = FamilyWild;
+    auth.address_length = 0;
+    errno = 0;
+    if (XauWriteAuth(authFp, &auth) == 0) {
+        qWarning().nospace() << "XauWriteAuth(FamilyWild) failed with errno=" << errno;
+        return false;
+    }
+
+    if (fflush(authFp) != 0) {
+        qWarning().nospace() << "fflush() failed with errno=" << errno;
+        return false;
+    }
+
+    return true;
+}
+
+} // namespace SDDM
diff --git a/src/common/XAuth.h b/src/common/XAuth.h
new file mode 100644
index 0000000..ab14292
--- /dev/null
+++ b/src/common/XAuth.h
@@ -0,0 +1,56 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+* Copyright (c) 2013 Abdurrahman AVCI <abdurrahmanavci@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef SDDM_XAUTH_H
+#define SDDM_XAUTH_H
+
+#include <QString>
+#include <QTemporaryFile>
+
+namespace SDDM {
+
+class XAuth
+{
+public:
+    XAuth();
+
+    QString authDirectory() const;
+    void setAuthDirectory(const QString &path);
+
+    QString authPath() const;
+    QByteArray cookie() const;
+
+    void setup();
+    bool addCookie(const QString &display);
+
+    static bool writeCookieToFile(const QString &display,
+                                  const QString &fileName,
+                                  QByteArray cookie);
+
+private:
+    bool m_setup = false;
+    QString m_authDir;
+    QTemporaryFile m_authFile;
+    QByteArray m_cookie;
+};
+
+} // namespace SDDM
+
+#endif // SDDM_XAUTH_H
diff --git a/src/daemon/CMakeLists.txt b/src/daemon/CMakeLists.txt
index 86d014b..ce89837 100644
--- a/src/daemon/CMakeLists.txt
+++ b/src/daemon/CMakeLists.txt
@@ -2,9 +2,11 @@ include_directories(
     "${CMAKE_SOURCE_DIR}/src/common"
     "${CMAKE_SOURCE_DIR}/src/auth"
     "${CMAKE_BINARY_DIR}/src/common"
+    ${LIBXAU_INCLUDE_DIRS}
     "${LIBXCB_INCLUDE_DIR}"
 )
 
+configure_file(config.h.in config.h IMMEDIATE @ONLY)
 set(DAEMON_SOURCES
     ${CMAKE_SOURCE_DIR}/src/common/Configuration.cpp
     ${CMAKE_SOURCE_DIR}/src/common/SafeDataStream.cpp
@@ -13,6 +15,8 @@ set(DAEMON_SOURCES
     ${CMAKE_SOURCE_DIR}/src/common/ThemeMetadata.cpp
     ${CMAKE_SOURCE_DIR}/src/common/Session.cpp
     ${CMAKE_SOURCE_DIR}/src/common/SocketWriter.cpp
+    ${CMAKE_SOURCE_DIR}/src/common/XAuth.cpp
+    ${CMAKE_SOURCE_DIR}/src/common/SignalHandler.cpp
     ${CMAKE_SOURCE_DIR}/src/auth/Auth.cpp
     ${CMAKE_SOURCE_DIR}/src/auth/AuthPrompt.cpp
     ${CMAKE_SOURCE_DIR}/src/auth/AuthRequest.cpp
@@ -22,27 +26,23 @@ set(DAEMON_SOURCES
     DisplayManager.cpp
     DisplayServer.cpp
     LogindDBusTypes.cpp
-    XorgDisplayServer.cpp
     Greeter.cpp
     PowerManager.cpp
     Seat.cpp
     SeatManager.cpp
-    SignalHandler.cpp
     SocketServer.cpp
+    XorgDisplayServer.cpp
+    XorgUserDisplayServer.cpp
+    XorgUserDisplayServer.h
+    WaylandDisplayServer.cpp
+    WaylandDisplayServer.h
 )
 
-# Different implementations of the VT switching code
-# (where the FreeBSD version does nothing).
-if(${CMAKE_SYSTEM} MATCHES "FreeBSD")
-    list(APPEND DAEMON_SOURCES ${CMAKE_SOURCE_DIR}/src/common/VirtualTerminal_FreeBSD.cpp)
-else()
-    list(APPEND DAEMON_SOURCES ${CMAKE_SOURCE_DIR}/src/common/VirtualTerminal.cpp)
-endif()
-
-qt5_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.xml"          "DisplayManager.h" SDDM::DisplayManager)
-qt5_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.Seat.xml"     "DisplayManager.h" SDDM::DisplayManagerSeat)
-qt5_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.Session.xml"  "DisplayManager.h" SDDM::DisplayManagerSession)
+list(APPEND DAEMON_SOURCES ${CMAKE_SOURCE_DIR}/src/common/VirtualTerminal.cpp)
 
+qt_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.xml"          "DisplayManager.h" SDDM::DisplayManager)
+qt_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.Seat.xml"     "DisplayManager.h" SDDM::DisplayManagerSeat)
+qt_add_dbus_adaptor(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.DisplayManager.Session.xml"  "DisplayManager.h" SDDM::DisplayManagerSession)
 
 set_source_files_properties("${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Manager.xml" PROPERTIES
    INCLUDE "LogindDBusTypes.h"
@@ -55,15 +55,16 @@ set_source_files_properties("${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop
    INCLUDE "LogindDBusTypes.h"
 )
 
-qt5_add_dbus_interface(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Manager.xml"  "Login1Manager")
-qt5_add_dbus_interface(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Seat.xml"  "Login1Seat")
-qt5_add_dbus_interface(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Session.xml"  "Login1Session")
+qt_add_dbus_interface(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Manager.xml"  "Login1Manager")
+qt_add_dbus_interface(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Seat.xml"  "Login1Seat")
+qt_add_dbus_interface(DAEMON_SOURCES "${CMAKE_SOURCE_DIR}/data/interfaces/org.freedesktop.login1.Session.xml"  "Login1Session")
 
 add_executable(sddm ${DAEMON_SOURCES})
 target_link_libraries(sddm
-                      Qt5::DBus
-                      Qt5::Network
-                      Qt5::Qml
+                      Qt${QT_MAJOR_VERSION}::DBus
+                      Qt${QT_MAJOR_VERSION}::Network
+                      Qt${QT_MAJOR_VERSION}::Qml
+                      ${LIBXAU_LINK_LIBRARIES}
                       ${LIBXCB_LIBRARIES})
 if(PAM_FOUND)
     target_link_libraries(sddm ${PAM_LIBRARIES})
diff --git a/src/daemon/DaemonApp.cpp b/src/daemon/DaemonApp.cpp
index 2b9b9f6..490068e 100644
--- a/src/daemon/DaemonApp.cpp
+++ b/src/daemon/DaemonApp.cpp
@@ -28,6 +28,7 @@
 
 #include "MessageHandler.h"
 
+#include <QDBusConnectionInterface>
 #include <QDebug>
 #include <QHostInfo>
 #include <QTimer>
@@ -49,6 +50,21 @@ namespace SDDM {
         // set testing parameter
         m_testing = (arguments().indexOf(QStringLiteral("--test-mode")) != -1);
 
+        bool consoleKitServiceActivatable = false;
+        QDBusReply<QStringList> activatableNamesReply = QDBusConnection::systemBus().interface()->activatableServiceNames();
+        if (activatableNamesReply.isValid()) {
+            consoleKitServiceActivatable = activatableNamesReply.value().contains(QStringLiteral("org.freedesktop.ConsoleKit"));
+        }
+
+        // If ConsoleKit isn't started by the OS init system (FreeBSD, for instance),
+        // we start it ourselves during the sddm startup
+        if (consoleKitServiceActivatable) {
+            QDBusReply<bool> registeredReply = QDBusConnection::systemBus().interface()->isServiceRegistered(QStringLiteral("org.freedesktop.ConsoleKit"));
+            if (registeredReply.isValid() && registeredReply.value() == false) {
+                QDBusConnection::systemBus().interface()->startService(QStringLiteral("org.freedesktop.ConsoleKit"));
+            }
+        }
+
         // create display manager
         m_displayManager = new DisplayManager(this);
 
@@ -65,9 +81,6 @@ namespace SDDM {
         // create signal handler
         m_signalHandler = new SignalHandler(this);
 
-        // initialize signal signalHandler
-        SignalHandler::initialize();
-
         // quit when SIGINT, SIGTERM received
         connect(m_signalHandler, &SignalHandler::sigintReceived, this, &DaemonApp::quit);
         connect(m_signalHandler, &SignalHandler::sigtermReceived, this, &DaemonApp::quit);
diff --git a/src/daemon/Display.cpp b/src/daemon/Display.cpp
index b95f6e5..1a0a369 100644
--- a/src/daemon/Display.cpp
+++ b/src/daemon/Display.cpp
@@ -25,11 +25,11 @@
 #include "DaemonApp.h"
 #include "DisplayManager.h"
 #include "XorgDisplayServer.h"
+#include "XorgUserDisplayServer.h"
 #include "Seat.h"
 #include "SocketServer.h"
 #include "Greeter.h"
 #include "Utils.h"
-#include "SignalHandler.h"
 
 #include <QDebug>
 #include <QFile>
@@ -38,6 +38,10 @@
 
 #include <pwd.h>
 #include <unistd.h>
+#include <sys/time.h>
+
+#include <sys/ioctl.h>
+#include <fcntl.h>
 
 #include <QDBusConnection>
 #include <QDBusMessage>
@@ -45,16 +49,95 @@
 
 #include "Login1Manager.h"
 #include "Login1Session.h"
+#include "VirtualTerminal.h"
+#include "WaylandDisplayServer.h"
+#include "config.h"
 
+static int s_ttyFailures = 0;
+#define STRINGIFY(x) #x
 
 namespace SDDM {
-    Display::Display(const int terminalId, Seat *parent) : QObject(parent),
-        m_terminalId(terminalId),
+    bool isTtyInUse(const QString &desiredTty) {
+        if (Logind::isAvailable()) {
+            OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());
+            auto reply = manager.ListSessions();
+            reply.waitForFinished();
+
+            const auto info = reply.value();
+            for(const SessionInfo &s : info) {
+                OrgFreedesktopLogin1SessionInterface session(Logind::serviceName(), s.sessionPath.path(), QDBusConnection::systemBus());
+                if (desiredTty == session.tTY() && session.state() != QLatin1String("closing")) {
+                    qDebug() << "tty" << desiredTty << "already in use by" << session.user().path.path() << session.state()
+                                      << session.display() << session.desktop() << session.vTNr();
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    int fetchAvailableVt() {
+        if (!isTtyInUse(QStringLiteral("tty" STRINGIFY(SDDM_INITIAL_VT)))) {
+            return SDDM_INITIAL_VT;
+        }
+        const auto vt = VirtualTerminal::currentVt();
+        if (vt > 0 && !isTtyInUse(QStringLiteral("tty%1").arg(vt))) {
+            return vt;
+        }
+        return VirtualTerminal::setUpNewVt();
+    }
+
+    Display::DisplayServerType Display::defaultDisplayServerType()
+    {
+        const QString &displayServerType = mainConfig.DisplayServer.get().toLower();
+        DisplayServerType ret;
+        if (displayServerType == QStringLiteral("x11-user")) {
+            ret = X11UserDisplayServerType;
+        } else if (displayServerType == QStringLiteral("wayland")) {
+            ret = WaylandDisplayServerType;
+        } else {
+            if (displayServerType != QLatin1String("x11")) {
+                qWarning("\"%s\" is an invalid value for General.DisplayServer: fall back to \"x11\"",
+                    qPrintable(displayServerType));
+            }
+            ret = X11DisplayServerType;
+        }
+        return ret;
+    }
+
+    Display::Display(Seat *parent, DisplayServerType serverType)
+        : QObject(parent),
+        m_displayServerType(serverType),
         m_auth(new Auth(this)),
-        m_displayServer(new XorgDisplayServer(this)),
         m_seat(parent),
         m_socketServer(new SocketServer(this)),
-        m_greeter(new Greeter(this)) {
+        m_greeter(new Greeter(this))
+    {
+        // Create display server
+        switch (m_displayServerType) {
+        case X11DisplayServerType:
+            if (seat()->canTTY()) {
+                m_terminalId = VirtualTerminal::setUpNewVt();
+            }
+            m_displayServer = new XorgDisplayServer(this);
+            break;
+        case X11UserDisplayServerType:
+            if (seat()->canTTY()) {
+                m_terminalId = fetchAvailableVt();
+            }
+            m_displayServer = new XorgUserDisplayServer(this);
+            m_greeter->setDisplayServerCommand(XorgUserDisplayServer::command(this));
+            break;
+        case WaylandDisplayServerType:
+            if (seat()->canTTY()) {
+                m_terminalId = fetchAvailableVt();
+            }
+            m_displayServer = new WaylandDisplayServer(this);
+            m_greeter->setDisplayServerCommand(mainConfig.Wayland.CompositorCommand.get());
+            break;
+        }
+
+        qDebug("Using VT %d", m_terminalId);
 
         // respond to authentication requests
         m_auth->setVerbose(true);
@@ -73,20 +156,40 @@ namespace SDDM {
         connect(m_socketServer, &SocketServer::login, this, &Display::login);
 
         // connect login result signals
-        connect(this, SIGNAL(loginFailed(QLocalSocket*)), m_socketServer, SLOT(loginFailed(QLocalSocket*)));
-        connect(this, SIGNAL(loginSucceeded(QLocalSocket*)), m_socketServer, SLOT(loginSucceeded(QLocalSocket*)));
+        connect(this, &Display::loginFailed, m_socketServer, &SocketServer::loginFailed);
+        connect(this, &Display::loginSucceeded, m_socketServer, &SocketServer::loginSucceeded);
+
+        connect(m_greeter, &Greeter::failed, this, &Display::stop);
+        connect(m_greeter, &Greeter::ttyFailed, this, [this] {
+            ++s_ttyFailures;
+            if (s_ttyFailures > 5) {
+                QCoreApplication::exit(23);
+            }
+            // It might be the case that we are trying a tty that has been taken over by a
+            // different process. In such a case, switch back to the initial one and try again.
+            VirtualTerminal::jumpToVt(SDDM_INITIAL_VT, true);
+            stop();
+        });
+        connect(m_greeter, &Greeter::displayServerFailed, this, &Display::displayServerFailed);
     }
 
     Display::~Display() {
+        disconnect(m_auth, &Auth::finished, this, &Display::slotHelperFinished);
         stop();
     }
 
-    QString Display::displayId() const {
-        return m_displayServer->display();
+    Display::DisplayServerType Display::displayServerType() const
+    {
+        return m_displayServerType;
     }
 
-    const int Display::terminalId() const {
-        return m_terminalId;
+    DisplayServer *Display::displayServer() const
+    {
+        return m_displayServer;
+    }
+
+    int Display::terminalId() const {
+        return m_auth->isActive() ? m_sessionTerminalId : m_terminalId;
     }
 
     const QString &Display::name() const {
@@ -127,36 +230,10 @@ namespace SDDM {
         session.setTo(sessionType, autologinSession);
 
         m_auth->setAutologin(true);
-        startAuth(mainConfig.Autologin.User.get(), QString(), session);
-
-        return true;
+        return startAuth(mainConfig.Autologin.User.get(), QString(), session);
     }
 
-    void Display::displayServerStarted() {
-        // check flag
-        if (m_started)
-            return;
-
-        // setup display
-        m_displayServer->setupDisplay();
-
-        // log message
-        qDebug() << "Display server started.";
-
-        if ((daemonApp->first || mainConfig.Autologin.Relogin.get()) &&
-            !mainConfig.Autologin.User.get().isEmpty()) {
-            // reset first flag
-            daemonApp->first = false;
-
-            // set flags
-            m_started = true;
-
-            bool success = attemptAutologin();
-            if (success) {
-                return;
-            }
-        }
-
+    void Display::startSocketServerAndGreeter() {
         // start socket server
         m_socketServer->start(m_displayServer->display());
 
@@ -171,9 +248,6 @@ namespace SDDM {
             }
         }
 
-        // set greeter params
-        m_greeter->setDisplay(this);
-        m_greeter->setAuthPath(qobject_cast<XorgDisplayServer *>(m_displayServer)->authPath());
         m_greeter->setSocket(m_socketServer->socketAddress());
         m_greeter->setTheme(findGreeterTheme());
 
@@ -187,6 +261,41 @@ namespace SDDM {
         m_started = true;
     }
 
+    void Display::handleAutologinFailure() {
+        qWarning() << "Autologin failed!";
+        m_auth->setAutologin(false);
+        startSocketServerAndGreeter();
+    }
+
+    void Display::displayServerStarted() {
+        // check flag
+        if (m_started)
+            return;
+
+        // setup display
+        m_displayServer->setupDisplay();
+
+        // log message
+        qDebug() << "Display server started.";
+
+        if ((daemonApp->first || mainConfig.Autologin.Relogin.get()) &&
+            !mainConfig.Autologin.User.get().isEmpty()) {
+            // reset first flag
+            daemonApp->first = false;
+
+            // set flags
+            m_started = true;
+
+            const bool autologinStarted = attemptAutologin();
+            if (!autologinStarted)
+                handleAutologinFailure();
+
+            return;
+        }
+
+        startSocketServerAndGreeter();
+    }
+
     void Display::stop() {
         // check flag
         if (!m_started)
@@ -195,6 +304,8 @@ namespace SDDM {
         // stop the greeter
         m_greeter->stop();
 
+        m_auth->stop();
+
         // stop socket server
         m_socketServer->stop();
 
@@ -218,6 +329,7 @@ namespace SDDM {
         //the SDDM user has special privileges that skip password checking so that we can load the greeter
         //block ever trying to log in as the SDDM user
         if (user == QLatin1String("sddm")) {
+            emit loginFailed(m_socket);
             return;
         }
 
@@ -244,7 +356,8 @@ namespace SDDM {
         return QString();
     }
 
-    bool Display::findSessionEntry(const QDir &dir, const QString &name) const {
+    bool Display::findSessionEntry(const QStringList &dirPaths, const QString &name) const {
+        const QFileInfo fileInfo(name);
         QString fileName = name;
 
         // append extension
@@ -252,14 +365,24 @@ namespace SDDM {
         if (!fileName.endsWith(extension))
             fileName += extension;
 
-        return dir.exists(fileName);
+        for (const auto &path: dirPaths) {
+            QDir dir = path;
+
+            // Given an absolute path: Check that it matches dir
+            if (fileInfo.isAbsolute() && fileInfo.absolutePath() != dir.absolutePath())
+                continue;
+
+            if (dir.exists(fileName))
+                return true;
+        }
+        return false;
     }
 
-    void Display::startAuth(const QString &user, const QString &password, const Session &session) {
+    bool Display::startAuth(const QString &user, const QString &password, const Session &session) {
 
         if (m_auth->isActive()) {
             qWarning() << "Existing authentication ongoing, aborting";
-            return;
+            return false;
         }
 
         m_passPhrase = password;
@@ -267,15 +390,15 @@ namespace SDDM {
         // sanity check
         if (!session.isValid()) {
             qCritical() << "Invalid session" << session.fileName();
-            return;
+            return false;
         }
         if (session.xdgSessionType().isEmpty()) {
             qCritical() << "Failed to find XDG session type for session" << session.fileName();
-            return;
+            return false;
         }
         if (session.exec().isEmpty()) {
             qCritical() << "Failed to find command for session" << session.fileName();
-            return;
+            return false;
         }
 
         m_reuseSessionId = QString();
@@ -297,54 +420,74 @@ namespace SDDM {
             }
         }
 
-        // cache last session
-        m_lastSession = session;
-
         // save session desktop file name, we'll use it to set the
         // last session later, in slotAuthenticationFinished()
         m_sessionName = session.fileName();
 
+        m_sessionTerminalId = m_terminalId;
+        if ((session.type() == Session::WaylandSession && m_displayServerType == X11DisplayServerType) || (m_greeter->isRunning() && m_displayServerType != X11DisplayServerType)) {
+            // Create a new VT when we need to have another compositor running
+            if (seat()->canTTY()) {
+                m_sessionTerminalId = VirtualTerminal::setUpNewVt();
+            }
+        }
+
         // some information
-        qDebug() << "Session" << m_sessionName << "selected, command:" << session.exec();
+        qDebug() << "Session" << m_sessionName << "selected, command:" << session.exec() << "for VT" << m_sessionTerminalId;
 
         QProcessEnvironment env;
-
-        if (seat()->name() == QLatin1String("seat0")) {
-            // Use the greeter VT, for wayland sessions the helper overwrites this
-            env.insert(QStringLiteral("XDG_VTNR"), QString::number(terminalId()));
-        }
+        env.insert(session.additionalEnv());
 
         env.insert(QStringLiteral("PATH"), mainConfig.Users.DefaultPath.get());
-        if (session.xdgSessionType() == QLatin1String("x11"))
-            env.insert(QStringLiteral("DISPLAY"), name());
         env.insert(QStringLiteral("XDG_SEAT_PATH"), daemonApp->displayManager()->seatPath(seat()->name()));
         env.insert(QStringLiteral("XDG_SESSION_PATH"), daemonApp->displayManager()->sessionPath(QStringLiteral("Session%1").arg(daemonApp->newSessionId())));
         env.insert(QStringLiteral("DESKTOP_SESSION"), session.desktopSession());
-        env.insert(QStringLiteral("XDG_CURRENT_DESKTOP"), session.desktopNames());
+        if (!session.desktopNames().isEmpty())
+            env.insert(QStringLiteral("XDG_CURRENT_DESKTOP"), session.desktopNames());
         env.insert(QStringLiteral("XDG_SESSION_CLASS"), QStringLiteral("user"));
         env.insert(QStringLiteral("XDG_SESSION_TYPE"), session.xdgSessionType());
         env.insert(QStringLiteral("XDG_SEAT"), seat()->name());
+        if (m_sessionTerminalId > 0)
+            env.insert(QStringLiteral("XDG_VTNR"), QString::number(m_sessionTerminalId));
+#ifdef HAVE_SYSTEMD
         env.insert(QStringLiteral("XDG_SESSION_DESKTOP"), session.desktopNames());
+#endif
 
-        m_auth->insertEnvironment(env);
-
+        if (session.xdgSessionType() == QLatin1String("x11")) {
+          if (m_displayServerType == X11DisplayServerType)
+            env.insert(QStringLiteral("DISPLAY"), name());
+          else
+            m_auth->setDisplayServerCommand(XorgUserDisplayServer::command(this));
+        } else {
+            m_auth->setDisplayServerCommand(QStringLiteral());
+	}
         m_auth->setUser(user);
         if (m_reuseSessionId.isNull()) {
             m_auth->setSession(session.exec());
         }
+        m_auth->insertEnvironment(env);
         m_auth->start();
+
+        return true;
     }
 
     void Display::slotAuthenticationFinished(const QString &user, bool success) {
+        if (m_auth->autologin() && !success) {
+            handleAutologinFailure();
+            return;
+        }
+
         if (success) {
-            qDebug() << "Authenticated successfully";
+            qDebug() << "Authentication for user " << user << " successful";
 
             if (!m_reuseSessionId.isNull()) {
                 OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());
                 manager.UnlockSession(m_reuseSessionId);
                 manager.ActivateSession(m_reuseSessionId);
+                m_started = true;
             } else {
-                m_auth->setCookie(qobject_cast<XorgDisplayServer *>(m_displayServer)->cookie());
+                if (qobject_cast<XorgDisplayServer *>(m_displayServer))
+                    m_auth->setCookie(qobject_cast<XorgDisplayServer *>(m_displayServer)->cookie());
             }
 
             // save last user and last session
@@ -361,25 +504,28 @@ namespace SDDM {
             if (m_socket)
                 emit loginSucceeded(m_socket);
         } else if (m_socket) {
-            qDebug() << "Authentication failure";
+            qDebug() << "Authentication for user " << user << " failed";
             emit loginFailed(m_socket);
         }
         m_socket = nullptr;
     }
 
     void Display::slotAuthInfo(const QString &message, Auth::Info info) {
-        // TODO: presentable to the user, eventually
-        Q_UNUSED(info);
-        qWarning() << "Authentication information:" << message;
+        qWarning() << "Authentication information:" << info << message;
+
+        if (!m_socket)
+            return;
+
+        m_socketServer->informationMessage(m_socket, message);
     }
 
     void Display::slotAuthError(const QString &message, Auth::Error error) {
-        // TODO: handle more errors
-        qWarning() << "Authentication error:" << message;
+        qWarning() << "Authentication error:" << error << message;
 
         if (!m_socket)
             return;
 
+        m_socketServer->informationMessage(m_socket, message);
         if (error == Auth::ERROR_AUTHENTICATION)
             emit loginFailed(m_socket);
     }
@@ -406,6 +552,9 @@ namespace SDDM {
     }
 
     void Display::slotSessionStarted(bool success) {
-        qDebug() << "Session started";
+        qDebug() << "Session started" << success;
+        if (success) {
+            QTimer::singleShot(5000, m_greeter, &Greeter::stop);
+        }
     }
 }
diff --git a/src/daemon/Display.h b/src/daemon/Display.h
index e68bc12..a70671a 100644
--- a/src/daemon/Display.h
+++ b/src/daemon/Display.h
@@ -23,6 +23,7 @@
 #define SDDM_DISPLAY_H
 
 #include <QObject>
+#include <QPointer>
 #include <QDir>
 
 #include "Auth.h"
@@ -41,15 +42,26 @@ namespace SDDM {
         Q_OBJECT
         Q_DISABLE_COPY(Display)
     public:
-        explicit Display(int terminalId, Seat *parent);
+        enum DisplayServerType {
+            X11DisplayServerType,
+            X11UserDisplayServerType,
+            WaylandDisplayServerType
+        };
+        Q_ENUM(DisplayServerType)
+
+        static DisplayServerType defaultDisplayServerType();
+        explicit Display(Seat *parent, DisplayServerType serverType);
         ~Display();
 
-        QString displayId() const;
-        const int terminalId() const;
+        DisplayServerType displayServerType() const;
+        DisplayServer *displayServer() const;
+
+        int terminalId() const;
 
         const QString &name() const;
 
         QString sessionType() const;
+        QString reuseSessionId() const { return m_reuseSessionId; }
 
         Seat *seat() const;
 
@@ -65,23 +77,28 @@ namespace SDDM {
 
     signals:
         void stopped();
+        void displayServerFailed();
 
         void loginFailed(QLocalSocket *socket);
         void loginSucceeded(QLocalSocket *socket);
 
     private:
         QString findGreeterTheme() const;
-        bool findSessionEntry(const QDir &dir, const QString &name) const;
+        bool findSessionEntry(const QStringList &dirPaths, const QString &name) const;
 
-        void startAuth(const QString &user, const QString &password,
+        bool startAuth(const QString &user, const QString &password,
                        const Session &session);
 
+        void startSocketServerAndGreeter();
+        void handleAutologinFailure();
+
+        DisplayServerType m_displayServerType = X11DisplayServerType;
+
         bool m_relogin { true };
         bool m_started { false };
 
-        int m_terminalId { 7 };
-
-        Session m_lastSession;
+        int m_terminalId = -1;
+        int m_sessionTerminalId = 0;
 
         QString m_passPhrase;
         QString m_sessionName;
@@ -91,7 +108,7 @@ namespace SDDM {
         DisplayServer *m_displayServer { nullptr };
         Seat *m_seat { nullptr };
         SocketServer *m_socketServer { nullptr };
-        QLocalSocket *m_socket { nullptr };
+        QPointer<QLocalSocket> m_socket;
         Greeter *m_greeter { nullptr };
 
     private slots:
diff --git a/src/daemon/Greeter.cpp b/src/daemon/Greeter.cpp
index 878576b..f898a72 100644
--- a/src/daemon/Greeter.cpp
+++ b/src/daemon/Greeter.cpp
@@ -27,12 +27,19 @@
 #include "ThemeConfig.h"
 #include "ThemeMetadata.h"
 #include "Display.h"
+#include "XorgDisplayServer.h"
+#include "XorgUserDisplayServer.h"
+#include "WaylandDisplayServer.h"
 
 #include <QtCore/QDebug>
 #include <QtCore/QProcess>
+#include <VirtualTerminal.h>
 
 namespace SDDM {
-    Greeter::Greeter(QObject *parent) : QObject(parent) {
+    Greeter::Greeter(Display *parent)
+        : QObject(parent)
+        , m_display(parent)
+    {
         m_metadata = new ThemeMetadata(QString());
         m_themeConfig = new ThemeConfig(QString());
     }
@@ -44,14 +51,6 @@ namespace SDDM {
         delete m_themeConfig;
     }
 
-    void Greeter::setDisplay(Display *display) {
-        m_display = display;
-    }
-
-    void Greeter::setAuthPath(const QString &authPath) {
-        m_authPath = authPath;
-    }
-
     void Greeter::setSocket(const QString &socket) {
         m_socket = socket;
     }
@@ -71,15 +70,43 @@ namespace SDDM {
         }
     }
 
+    QString Greeter::displayServerCommand() const
+    {
+        return m_displayServerCmd;
+    }
+
+    void Greeter::setDisplayServerCommand(const QString &cmd)
+    {
+        m_displayServerCmd = cmd;
+    }
+
+    QString Greeter::greeterPathForQt(int qtVersion)
+    {
+        const QString suffix = qtVersion == 5 ? QString() : QStringLiteral("-qt%1").arg(qtVersion);
+        return QStringLiteral(BIN_INSTALL_DIR "/sddm-greeter%1").arg(suffix);
+    }
+
     bool Greeter::start() {
         // check flag
         if (m_started)
             return false;
 
+        // If no theme is given, use the default theme of the default greeter version
+        const int themeQtVersion = m_themePath.isEmpty() ? (QT_VERSION >> 16) : m_metadata->qtVersion();
+        QString greeterPath = greeterPathForQt(themeQtVersion);
+        if (!QFileInfo(greeterPath).isExecutable()) {
+            qWarning() << "The theme at" << m_themePath << "requires missing" << greeterPath << ". Using fallback theme.";
+            setTheme(QString());
+            greeterPath = greeterPathForQt(QT_VERSION >> 16);
+        }
+
         // themes
         QString xcursorTheme = mainConfig.Theme.CursorTheme.get();
         if (m_themeConfig->contains(QLatin1String("cursorTheme")))
             xcursorTheme = m_themeConfig->value(QLatin1String("cursorTheme")).toString();
+        QString xcursorSize = mainConfig.Theme.CursorSize.get();
+        if (m_themeConfig->contains(QLatin1String("cursorSize")))
+            xcursorSize = m_themeConfig->value(QLatin1String("cursorSize")).toString();
         QString platformTheme;
         if (m_themeConfig->contains(QLatin1String("platformTheme")))
             platformTheme = m_themeConfig->value(QLatin1String("platformTheme")).toString();
@@ -98,6 +125,9 @@ namespace SDDM {
         if (!style.isEmpty())
             args << QLatin1String("-style") << style;
 
+        Q_ASSERT(m_display);
+        auto *displayServer = m_display->displayServer();
+
         if (daemonApp->testing()) {
             // create process
             m_process = new QProcess(this);
@@ -111,18 +141,20 @@ namespace SDDM {
             // log message
             qDebug() << "Greeter starting...";
 
-            // set process environment
-            QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-            env.insert(QStringLiteral("DISPLAY"), m_display->name());
-            env.insert(QStringLiteral("XAUTHORITY"), m_authPath);
-            env.insert(QStringLiteral("XCURSOR_THEME"), xcursorTheme);
-            env.insert(QStringLiteral("QT_IM_MODULE"), mainConfig.InputMethod.get());
-            m_process->setProcessEnvironment(env);
+            args << QStringLiteral("--test-mode");
 
-            // start greeter
-            if (daemonApp->testing())
-                args << QStringLiteral("--test-mode");
-            m_process->start(QStringLiteral("%1/sddm-greeter").arg(QStringLiteral(BIN_INSTALL_DIR)), args);
+            if (m_display->displayServerType() == Display::X11DisplayServerType) {
+                // set process environment
+                QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
+                env.insert(QStringLiteral("DISPLAY"), m_display->name());
+                env.insert(QStringLiteral("XAUTHORITY"), qobject_cast<XorgDisplayServer*>(displayServer)->authPath());
+                env.insert(QStringLiteral("XCURSOR_THEME"), xcursorTheme);
+                if (!xcursorSize.isEmpty())
+                    env.insert(QStringLiteral("XCURSOR_SIZE"), xcursorSize);
+                m_process->setProcessEnvironment(env);
+            }
+            // Greeter command
+            m_process->start(greeterPath, args);
 
             //if we fail to start bail immediately, and don't block in waitForStarted
             if (m_process->state() == QProcess::NotRunning) {
@@ -149,14 +181,14 @@ namespace SDDM {
             m_auth->setVerbose(true);
             connect(m_auth, &Auth::requestChanged, this, &Greeter::onRequestChanged);
             connect(m_auth, &Auth::sessionStarted, this, &Greeter::onSessionStarted);
+            connect(m_auth, &Auth::displayServerReady, this, &Greeter::onDisplayServerReady);
             connect(m_auth, &Auth::finished, this, &Greeter::onHelperFinished);
             connect(m_auth, &Auth::info, this, &Greeter::authInfo);
             connect(m_auth, &Auth::error, this, &Greeter::authError);
 
-            // greeter command
+            // command
             QStringList cmd;
-            cmd << QStringLiteral("%1/sddm-greeter").arg(QStringLiteral(BIN_INSTALL_DIR))
-                << args;
+            cmd << greeterPath << args;
 
             // greeter environment
             QProcessEnvironment env;
@@ -173,21 +205,24 @@ namespace SDDM {
             }, sysenv, env);
 
             env.insert(QStringLiteral("PATH"), mainConfig.Users.DefaultPath.get());
-            env.insert(QStringLiteral("DISPLAY"), m_display->name());
-            env.insert(QStringLiteral("XAUTHORITY"), m_authPath);
             env.insert(QStringLiteral("XCURSOR_THEME"), xcursorTheme);
+            if (!xcursorSize.isEmpty())
+                env.insert(QStringLiteral("XCURSOR_SIZE"), xcursorSize);
             env.insert(QStringLiteral("XDG_SEAT"), m_display->seat()->name());
             env.insert(QStringLiteral("XDG_SEAT_PATH"), daemonApp->displayManager()->seatPath(m_display->seat()->name()));
             env.insert(QStringLiteral("XDG_SESSION_PATH"), daemonApp->displayManager()->sessionPath(QStringLiteral("Session%1").arg(daemonApp->newSessionId())));
-            if (m_display->seat()->name() == QLatin1String("seat0"))
+            if (m_display->seat()->name() == QLatin1String("seat0") && m_display->terminalId() > 0)
                 env.insert(QStringLiteral("XDG_VTNR"), QString::number(m_display->terminalId()));
             env.insert(QStringLiteral("XDG_SESSION_CLASS"), QStringLiteral("greeter"));
             env.insert(QStringLiteral("XDG_SESSION_TYPE"), m_display->sessionType());
-            env.insert(QStringLiteral("QT_IM_MODULE"), mainConfig.InputMethod.get());
-
-            //some themes may use KDE components and that will automatically load KDE's crash handler which we don't want
-            //counterintuitively setting this env disables that handler
-            env.insert(QStringLiteral("KDE_DEBUG"), QStringLiteral("1"));
+            if (m_display->displayServerType() == Display::X11DisplayServerType) {
+                env.insert(QStringLiteral("DISPLAY"), m_display->name());
+                env.insert(QStringLiteral("QT_QPA_PLATFORM"), QStringLiteral("xcb"));
+                m_auth->setCookie(qobject_cast<XorgDisplayServer*>(displayServer)->cookie());
+            } else if (m_display->displayServerType() == Display::WaylandDisplayServerType) {
+                env.insert(QStringLiteral("QT_QPA_PLATFORM"), QStringLiteral("wayland"));
+                env.insert(QStringLiteral("QT_WAYLAND_SHELL_INTEGRATION"), QStringLiteral("xdg-shell"));
+            }
             m_auth->insertEnvironment(env);
 
             // log message
@@ -195,6 +230,7 @@ namespace SDDM {
 
             // start greeter
             m_auth->setUser(QStringLiteral("sddm"));
+            m_auth->setDisplayServerCommand(m_displayServerCmd);
             m_auth->setGreeter(true);
             m_auth->setSession(cmd.join(QLatin1Char(' ')));
             m_auth->start();
@@ -225,6 +261,8 @@ namespace SDDM {
             // wait for finished
             if (!m_process->waitForFinished(5000))
                 m_process->kill();
+        } else {
+            m_auth->stop();
         }
     }
 
@@ -240,8 +278,10 @@ namespace SDDM {
         qDebug() << "Greeter stopped.";
 
         // clean up
-        m_process->deleteLater();
-        m_process = nullptr;
+        if (m_process) {
+            m_process->deleteLater();
+            m_process = nullptr;
+        }
     }
 
     void Greeter::onRequestChanged() {
@@ -259,29 +299,55 @@ namespace SDDM {
             qDebug() << "Greeter session failed to start";
     }
 
+    void Greeter::onDisplayServerReady(const QString &displayName)
+    {
+        auto *displayServer = m_display->displayServer();
+
+        auto *xorgUser = qobject_cast<XorgUserDisplayServer *>(displayServer);
+        if (xorgUser)
+            xorgUser->setDisplayName(displayName);
+
+        auto *wayland = qobject_cast<WaylandDisplayServer *>(displayServer);
+        if (wayland)
+            wayland->setDisplayName(displayName);
+    }
+
     void Greeter::onHelperFinished(Auth::HelperExitStatus status) {
         // reset flag
         m_started = false;
 
         // log message
-        qDebug() << "Greeter stopped.";
+        qDebug() << "Greeter stopped." << status;
 
         // clean up
         m_auth->deleteLater();
         m_auth = nullptr;
+
+        if (status == Auth::HELPER_DISPLAYSERVER_ERROR) {
+            Q_EMIT displayServerFailed();
+        } else if (status == Auth::HELPER_TTY_ERROR) {
+            Q_EMIT ttyFailed();
+        } else if (status == Auth::HELPER_SESSION_ERROR) {
+            Q_EMIT failed();
+        }
+    }
+
+    bool Greeter::isRunning() const {
+        return (m_process && m_process->state() == QProcess::Running)
+            || (m_auth && m_auth->isActive());
     }
 
     void Greeter::onReadyReadStandardError()
     {
         if (m_process) {
-            qDebug() << "Greeter errors:" << qPrintable(QString::fromLocal8Bit(m_process->readAllStandardError()));
+            qDebug() << "Greeter errors:" << m_process->readAllStandardError().constData();
         }
     }
 
     void Greeter::onReadyReadStandardOutput()
     {
         if (m_process) {
-            qDebug() << "Greeter output:" << qPrintable(QString::fromLocal8Bit(m_process->readAllStandardOutput()));
+            qDebug() << "Greeter output:" << m_process->readAllStandardOutput().constData();
         }
     }
 
diff --git a/src/daemon/Greeter.h b/src/daemon/Greeter.h
index 7391a35..8cc996d 100644
--- a/src/daemon/Greeter.h
+++ b/src/daemon/Greeter.h
@@ -35,14 +35,16 @@ namespace SDDM {
         Q_OBJECT
         Q_DISABLE_COPY(Greeter)
     public:
-        explicit Greeter(QObject *parent = 0);
+        explicit Greeter(Display *parent = 0);
         ~Greeter();
 
-        void setDisplay(Display *display);
-        void setAuthPath(const QString &authPath);
         void setSocket(const QString &socket);
         void setTheme(const QString &theme);
 
+        QString displayServerCommand() const;
+        void setDisplayServerCommand(const QString &cmd);
+        bool isRunning() const;
+
     public slots:
         bool start();
         void stop();
@@ -51,19 +53,25 @@ namespace SDDM {
     private slots:
         void onRequestChanged();
         void onSessionStarted(bool success);
+        void onDisplayServerReady(const QString &displayName);
         void onHelperFinished(Auth::HelperExitStatus status);
         void onReadyReadStandardOutput();
         void onReadyReadStandardError();
         void authInfo(const QString &message, Auth::Info info);
         void authError(const QString &message, Auth::Error error);
 
+    signals:
+        void ttyFailed();
+        void failed();
+        void displayServerFailed();
+
     private:
         bool m_started { false };
 
-        Display *m_display { nullptr };
-        QString m_authPath;
+        Display * const m_display { nullptr };
         QString m_socket;
         QString m_themePath;
+        QString m_displayServerCmd;
         ThemeMetadata *m_metadata { nullptr };
         ThemeConfig *m_themeConfig { nullptr };
 
@@ -71,6 +79,7 @@ namespace SDDM {
         QProcess *m_process { nullptr };
 
         static void insertEnvironmentList(QStringList names, QProcessEnvironment sourceEnv, QProcessEnvironment &targetEnv);
+        static QString greeterPathForQt(int qtVersion);
     };
 }
 
diff --git a/src/daemon/PowerManager.cpp b/src/daemon/PowerManager.cpp
index 6eca29f..ab1d6ac 100644
--- a/src/daemon/PowerManager.cpp
+++ b/src/daemon/PowerManager.cpp
@@ -87,11 +87,15 @@ const QString UPOWER_OBJECT = QStringLiteral("org.freedesktop.UPower");
         }
 
         void powerOff() const {
-            QProcess::execute(mainConfig.HaltCommand.get());
+            auto command = QProcess::splitCommand(mainConfig.HaltCommand.get());
+            const QString program = command.takeFirst();
+            QProcess::execute(program, command);
         }
 
         void reboot() const {
-            QProcess::execute(mainConfig.RebootCommand.get());
+            auto command = QProcess::splitCommand(mainConfig.RebootCommand.get());
+            const QString program = command.takeFirst();
+            QProcess::execute(program, command);
         }
 
         void suspend() const {
diff --git a/src/daemon/Seat.cpp b/src/daemon/Seat.cpp
index eef26da..bead634 100644
--- a/src/daemon/Seat.cpp
+++ b/src/daemon/Seat.cpp
@@ -28,80 +28,80 @@
 
 #include <QDebug>
 #include <QFile>
+#include <QTimer>
 
 #include <functional>
+#include <optional>
+#include <unistd.h>
+#include <Login1Manager.h>
+#include <Login1Session.h>
+#include <Login1Seat.h>
 
 namespace SDDM {
-    int findUnused(int minimum, std::function<bool(const int)> used) {
-        // initialize with minimum
-        int number = minimum;
-
-        // find unused
-        while (used(number))
-            number++;
-
-        // return number;
-        return number;
-    }
-
     Seat::Seat(const QString &name, QObject *parent) : QObject(parent), m_name(name) {
-        createDisplay();
+        createDisplay(Display::defaultDisplayServerType());
     }
 
     const QString &Seat::name() const {
         return m_name;
     }
 
-    bool Seat::createDisplay(int terminalId) {
+    void Seat::createDisplay(Display::DisplayServerType serverType) {
         //reload config if needed
         mainConfig.load();
 
-        if (m_name == QLatin1String("seat0")) {
-            if (terminalId == -1) {
-                // find unused terminal
-                terminalId = findUnused(mainConfig.X11.MinimumVT.get(), [&](const int number) {
-                    return m_terminalIds.contains(number);
-                });
-            }
-
-            // mark terminal as used
-            m_terminalIds << terminalId;
-
-            // log message
-            qDebug() << "Adding new display" << "on vt" << terminalId << "...";
-        }
-        else {
-            qDebug() << "Adding new VT-less display...";
-        }
-
         // create a new display
-        Display *display = new Display(terminalId, this);
+        qDebug() << "Adding new display...";
+        Display *display = new Display(this, serverType);
 
         // restart display on stop
         connect(display, &Display::stopped, this, &Seat::displayStopped);
+        connect(display, &Display::displayServerFailed, this, [this, display] {
+            removeDisplay(display);
+
+            // If we failed to create a display with wayland or rootful x11, try with
+            // x11-user. There's a chance it might work. It's a handy fallback
+            // since the alternative is a black screen
+            if (display->displayServerType() != Display::X11UserDisplayServerType) {
+                qWarning() << "Failed to launch the display server, falling back to DisplayServer=x11-user";
+                createDisplay(Display::X11UserDisplayServerType);
+            } else if (m_displays.isEmpty()) {
+                qWarning() << "Failed to launch a DisplayServer=x11-user session, aborting";
+                QCoreApplication::instance()->exit(12);
+            }
+        });
 
         // add display to the list
         m_displays << display;
 
         // start the display
-        if (!display->start()) {
-            qCritical() << "Could not start Display server on vt" << terminalId;
-            return false;
+        startDisplay(display);
+    }
+
+    void Seat::startDisplay(Display *display, int tryNr) {
+        if (display->start())
+            return;
+
+        // It's possible that the system isn't ready yet (driver not loaded,
+        // device not enumerated, ...). It's not possible to tell when that changes,
+        // so try a few times with a delay in between.
+        qWarning() << "Attempt" << tryNr << "starting the Display server on vt" << display->terminalId() << "failed";
+
+        if(tryNr >= 3) {
+            qCritical() << "Could not start Display server on vt" << display->terminalId();
+            return;
         }
 
-        return true;
+        QTimer::singleShot(2000, display, [=] { startDisplay(display, tryNr + 1); });
     }
 
     void Seat::removeDisplay(Display* display) {
-        qDebug() << "Removing display" << display->displayId() << "...";
+        qDebug() << "Removing display" << display << "...";
 
 
         // remove display from list
         m_displays.removeAll(display);
 
-        // mark display and terminal ids as unused
-        m_terminalIds.removeAll(display->terminalId());
-
         // stop the display
         display->blockSignals(true);
         display->stop();
@@ -113,22 +113,46 @@ namespace SDDM {
 
     void Seat::displayStopped() {
         Display *display = qobject_cast<Display *>(sender());
+        OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());
+        std::optional<int> nextVt;
+        auto reusing = display->reuseSessionId();
+        if (manager.isValid() && !reusing.isEmpty()) {
+            auto sessionPath = manager.GetSession(reusing);
+            OrgFreedesktopLogin1SessionInterface sessionIface(Logind::serviceName(), sessionPath.value().path(), QDBusConnection::systemBus());
+            nextVt = QStringView(sessionIface.tTY()).mid(3).toInt(); // we need to convert ttyN to N
+        }
 
         // remove display
         removeDisplay(display);
 
         // restart otherwise
         if (m_displays.isEmpty()) {
-            createDisplay();
+            createDisplay(Display::defaultDisplayServerType());
         }
         // If there is still a session running on some display,
         // switch to last display in display vector.
         // Set vt_auto to true, so let the kernel handle the
         // vt switch automatically (VT_AUTO).
-        else {
+        else if (!nextVt) {
             int disp = m_displays.last()->terminalId();
             if (disp != -1)
-                VirtualTerminal::jumpToVt(disp, true);
+                nextVt = disp;
         }
+
+        if (nextVt) {
+            VirtualTerminal::jumpToVt(*nextVt, true);
+        }
+    }
+
+    bool Seat::canTTY() {
+        OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());
+        if (manager.isValid()) {
+            auto seatPath = manager.GetSeat(m_name);
+            OrgFreedesktopLogin1SeatInterface seatIface(Logind::serviceName(), seatPath.value().path(), QDBusConnection::systemBus());
+            if (seatIface.property("CanTTY").isValid())
+                return seatIface.canTTY();
+        }
+
+        return m_name.compare(QStringLiteral("seat0"), Qt::CaseInsensitive) == 0 && access(VirtualTerminal::defaultVtPath, F_OK) == 0;
     }
 }
diff --git a/src/daemon/Seat.h b/src/daemon/Seat.h
index bf22566..3cfdfdb 100644
--- a/src/daemon/Seat.h
+++ b/src/daemon/Seat.h
@@ -22,6 +22,7 @@
 
 #include <QObject>
 #include <QVector>
+#include "Display.h"
 
 namespace SDDM {
     class Display;
@@ -33,19 +34,21 @@ namespace SDDM {
         explicit Seat(const QString &name, QObject *parent = 0);
 
         const QString &name() const;
+        void createDisplay(Display::DisplayServerType serverType);
+        bool canTTY();
 
     public slots:
-        bool createDisplay(int terminalId = -1);
         void removeDisplay(SDDM::Display* display);
 
     private slots:
         void displayStopped();
 
     private:
+        void startDisplay(SDDM::Display *display, int tryNr = 1);
+
         QString m_name;
 
         QVector<Display *> m_displays;
-        QVector<int> m_terminalIds;
     };
 }
 
diff --git a/src/daemon/SeatManager.cpp b/src/daemon/SeatManager.cpp
index 60d22ea..26a3ade 100644
--- a/src/daemon/SeatManager.cpp
+++ b/src/daemon/SeatManager.cpp
@@ -27,6 +27,8 @@
 #include <QDBusPendingReply>
 #include <QDBusContext>
 
+#include <Login1Manager.h>
+#include <Login1Session.h>
 #include "LogindDBusTypes.h"
 
 namespace SDDM {
@@ -34,7 +36,7 @@ namespace SDDM {
     class LogindSeat : public QObject {
     Q_OBJECT
     public:
-        LogindSeat(const QString &name, const QDBusObjectPath &objectPath, QObject *parent);
+        LogindSeat(const QString &name, const QDBusObjectPath &objectPath);
         QString name() const;
         bool canGraphical() const;
     Q_SIGNALS:
@@ -46,7 +48,7 @@ namespace SDDM {
         bool m_canGraphical;
     };
 
-    LogindSeat::LogindSeat(const QString& name, const QDBusObjectPath& objectPath, QObject* parent):
+    LogindSeat::LogindSeat(const QString& name, const QDBusObjectPath& objectPath):
         m_name(name),
         m_canGraphical(false)
     {
@@ -113,6 +115,7 @@ namespace SDDM {
             }
         });
 
+        QDBusConnection::systemBus().connect(Logind::serviceName(), Logind::managerPath(), Logind::managerIfaceName(), QStringLiteral("SecureAttentionKey"), this, SLOT(logindSecureAttentionKey(QString,QDBusObjectPath)));
         QDBusConnection::systemBus().connect(Logind::serviceName(), Logind::managerPath(), Logind::managerIfaceName(), QStringLiteral("SeatNew"), this, SLOT(logindSeatAdded(QString,QDBusObjectPath)));
         QDBusConnection::systemBus().connect(Logind::serviceName(), Logind::managerPath(), Logind::managerIfaceName(), QStringLiteral("SeatRemoved"), this, SLOT(logindSeatRemoved(QString,QDBusObjectPath)));
     }
@@ -148,13 +151,37 @@ namespace SDDM {
         if (!m_seats.contains(name))
             return;
 
+        // Switch to existing greeter session if available
+        if (Logind::isAvailable()) {
+            OrgFreedesktopLogin1ManagerInterface manager(Logind::serviceName(), Logind::managerPath(), QDBusConnection::systemBus());
+            auto reply = manager.ListSessions();
+            reply.waitForFinished();
+
+            const auto info = reply.value();
+            for(const SessionInfo &s : reply.value()) {
+                if (s.userName == QLatin1String("sddm")) {
+                    OrgFreedesktopLogin1SessionInterface session(Logind::serviceName(), s.sessionPath.path(), QDBusConnection::systemBus());
+                    if (session.service() == QLatin1String("sddm-greeter") && session.seat().name == name) {
+                        session.Activate();
+                        return;
+                    }
+                }
+            }
+        }
+
         // switch to greeter
-        m_seats.value(name)->createDisplay();
+        m_seats.value(name)->createDisplay(Display::defaultDisplayServerType());
+    }
+
+    void SDDM::SeatManager::logindSecureAttentionKey(const QString& name, const QDBusObjectPath& objectPath)
+    {
+        Q_UNUSED(objectPath);
+        daemonApp->seatManager()->switchToGreeter(name);
     }
 
     void SDDM::SeatManager::logindSeatAdded(const QString& name, const QDBusObjectPath& objectPath)
     {
-        auto logindSeat = new LogindSeat(name, objectPath, this);
+        auto logindSeat = new LogindSeat(name, objectPath);
         connect(logindSeat, &LogindSeat::canGraphicalChanged, this, [=]() {
             if (logindSeat->canGraphical()) {
                 createSeat(logindSeat->name());
diff --git a/src/daemon/SeatManager.h b/src/daemon/SeatManager.h
index b2f9796..e1a5949 100644
--- a/src/daemon/SeatManager.h
+++ b/src/daemon/SeatManager.h
@@ -43,6 +43,7 @@ namespace SDDM {
         void seatRemoved(const QString &name);
 
     private Q_SLOTS:
+        void logindSecureAttentionKey(const QString &name, const QDBusObjectPath &objectPath);
         void logindSeatAdded(const QString &name, const QDBusObjectPath &objectPath);
         void logindSeatRemoved(const QString &name, const QDBusObjectPath &objectPath);
 
diff --git a/src/daemon/SocketServer.cpp b/src/daemon/SocketServer.cpp
index bcc56fe..488f9a5 100644
--- a/src/daemon/SocketServer.cpp
+++ b/src/daemon/SocketServer.cpp
@@ -109,83 +109,87 @@ namespace SDDM {
         // input stream
         QDataStream input(socket);
 
-        // read message
-        quint32 message;
-        input >> message;
+        // Qt's QLocalSocket::readyRead is not designed to be called at every socket.write(), 
+        // so we need to use a loop to read all the signals.
+        while(socket->bytesAvailable()) {
+            // read message
+            quint32 message;
+            input >> message;
 
-        switch (GreeterMessages(message)) {
-            case GreeterMessages::Connect: {
-                // log message
-                qDebug() << "Message received from greeter: Connect";
+            switch (GreeterMessages(message)) {
+                case GreeterMessages::Connect: {
+                    // log message
+                    qDebug() << "Message received from greeter: Connect";
 
-                // send capabilities
-                SocketWriter(socket) << quint32(DaemonMessages::Capabilities) << quint32(daemonApp->powerManager()->capabilities());
+                    // send capabilities
+                    SocketWriter(socket) << quint32(DaemonMessages::Capabilities) << quint32(daemonApp->powerManager()->capabilities());
 
-                // send host name
-                SocketWriter(socket) << quint32(DaemonMessages::HostName) << daemonApp->hostName();
+                    // send host name
+                    SocketWriter(socket) << quint32(DaemonMessages::HostName) << daemonApp->hostName();
 
-                // emit signal
-                emit connected();
-            }
-            break;
-            case GreeterMessages::Login: {
-                // log message
-                qDebug() << "Message received from greeter: Login";
+                    // emit signal
+                    emit connected();
+                }
+                break;
+                case GreeterMessages::Login: {
+                    // log message
+                    qDebug() << "Message received from greeter: Login";
 
-                // read username, pasword etc.
-                QString user, password, filename;
-                Session session;
-                input >> user >> password >> session;
+                    // read username, pasword etc.
+                    QString user, password, filename;
+                    Session session;
+                    input >> user >> password >> session;
 
-                // emit signal
-                emit login(socket, user, password, session);
-            }
-            break;
-            case GreeterMessages::PowerOff: {
-                // log message
-                qDebug() << "Message received from greeter: PowerOff";
+                    // emit signal
+                    emit login(socket, user, password, session);
+                }
+                break;
+                case GreeterMessages::PowerOff: {
+                    // log message
+                    qDebug() << "Message received from greeter: PowerOff";
 
-                // power off
-                daemonApp->powerManager()->powerOff();
-            }
-            break;
-            case GreeterMessages::Reboot: {
-                // log message
-                qDebug() << "Message received from greeter: Reboot";
+                    // power off
+                    daemonApp->powerManager()->powerOff();
+                }
+                break;
+                case GreeterMessages::Reboot: {
+                    // log message
+                    qDebug() << "Message received from greeter: Reboot";
 
-                // reboot
-                daemonApp->powerManager()->reboot();
-            }
-            break;
-            case GreeterMessages::Suspend: {
-                // log message
-                qDebug() << "Message received from greeter: Suspend";
+                    // reboot
+                    daemonApp->powerManager()->reboot();
+                }
+                break;
+                case GreeterMessages::Suspend: {
+                    // log message
+                    qDebug() << "Message received from greeter: Suspend";
 
-                // suspend
-                daemonApp->powerManager()->suspend();
-            }
-            break;
-            case GreeterMessages::Hibernate: {
-                // log message
-                qDebug() << "Message received from greeter: Hibernate";
+                    // suspend
+                    daemonApp->powerManager()->suspend();
+                }
+                break;
+                case GreeterMessages::Hibernate: {
+                    // log message
+                    qDebug() << "Message received from greeter: Hibernate";
 
-                // hibernate
-                daemonApp->powerManager()->hibernate();
-            }
-            break;
-            case GreeterMessages::HybridSleep: {
-                // log message
-                qDebug() << "Message received from greeter: HybridSleep";
-
-                // hybrid sleep
-                daemonApp->powerManager()->hybridSleep();
-            }
-            break;
-            default: {
-                // log message
-                qWarning() << "Unknown message" << message;
+                    // hibernate
+                    daemonApp->powerManager()->hibernate();
+                }
+                break;
+                case GreeterMessages::HybridSleep: {
+                    // log message
+                    qDebug() << "Message received from greeter: HybridSleep";
+                    // hybrid sleep
+                    daemonApp->powerManager()->hybridSleep();
+                }
+                break;
+                default: {
+                    // log message
+                    qWarning() << "Unknown message" << message;
+                }
             }
         }
+
     }
 
     void SocketServer::loginFailed(QLocalSocket *socket) {
@@ -195,4 +199,8 @@ namespace SDDM {
     void SocketServer::loginSucceeded(QLocalSocket *socket) {
         SocketWriter(socket) << quint32(DaemonMessages::LoginSucceeded);
     }
+
+    void SocketServer::informationMessage(QLocalSocket *socket, const QString &message) {
+        SocketWriter(socket) << quint32(DaemonMessages::InformationMessage) << message;
+    }
 }
diff --git a/src/daemon/SocketServer.h b/src/daemon/SocketServer.h
index 0d12acb..0552e01 100644
--- a/src/daemon/SocketServer.h
+++ b/src/daemon/SocketServer.h
@@ -45,6 +45,8 @@ namespace SDDM {
         void newConnection();
         void readyRead();
 
+    public slots:
+        void informationMessage(QLocalSocket *socket, const QString &message);
         void loginFailed(QLocalSocket *socket);
         void loginSucceeded(QLocalSocket *socket);
 
diff --git a/src/daemon/Utils.h b/src/daemon/Utils.h
index 7de5a98..03170f8 100644
--- a/src/daemon/Utils.h
+++ b/src/daemon/Utils.h
@@ -26,11 +26,11 @@
 namespace SDDM {
 
 inline QString generateName(int length) {
-    QString digits = QStringLiteral("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
+    const QString digits = QStringLiteral("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ");
 
     // reserve space for name
     QString name;
-    name.reserve(length);
+    name.resize(length);
 
     // create random device
     std::random_device rd;
diff --git a/src/daemon/WaylandDisplayServer.cpp b/src/daemon/WaylandDisplayServer.cpp
new file mode 100644
index 0000000..02f2689
--- /dev/null
+++ b/src/daemon/WaylandDisplayServer.cpp
@@ -0,0 +1,76 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include "WaylandDisplayServer.h"
+
+namespace SDDM {
+
+WaylandDisplayServer::WaylandDisplayServer(Display *parent)
+    : DisplayServer(parent)
+{
+}
+
+WaylandDisplayServer::~WaylandDisplayServer()
+{
+    stop();
+}
+
+QString WaylandDisplayServer::sessionType() const
+{
+    return QStringLiteral("wayland");
+}
+
+void WaylandDisplayServer::setDisplayName(const QString &displayName)
+{
+    m_display = displayName;
+}
+
+bool WaylandDisplayServer::start()
+{
+    // Check flag
+    if (m_started)
+        return false;
+
+    // Set flag
+    m_started = true;
+    emit started();
+
+    return true;
+}
+
+void WaylandDisplayServer::stop()
+{
+    // Check flag
+    if (!m_started)
+        return;
+
+    // Reset flag
+    m_started = false;
+    emit stopped();
+}
+
+void WaylandDisplayServer::finished()
+{
+}
+
+void WaylandDisplayServer::setupDisplay()
+{
+}
+
+} // namespace SDDM
diff --git a/src/daemon/WaylandDisplayServer.h b/src/daemon/WaylandDisplayServer.h
new file mode 100644
index 0000000..a8d9826
--- /dev/null
+++ b/src/daemon/WaylandDisplayServer.h
@@ -0,0 +1,48 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef SDDM_WAYLANDDISPLAYSERVER_H
+#define SDDM_WAYLANDDISPLAYSERVER_H
+
+#include "DisplayServer.h"
+
+namespace SDDM {
+
+class WaylandDisplayServer : public DisplayServer
+{
+    Q_OBJECT
+    Q_DISABLE_COPY(WaylandDisplayServer)
+public:
+    explicit WaylandDisplayServer(Display *parent);
+    ~WaylandDisplayServer();
+
+    QString sessionType() const;
+
+    void setDisplayName(const QString &displayName);
+
+public Q_SLOTS:
+    bool start();
+    void stop();
+    void finished();
+    void setupDisplay();
+};
+
+} // namespace SDDM
+
+#endif // SDDM_WAYLANDDISPLAYSERVER_H
diff --git a/src/daemon/XorgDisplayServer.cpp b/src/daemon/XorgDisplayServer.cpp
index 5f93a1b..4a75662 100644
--- a/src/daemon/XorgDisplayServer.cpp
+++ b/src/daemon/XorgDisplayServer.cpp
@@ -23,7 +23,6 @@
 #include "Configuration.h"
 #include "DaemonApp.h"
 #include "Display.h"
-#include "SignalHandler.h"
 #include "Seat.h"
 
 #include <QDebug>
@@ -41,31 +40,9 @@
 
 namespace SDDM {
     XorgDisplayServer::XorgDisplayServer(Display *parent) : DisplayServer(parent) {
-        // get auth directory
-        QString authDir = QStringLiteral(RUNTIME_DIR);
-
-        // use "." as authdir in test mode
         if (daemonApp->testing())
-            authDir = QStringLiteral(".");
-
-        // create auth dir if not existing
-        QDir().mkpath(authDir);
-
-        // set auth path
-        m_authPath = QStringLiteral("%1/%2").arg(authDir).arg(QUuid::createUuid().toString());
-
-        // generate cookie
-        std::random_device rd;
-        std::mt19937 gen(rd());
-        std::uniform_int_distribution<> dis(0, 15);
-
-        // resever 32 bytes
-        m_cookie.reserve(32);
-
-        // create a random hexadecimal number
-        const char *digits = "0123456789abcdef";
-        for (int i = 0; i < 32; ++i)
-            m_cookie[i] = digits[dis(gen)];
+            m_xauth.setAuthDirectory(QStringLiteral("."));
+        m_xauth.setup();
     }
 
     XorgDisplayServer::~XorgDisplayServer() {
@@ -76,41 +53,16 @@ namespace SDDM {
         return m_display;
     }
 
-    const QString &XorgDisplayServer::authPath() const {
-        return m_authPath;
+    QString XorgDisplayServer::authPath() const {
+        return m_xauth.authPath();
     }
 
     QString XorgDisplayServer::sessionType() const {
         return QStringLiteral("x11");
     }
 
-    const QString &XorgDisplayServer::cookie() const {
-        return m_cookie;
-    }
-
-    bool XorgDisplayServer::addCookie(const QString &file) {
-        // log message
-        qDebug() << "Adding cookie to" << file;
-
-        // Touch file
-        QFile file_handler(file);
-        file_handler.open(QIODevice::Append);
-        file_handler.close();
-
-        QString cmd = QStringLiteral("%1 -f %2 -q").arg(mainConfig.X11.XauthPath.get()).arg(file);
-
-        // execute xauth
-        FILE *fp = popen(qPrintable(cmd), "w");
-
-        // check file
-        if (!fp)
-            return false;
-        fprintf(fp, "remove %s\n", qPrintable(m_display));
-        fprintf(fp, "add %s . %s\n", qPrintable(m_display), qPrintable(m_cookie));
-        fprintf(fp, "exit\n");
-
-        // close pipe
-        return pclose(fp) == 0;
+    const QByteArray XorgDisplayServer::cookie() const {
+        return m_xauth.cookie();
     }
 
     bool XorgDisplayServer::start() {
@@ -118,6 +70,11 @@ namespace SDDM {
         if (m_started)
             return false;
 
+        if (process) {
+            qCritical() << "Tried to start Xorg before previous instance exited";
+            return false;
+        }
+
         // create process
         process = new QProcess(this);
 
@@ -131,110 +88,101 @@ namespace SDDM {
         // For the X server's copy, the display number doesn't matter.
         // An empty file would result in no access control!
         m_display = QStringLiteral(":0");
-        if(!addCookie(m_authPath)) {
+        if(!m_xauth.addCookie(m_display)) {
             qCritical() << "Failed to write xauth file";
             return false;
         }
 
-        if (daemonApp->testing()) {
-            QStringList args;
-            QDir x11socketDir(QStringLiteral("/tmp/.X11-unix"));
-            int display = 100;
-            while (x11socketDir.exists(QStringLiteral("X%1").arg(display))) {
-                ++display;
-            }
-            m_display = QStringLiteral(":%1").arg(display);
-            args << m_display << QStringLiteral("-auth") << m_authPath << QStringLiteral("-br") << QStringLiteral("-noreset") << QStringLiteral("-screen") << QStringLiteral("800x600");
-            process->start(mainConfig.X11.XephyrPath.get(), args);
+        // set process environment
+        QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
+        env.insert(QStringLiteral("XCURSOR_THEME"), mainConfig.Theme.CursorTheme.get());
+        QString xcursorSize = mainConfig.Theme.CursorSize.get();
+        if (!xcursorSize.isEmpty())
+            env.insert(QStringLiteral("XCURSOR_SIZE"), xcursorSize);
+        process->setProcessEnvironment(env);
 
+        //create pipe for communicating with X server
+        //0 == read from X, 1== write to from X
+        int pipeFds[2];
+        if (pipe(pipeFds) != 0) {
+            qCritical("Could not create pipe to start X server");
+        }
 
-            // wait for display server to start
-            if (!process->waitForStarted()) {
-                // log message
-                qCritical() << "Failed to start display server process.";
-
-                // return fail
-                return false;
-            }
-            emit started();
-        } else {
-            // set process environment
-            QProcessEnvironment env = QProcessEnvironment::systemEnvironment();
-            env.insert(QStringLiteral("XCURSOR_THEME"), mainConfig.Theme.CursorTheme.get());
-            process->setProcessEnvironment(env);
-
-            //create pipe for communicating with X server
-            //0 == read from X, 1== write to from X
-            int pipeFds[2];
-            if (pipe(pipeFds) != 0) {
-                qCritical("Could not create pipe to start X server");
-            }
-
-            // start display server
-            QStringList args = mainConfig.X11.ServerArguments.get().split(QLatin1Char(' '), QString::SkipEmptyParts);
-            args << QStringLiteral("-auth") << m_authPath
+        // start display server
+        QStringList args;
+        if (!daemonApp->testing()) {
+            process->setProgram(mainConfig.X11.ServerPath.get());
+            args << mainConfig.X11.ServerArguments.get().split(QLatin1Char(' '), Qt::SkipEmptyParts)
                  << QStringLiteral("-background") << QStringLiteral("none")
-                 << QStringLiteral("-noreset")
-                 << QStringLiteral("-displayfd") << QString::number(pipeFds[1])
-                 << QStringLiteral("-seat") << displayPtr()->seat()->name();
-
-            if (displayPtr()->seat()->name() == QLatin1String("seat0")) {
-                args << QStringLiteral("vt%1").arg(displayPtr()->terminalId());
-            }
-            qDebug() << "Running:"
-                     << qPrintable(mainConfig.X11.ServerPath.get())
-                     << qPrintable(args.join(QLatin1Char(' ')));
-            process->start(mainConfig.X11.ServerPath.get(), args);
-
-            // wait for display server to start
-            if (!process->waitForStarted()) {
-                // log message
-                qCritical() << "Failed to start display server process.";
-
-                // return fail
-                close(pipeFds[0]);
-                return false;
-            }
-
-            // close the other side of pipe in our process, otherwise reading
-            // from it may stuck even X server exit.
-            close(pipeFds[1]);
-
-            QFile readPipe;
-
-            if (!readPipe.open(pipeFds[0], QIODevice::ReadOnly)) {
-                qCritical("Failed to open pipe to start X Server");
-
-                close(pipeFds[0]);
-                return false;
-            }
-            QByteArray displayNumber = readPipe.readLine();
-            if (displayNumber.size() < 2) {
-                // X server gave nothing (or a whitespace).
-                qCritical("Failed to read display number from pipe");
-
-                close(pipeFds[0]);
-                return false;
-            }
-            displayNumber.prepend(QByteArray(":"));
-            displayNumber.remove(displayNumber.size() -1, 1); // trim trailing whitespace
-            m_display = QString::fromLocal8Bit(displayNumber);
-
-            // close our pipe
+                 << QStringLiteral("-seat") << displayPtr()->seat()->name()
+                 << QStringLiteral("vt%1").arg(displayPtr()->terminalId());
+        } else {
+            process->setProgram(mainConfig.X11.XephyrPath.get());
+            args << QStringLiteral("-br")
+                 << QStringLiteral("-screen") << QStringLiteral("800x600");
+        }
+
+        args << QStringLiteral("-auth") << m_xauth.authPath()
+             << QStringLiteral("-noreset")
+             << QStringLiteral("-displayfd") << QString::number(pipeFds[1]);
+
+        process->setArguments(args);
+        qDebug() << "Running:"
+            << qPrintable(process->program())
+            << qPrintable(process->arguments().join(QLatin1Char(' ')));
+        process->start();
+
+        // wait for display server to start
+        if (!process->waitForStarted()) {
+            // log message
+            qCritical() << "Failed to start display server process.";
+
+            // return fail
+            close(pipeFds[0]);
+            return false;
+        }
+
+        // close the other side of pipe in our process, otherwise reading
+        // from it may stuck even X server exit.
+        close(pipeFds[1]);
+
+        QFile readPipe;
+
+        if (!readPipe.open(pipeFds[0], QIODevice::ReadOnly)) {
+            qCritical("Failed to open pipe to start X Server");
+
             close(pipeFds[0]);
+            stop();
+            return false;
+        }
+        QByteArray displayNumber = readPipe.readLine();
+        if (displayNumber.size() < 2) {
+            // X server gave nothing (or a whitespace).
+            qCritical("Failed to read display number from pipe");
 
-            emit started();
+            close(pipeFds[0]);
+            stop();
+            return false;
         }
+        displayNumber.prepend(QByteArray(":"));
+        displayNumber.remove(displayNumber.size() -1, 1); // trim trailing whitespace
+        m_display = QString::fromLocal8Bit(displayNumber);
+
+        // close our pipe
+        close(pipeFds[0]);
 
         // The file is also used by the greeter, which does care about the
         // display number. Write the proper entry, if it's different.
         if(m_display != QStringLiteral(":0")) {
-            if(!addCookie(m_authPath)) {
+            if(!m_xauth.addCookie(m_display)) {
                 qCritical() << "Failed to write xauth file";
+                stop();
                 return false;
             }
         }
-        changeOwner(m_authPath);
+        changeOwner(m_xauth.authPath());
+
+        emit started();
 
         // set flag
         m_started = true;
@@ -244,8 +192,7 @@ namespace SDDM {
     }
 
     void XorgDisplayServer::stop() {
-        // check flag
-        if (!m_started)
+        if (!process)
             return;
 
         // log message
@@ -255,11 +202,19 @@ namespace SDDM {
         process->terminate();
 
         // wait for finished
-        if (!process->waitForFinished(5000))
+        if (!process->waitForFinished(5000)) {
             process->kill();
+            process->waitForFinished(25000);
+        }
     }
 
     void XorgDisplayServer::finished() {
+        // clean up
+        if (process) {
+            process->deleteLater();
+            process = nullptr;
+        }
+
         // check flag
         if (!m_started)
             return;
@@ -270,7 +225,7 @@ namespace SDDM {
         // log message
         qDebug() << "Display server stopped.";
 
-        QString displayStopCommand = mainConfig.X11.DisplayStopCommand.get();
+        QStringList displayStopCommand = QProcess::splitCommand(mainConfig.X11.DisplayStopCommand.get());
 
         // create display setup script process
         QProcess *displayStopScript = new QProcess();
@@ -285,7 +240,8 @@ namespace SDDM {
 
         // start display stop script
         qDebug() << "Running display stop script " << displayStopCommand;
-        displayStopScript->start(displayStopCommand);
+        const auto program = displayStopCommand.takeFirst();
+        displayStopScript->start(program, displayStopCommand);
 
         // wait for finished
         if (!displayStopScript->waitForFinished(5000))
@@ -295,38 +251,35 @@ namespace SDDM {
         displayStopScript->deleteLater();
         displayStopScript = nullptr;
 
-        // clean up
-        process->deleteLater();
-        process = nullptr;
-
-        // remove authority file
-        QFile::remove(m_authPath);
-
         // emit signal
         emit stopped();
     }
 
     void XorgDisplayServer::setupDisplay() {
-        QString displayCommand = mainConfig.X11.DisplayCommand.get();
-
         // create cursor setup process
         QProcess *setCursor = new QProcess();
         // create display setup script process
         QProcess *displayScript = new QProcess();
 
+        const QString xcursorTheme = mainConfig.Theme.CursorTheme.get(),
+                      xcursorSize = mainConfig.Theme.CursorSize.get();
+
         // set process environment
         QProcessEnvironment env;
         env.insert(QStringLiteral("DISPLAY"), m_display);
         env.insert(QStringLiteral("HOME"), QStringLiteral("/"));
         env.insert(QStringLiteral("PATH"), mainConfig.Users.DefaultPath.get());
-        env.insert(QStringLiteral("XAUTHORITY"), m_authPath);
+        env.insert(QStringLiteral("XAUTHORITY"), m_xauth.authPath());
         env.insert(QStringLiteral("SHELL"), QStringLiteral("/bin/sh"));
-        env.insert(QStringLiteral("XCURSOR_THEME"), mainConfig.Theme.CursorTheme.get());
+        if (!xcursorTheme.isEmpty())
+            env.insert(QStringLiteral("XCURSOR_THEME"), xcursorTheme);
+        if (!xcursorSize.isEmpty())
+            env.insert(QStringLiteral("XCURSOR_SIZE"), xcursorSize);
         setCursor->setProcessEnvironment(env);
         displayScript->setProcessEnvironment(env);
 
         qDebug() << "Setting default cursor";
-        setCursor->start(QStringLiteral("xsetroot -cursor_name left_ptr"));
+        setCursor->start(QStringLiteral("xsetroot"), { QStringLiteral("-cursor_name"), QStringLiteral("left_ptr") });
 
         // delete setCursor on finish
         connect(setCursor, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished), setCursor, &QProcess::deleteLater);
@@ -337,9 +290,29 @@ namespace SDDM {
             setCursor->kill();
         }
 
+        // Unlike libXcursor, xcb-util-cursor no longer looks at XCURSOR_*. Set the resources.
+        if (!xcursorTheme.isEmpty() || !xcursorSize.isEmpty()) {
+            QProcess xrdbProcess;
+            xrdbProcess.setProcessEnvironment(env);
+            xrdbProcess.start(QStringLiteral("xrdb"), QStringList{QStringLiteral("-nocpp"), QStringLiteral("-merge")});
+            if (!xcursorTheme.isEmpty())
+                xrdbProcess.write(QStringLiteral("Xcursor.theme: %1\n").arg(xcursorTheme).toUtf8());
+
+            if (!xcursorSize.isEmpty())
+                xrdbProcess.write(QStringLiteral("Xcursor.size: %1\n").arg(xcursorSize).toUtf8());
+
+            xrdbProcess.closeWriteChannel();
+            if (!xrdbProcess.waitForFinished(1000)) {
+                qDebug() << "Could not set Xcursor resources" << xrdbProcess.error();
+                xrdbProcess.kill();
+            }
+        }
+
         // start display setup script
-        qDebug() << "Running display setup script " << displayCommand;
-        displayScript->start(displayCommand);
+        qDebug() << "Running display setup script " << mainConfig.X11.DisplayCommand.get();
+        QStringList displayCommand = QProcess::splitCommand(mainConfig.X11.DisplayCommand.get());
+        const QString program = displayCommand.takeFirst();
+        displayScript->start(program, displayCommand);
 
         // delete displayScript on finish
         connect(displayScript, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished), displayScript, &QProcess::deleteLater);
diff --git a/src/daemon/XorgDisplayServer.h b/src/daemon/XorgDisplayServer.h
index e97a0b5..de4d75a 100644
--- a/src/daemon/XorgDisplayServer.h
+++ b/src/daemon/XorgDisplayServer.h
@@ -22,6 +22,7 @@
 #define SDDM_XORGDISPLAYSERVER_H
 
 #include "DisplayServer.h"
+#include "XAuth.h"
 
 class QProcess;
 
@@ -34,13 +35,11 @@ namespace SDDM {
         ~XorgDisplayServer();
 
         const QString &display() const;
-        const QString &authPath() const;
+        QString authPath() const;
 
         QString sessionType() const;
 
-        const QString &cookie() const;
-
-        bool addCookie(const QString &file);
+        const QByteArray cookie() const;
 
     public slots:
         bool start();
@@ -49,8 +48,7 @@ namespace SDDM {
         void setupDisplay();
 
     private:
-        QString m_authPath;
-        QString m_cookie;
+        XAuth m_xauth;
 
         QProcess *process { nullptr };
 
diff --git a/src/daemon/XorgUserDisplayServer.cpp b/src/daemon/XorgUserDisplayServer.cpp
new file mode 100644
index 0000000..1e7c008
--- /dev/null
+++ b/src/daemon/XorgUserDisplayServer.cpp
@@ -0,0 +1,102 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include "Configuration.h"
+#include "DaemonApp.h"
+#include "Display.h"
+#include "Seat.h"
+#include "XorgUserDisplayServer.h"
+
+namespace SDDM {
+
+XorgUserDisplayServer::XorgUserDisplayServer(Display *parent)
+    : DisplayServer(parent)
+{
+}
+
+XorgUserDisplayServer::~XorgUserDisplayServer()
+{
+    stop();
+}
+
+QString XorgUserDisplayServer::sessionType() const
+{
+    return QStringLiteral("x11");
+}
+
+void XorgUserDisplayServer::setDisplayName(const QString &displayName)
+{
+    m_display = displayName;
+}
+
+QString XorgUserDisplayServer::command(Display *display)
+{
+    QStringList args;
+
+    if (daemonApp->testing()) {
+        args << mainConfig.X11.XephyrPath.get()
+             << QStringLiteral("-br")
+             << QStringLiteral("-screen") << QStringLiteral("800x600");
+    } else {
+        args << mainConfig.X11.ServerPath.get()
+             << mainConfig.X11.ServerArguments.get().split(QLatin1Char(' '), Qt::SkipEmptyParts)
+             << QStringLiteral("-background") << QStringLiteral("none")
+             << QStringLiteral("-seat") << display->seat()->name()
+             << QStringLiteral("-noreset")
+             << QStringLiteral("-keeptty")
+             << QStringLiteral("-novtswitch")
+             << QStringLiteral("-verbose") << QStringLiteral("3");
+    }
+
+    return args.join(QLatin1Char(' '));
+}
+
+bool XorgUserDisplayServer::start()
+{
+    // Check flag
+    if (m_started)
+        return false;
+
+    // Set flag
+    m_started = true;
+    emit started();
+
+    return true;
+}
+
+void XorgUserDisplayServer::stop()
+{
+    // Check flag
+    if (!m_started)
+        return;
+
+    // Reset flag
+    m_started = false;
+    emit stopped();
+}
+
+void XorgUserDisplayServer::finished()
+{
+}
+
+void XorgUserDisplayServer::setupDisplay()
+{
+}
+
+} // namespace SDDM
diff --git a/src/daemon/XorgUserDisplayServer.h b/src/daemon/XorgUserDisplayServer.h
new file mode 100644
index 0000000..aa7cbe4
--- /dev/null
+++ b/src/daemon/XorgUserDisplayServer.h
@@ -0,0 +1,53 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef SDDM_XORGUSERDISPLAYSERVER_H
+#define SDDM_XORGUSERDISPLAYSERVER_H
+
+#include "DisplayServer.h"
+#include "XAuth.h"
+
+class QProcess;
+
+namespace SDDM {
+
+class XorgUserDisplayServer : public DisplayServer
+{
+    Q_OBJECT
+    Q_DISABLE_COPY(XorgUserDisplayServer)
+public:
+    explicit XorgUserDisplayServer(Display *parent);
+    ~XorgUserDisplayServer();
+
+    QString sessionType() const;
+
+    void setDisplayName(const QString &displayName);
+
+    static QString command(Display *display);
+
+public Q_SLOTS:
+    bool start();
+    void stop();
+    void finished();
+    void setupDisplay();
+};
+
+} // namespace SDDM
+
+#endif // SDDM_XORGUSERDISPLAYSERVER_H
diff --git a/src/daemon/config.h.in b/src/daemon/config.h.in
new file mode 100644
index 0000000..b47ceb9
--- /dev/null
+++ b/src/daemon/config.h.in
@@ -0,0 +1,2 @@
+#pragma once
+static const int SDDM_INITIAL_VT = @SDDM_INITIAL_VT@;
diff --git a/src/greeter/CMakeLists.txt b/src/greeter/CMakeLists.txt
index 2752964..b9159c5 100644
--- a/src/greeter/CMakeLists.txt
+++ b/src/greeter/CMakeLists.txt
@@ -1,3 +1,14 @@
+if(QT_MAJOR_VERSION EQUAL "5")
+    # Keep the unversioned name for Qt5. When upgrading SDDM, the old daemon
+    # might still be running and only know about "sddm-greeter". Keeping the
+    # previous name around also helps users calling it directly.
+    set(GREETER_TARGET sddm-greeter)
+else()
+    set(GREETER_TARGET sddm-greeter-qt${QT_MAJOR_VERSION})
+endif()
+
+message(STATUS "Building greeter for Qt ${QT_MAJOR_VERSION} as ${GREETER_TARGET}")
+
 include_directories(
     "${CMAKE_SOURCE_DIR}/src/common"
     "${CMAKE_BINARY_DIR}/src/common"
@@ -8,6 +19,7 @@ set(GREETER_SOURCES
     ${CMAKE_SOURCE_DIR}/src/common/Configuration.cpp
     ${CMAKE_SOURCE_DIR}/src/common/ConfigReader.cpp
     ${CMAKE_SOURCE_DIR}/src/common/Session.cpp
+    ${CMAKE_SOURCE_DIR}/src/common/SignalHandler.cpp
     ${CMAKE_SOURCE_DIR}/src/common/SocketWriter.cpp
     ${CMAKE_SOURCE_DIR}/src/common/ThemeConfig.cpp
     ${CMAKE_SOURCE_DIR}/src/common/ThemeMetadata.cpp
@@ -18,25 +30,27 @@ set(GREETER_SOURCES
     ScreenModel.cpp
     SessionModel.cpp
     UserModel.cpp
+    waylandkeyboardbackend.cpp
+    waylandkeyboardbackend.h
     XcbKeyboardBackend.cpp
 )
 
 configure_file("theme.qrc" "theme.qrc")
+configure_file("theme/metadata.desktop.in" "theme/metadata.desktop" @ONLY)
 
-qt5_add_resources(RESOURCES ${CMAKE_CURRENT_BINARY_DIR}/theme.qrc)
+qt_add_resources(RESOURCES ${CMAKE_CURRENT_BINARY_DIR}/theme.qrc)
 
-add_executable(sddm-greeter ${GREETER_SOURCES} ${RESOURCES})
-target_link_libraries(sddm-greeter
-                      Qt5::Quick
+add_executable(${GREETER_TARGET} ${GREETER_SOURCES} ${RESOURCES})
+target_link_libraries(${GREETER_TARGET}
+                      Qt${QT_MAJOR_VERSION}::Quick
                       ${LIBXCB_LIBRARIES}
                       ${LIBXKB_LIBRARIES})
 
 if(JOURNALD_FOUND)
-    target_link_libraries(sddm-greeter ${JOURNALD_LIBRARIES})
+    target_link_libraries(${GREETER_TARGET} ${JOURNALD_LIBRARIES})
 endif()
 
 # Translations
-add_dependencies(sddm-greeter components-translation)
-add_dependencies(sddm-greeter themes-translation)
+add_dependencies(${GREETER_TARGET} components-translation themes-translation)
 
-install(TARGETS sddm-greeter DESTINATION "${CMAKE_INSTALL_BINDIR}")
+install(TARGETS ${GREETER_TARGET} DESTINATION "${CMAKE_INSTALL_BINDIR}")
diff --git a/src/greeter/GreeterApp.cpp b/src/greeter/GreeterApp.cpp
index bbce512..01613cc 100644
--- a/src/greeter/GreeterApp.cpp
+++ b/src/greeter/GreeterApp.cpp
@@ -24,6 +24,7 @@
 #include "Constants.h"
 #include "ScreenModel.h"
 #include "SessionModel.h"
+#include "SignalHandler.h"
 #include "ThemeConfig.h"
 #include "ThemeMetadata.h"
 #include "UserModel.h"
@@ -111,7 +112,7 @@ namespace SDDM {
         if (m_themeConfig)
             m_themeConfig->setTo(configFile);
         else
-            m_themeConfig = new ThemeConfig(configFile);
+            m_themeConfig = new ThemeConfig(configFile, this);
 
         const bool themeNeedsAllUsers = m_themeConfig->value(QStringLiteral("needsFullUserModel"), true).toBool();
         if(m_userModel && themeNeedsAllUsers && !m_userModel->containsAllUsers()) {
@@ -149,6 +150,7 @@ namespace SDDM {
         view->setResizeMode(QQuickView::SizeRootObjectToView);
         //view->setGeometry(QRect(QPoint(0, 0), screen->geometry().size()));
         view->setGeometry(screen->geometry());
+        view->setFlags(Qt::FramelessWindowHint);
         m_views.append(view);
 
         // remove the view when the screen is removed, but we
@@ -185,7 +187,7 @@ namespace SDDM {
         view->rootContext()->setContextProperty(QStringLiteral("sessionModel"), m_sessionModel);
         view->rootContext()->setContextProperty(QStringLiteral("screenModel"), screenModel);
         view->rootContext()->setContextProperty(QStringLiteral("userModel"), m_userModel);
-        view->rootContext()->setContextProperty(QStringLiteral("config"), *m_themeConfig);
+        view->rootContext()->setContextProperty(QStringLiteral("config"), m_themeConfig);
         view->rootContext()->setContextProperty(QStringLiteral("sddm"), m_proxy);
         view->rootContext()->setContextProperty(QStringLiteral("keyboard"), m_keyboard);
         view->rootContext()->setContextProperty(QStringLiteral("primaryScreen"), QGuiApplication::primaryScreen() == screen);
@@ -226,7 +228,7 @@ namespace SDDM {
 
         // show
         qDebug() << "Adding view for" << screen->name() << screen->geometry();
-        view->show();
+        view->showFullScreen();
 
         // activate windows for the primary screen to give focus to text fields
         if (QGuiApplication::primaryScreen() == screen)
@@ -258,14 +260,20 @@ namespace SDDM {
         }
 
         // Set font
-        QVariant fontEntry = mainConfig.Theme.Font.get();
-        QFont font = fontEntry.value<QFont>();
-        if (!fontEntry.toString().isEmpty())
-            QGuiApplication::setFont(font);
+        const QString fontStr = mainConfig.Theme.Font.get();
+        if (!fontStr.isEmpty()) {
+            QFont font;
+            if (font.fromString(fontStr)) {
+                QGuiApplication::setFont(font);
+            }
+        }
 
         // Set session model on proxy
         m_proxy->setSessionModel(m_sessionModel);
 
+        // If the socket ends, bail. There is not much we can do.
+        connect(m_proxy, &GreeterProxy::socketDisconnected, qGuiApp, &QCoreApplication::quit);
+
         // Create views
         const QList<QScreen *> screens = qGuiApp->primaryScreen()->virtualSiblings();
         for (QScreen *screen : screens)
@@ -296,9 +304,7 @@ namespace SDDM {
 
 int main(int argc, char **argv)
 {
-    // Install message handler
-    qInstallMessageHandler(SDDM::GreeterMessageHandler);
-
+    bool testMode = false;
     // We set an attribute based on the platform we run on.
     // We only know the platform after we constructed QGuiApplication
     // though, so we need to find it out ourselves.
@@ -307,14 +313,19 @@ int main(int argc, char **argv)
         if(qstrcmp(argv[i], "-platform") == 0) {
             platform = QString::fromUtf8(argv[i + 1]);
         }
+        testMode |= qstrcmp(argv[i], "--test-mode") == 0;
     }
     if (platform.isEmpty()) {
         platform = QString::fromUtf8(qgetenv("QT_QPA_PLATFORM"));
     }
     if (platform.isEmpty()) {
-        platform = QStringLiteral("xcb");
+        platform = qEnvironmentVariableIsSet("WAYLAND_DISPLAY") ? QStringLiteral("wayland") : QStringLiteral("xcb");
     }
 
+    // Install message handler
+    if (!testMode)
+        qInstallMessageHandler(SDDM::GreeterMessageHandler);
+
     // HiDPI
     bool hiDpiEnabled = false;
     if (platform == QStringLiteral("xcb"))
@@ -334,7 +345,29 @@ int main(int argc, char **argv)
         QSurfaceFormat::setDefaultFormat(format);
     }
 
+    // Some themes may use KDE components and that will automatically load KDE's
+    // crash handler which we don't want counterintuitively setting this env
+    // disables that handler
+    qputenv("KDE_DEBUG", "1");
+
+    // Qt IM module
+    QString inputMethod = SDDM::mainConfig.InputMethod.get();
+    // Using qtvirtualkeyboard as IM on wayland doesn't really work,
+    // it has to be done by the compositor instead.
+    if (platform.startsWith(QStringLiteral("wayland")) && inputMethod == QStringLiteral("qtvirtualkeyboard"))
+        inputMethod = QString{};
+
+    if (!inputMethod.isEmpty())
+        qputenv("QT_IM_MODULE", inputMethod.toLocal8Bit());
+
     QGuiApplication app(argc, argv);
+    SDDM::SignalHandler s;
+    QObject::connect(&s, &SDDM::SignalHandler::sigtermReceived, &app, [] {
+        QCoreApplication::instance()->exit(-1);
+    });
+    QObject::connect(&s, &SDDM::SignalHandler::sigintReceived, &app, [] {
+        QCoreApplication::instance()->exit(-1);
+    });
 
     QCommandLineParser parser;
     parser.setApplicationDescription(TR("SDDM greeter"));
diff --git a/src/greeter/GreeterProxy.cpp b/src/greeter/GreeterProxy.cpp
index 8fde3d9..d9a8e68 100644
--- a/src/greeter/GreeterProxy.cpp
+++ b/src/greeter/GreeterProxy.cpp
@@ -46,7 +46,7 @@ namespace SDDM {
         connect(d->socket, &QLocalSocket::connected, this, &GreeterProxy::connected);
         connect(d->socket, &QLocalSocket::disconnected, this, &GreeterProxy::disconnected);
         connect(d->socket, &QLocalSocket::readyRead, this, &GreeterProxy::readyRead);
-        connect(d->socket, QOverload<QLocalSocket::LocalSocketError>::of(&QLocalSocket::error), this, &GreeterProxy::error);
+        connect(d->socket, &QLocalSocket::errorOccurred, this, &GreeterProxy::error);
 
         // connect to server
         d->socket->connectToServer(socket);
@@ -138,6 +138,8 @@ namespace SDDM {
     void GreeterProxy::disconnected() {
         // log disconnection
         qDebug() << "Disconnected from the daemon.";
+
+        Q_EMIT socketDisconnected();
     }
 
     void GreeterProxy::error() {
@@ -204,6 +206,14 @@ namespace SDDM {
                     emit loginFailed();
                 }
                 break;
+                case DaemonMessages::InformationMessage: {
+                    QString message;
+                    input >> message;
+
+                    qDebug() << "Information Message received from daemon: " << message;
+                    emit informationMessage(message);
+                }
+                break;
                 default: {
                     // log message
                     qWarning() << "Unknown message received from daemon.";
diff --git a/src/greeter/GreeterProxy.h b/src/greeter/GreeterProxy.h
index ba2533f..5ccdbb2 100644
--- a/src/greeter/GreeterProxy.h
+++ b/src/greeter/GreeterProxy.h
@@ -71,6 +71,7 @@ namespace SDDM {
         void error();
 
     signals:
+        void informationMessage(const QString &message);
         void hostNameChanged(const QString &hostName);
         void canPowerOffChanged(bool canPowerOff);
         void canRebootChanged(bool canReboot);
@@ -78,6 +79,7 @@ namespace SDDM {
         void canHibernateChanged(bool canHibernate);
         void canHybridSleepChanged(bool canHybridSleep);
 
+        void socketDisconnected();
         void loginFailed();
         void loginSucceeded();
 
diff --git a/src/greeter/KeyboardModel.cpp b/src/greeter/KeyboardModel.cpp
index 7d40441..6ebfefb 100644
--- a/src/greeter/KeyboardModel.cpp
+++ b/src/greeter/KeyboardModel.cpp
@@ -1,4 +1,5 @@
 /***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
 * Copyright (c) 2013 Nikita Mikhaylov <nslqqq@gmail.com>
 *
 * This program is free software; you can redistribute it and/or modify
@@ -17,8 +18,11 @@
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ***************************************************************************/
 
+#include <QGuiApplication>
+
 #include "KeyboardModel.h"
 #include "KeyboardModel_p.h"
+#include "waylandkeyboardbackend.h"
 #include "XcbKeyboardBackend.h"
 
 namespace SDDM {
@@ -27,14 +31,21 @@ namespace SDDM {
     /**********************************************/
 
     KeyboardModel::KeyboardModel() : d(new KeyboardModelPrivate) {
-        m_backend = new XcbKeyboardBackend(d);
-        m_backend->init();
-        m_backend->connectEventsDispatcher(this);
+        if (QGuiApplication::platformName() == QLatin1String("xcb")) {
+            m_backend = new XcbKeyboardBackend(d);
+            m_backend->init();
+            m_backend->connectEventsDispatcher(this);
+        } else if (QGuiApplication::platformName().contains(QLatin1String("wayland"))) {
+            m_backend = new WaylandKeyboardBackend(d);
+            m_backend->init();
+        }
     }
 
     KeyboardModel::~KeyboardModel() {
-        m_backend->disconnect();
-        delete m_backend;
+        if (m_backend) {
+            m_backend->disconnect();
+            delete m_backend;
+        }
 
         for (QObject *layout: d->layouts) {
             delete layout;
@@ -49,7 +60,8 @@ namespace SDDM {
     void KeyboardModel::setNumLockState(bool state) {
         if (d->numlock.enabled != state) {
             d->numlock.enabled = state;
-            m_backend->sendChanges();
+            if (m_backend)
+                m_backend->sendChanges();
 
             emit numLockStateChanged();
         }
@@ -62,7 +74,8 @@ namespace SDDM {
     void KeyboardModel::setCapsLockState(bool state) {
         if (d->capslock.enabled != state) {
             d->capslock.enabled = state;
-            m_backend->sendChanges();
+            if (m_backend)
+                m_backend->sendChanges();
 
             emit capsLockStateChanged();
         }
@@ -79,7 +92,8 @@ namespace SDDM {
     void KeyboardModel::setCurrentLayout(int id) {
         if (d->layout_id != id) {
             d->layout_id = id;
-            m_backend->sendChanges();
+            if (m_backend)
+                m_backend->sendChanges();
 
             emit currentLayoutChanged();
         }
@@ -96,7 +110,8 @@ namespace SDDM {
         QList<QObject*> layouts_old = d->layouts;
 
         // Process events
-        m_backend->dispatchEvents();
+        if (m_backend)
+            m_backend->dispatchEvents();
 
         // Send updates
         if (caps_old != d->capslock.enabled)
diff --git a/src/greeter/KeyboardModel.h b/src/greeter/KeyboardModel.h
index ca57849..26cb4d4 100644
--- a/src/greeter/KeyboardModel.h
+++ b/src/greeter/KeyboardModel.h
@@ -71,7 +71,7 @@ namespace SDDM {
 
     private:
         KeyboardModelPrivate * d { nullptr };
-        KeyboardBackend * m_backend;
+        KeyboardBackend * m_backend = nullptr;
     };
 }
 
diff --git a/src/greeter/ScreenModel.cpp b/src/greeter/ScreenModel.cpp
index c003e98..ecf1978 100644
--- a/src/greeter/ScreenModel.cpp
+++ b/src/greeter/ScreenModel.cpp
@@ -58,7 +58,7 @@ namespace SDDM {
     }
 
     int ScreenModel::rowCount(const QModelIndex &parent) const {
-        return 1;
+        return parent.isValid() ? 0 : 1;
     }
 
     QVariant ScreenModel::data(const QModelIndex &index, int role) const {
diff --git a/src/greeter/ScreenModel.h b/src/greeter/ScreenModel.h
index 16284f2..1771e0b 100644
--- a/src/greeter/ScreenModel.h
+++ b/src/greeter/ScreenModel.h
@@ -40,6 +40,7 @@ namespace SDDM {
             NameRole = Qt::UserRole + 1,
             GeometryRole
         };
+        Q_ENUM(ScreenRoles)
 
         ScreenModel(QScreen *screen, QObject *parent = 0);
         ~ScreenModel();
diff --git a/src/greeter/SessionModel.cpp b/src/greeter/SessionModel.cpp
index 1953c76..d8698b7 100644
--- a/src/greeter/SessionModel.cpp
+++ b/src/greeter/SessionModel.cpp
@@ -22,6 +22,7 @@
 
 #include "Configuration.h"
 
+#include <QFileInfo>
 #include <QVector>
 #include <QProcessEnvironment>
 #include <QFileSystemWatcher>
@@ -35,27 +36,36 @@ namespace SDDM {
         }
 
         int lastIndex { 0 };
+        QStringList displayNames;
         QVector<Session *> sessions;
     };
 
     SessionModel::SessionModel(QObject *parent) : QAbstractListModel(parent), d(new SessionModelPrivate()) {
+        // Check for flag to show Wayland sessions
+        bool dri_active = QFileInfo::exists(QStringLiteral("/dev/dri"));
+
         // initial population
         beginResetModel();
-        populate(Session::WaylandSession, mainConfig.Wayland.SessionDir.get());
+        if (dri_active)
+            populate(Session::WaylandSession, mainConfig.Wayland.SessionDir.get());
         populate(Session::X11Session, mainConfig.X11.SessionDir.get());
         endResetModel();
 
         // refresh everytime a file is changed, added or removed
         QFileSystemWatcher *watcher = new QFileSystemWatcher(this);
-        connect(watcher, &QFileSystemWatcher::directoryChanged, [this](const QString &path) {
+        connect(watcher, &QFileSystemWatcher::directoryChanged, [this]() {
+            // Recheck for flag to show Wayland sessions
+            bool dri_active = QFileInfo::exists(QStringLiteral("/dev/dri"));
             beginResetModel();
             d->sessions.clear();
-            populate(Session::WaylandSession, mainConfig.Wayland.SessionDir.get());
+            d->displayNames.clear();
+            if (dri_active)
+                populate(Session::WaylandSession, mainConfig.Wayland.SessionDir.get());
             populate(Session::X11Session, mainConfig.X11.SessionDir.get());
             endResetModel();
         });
-        watcher->addPath(mainConfig.Wayland.SessionDir.get());
-        watcher->addPath(mainConfig.X11.SessionDir.get());
+        watcher->addPaths(mainConfig.Wayland.SessionDir.get());
+        watcher->addPaths(mainConfig.X11.SessionDir.get());
     }
 
     SessionModel::~SessionModel() {
@@ -75,12 +85,12 @@ namespace SDDM {
         return roleNames;
     }
 
-    const int SessionModel::lastIndex() const {
+    int SessionModel::lastIndex() const {
         return d->lastIndex;
     }
 
     int SessionModel::rowCount(const QModelIndex &parent) const {
-        return d->sessions.length();
+        return parent.isValid() ? 0 : d->sessions.length();
     }
 
     QVariant SessionModel::data(const QModelIndex &index, int role) const {
@@ -99,6 +109,8 @@ namespace SDDM {
         case TypeRole:
             return session->type();
         case NameRole:
+            if (d->displayNames.count(session->displayName()) > 1 && session->type() == Session::WaylandSession)
+                return tr("%1 (Wayland)").arg(session->displayName());
             return session->displayName();
         case ExecRole:
             return session->exec();
@@ -112,17 +124,18 @@ namespace SDDM {
         return QVariant();
     }
 
-    void SessionModel::populate(Session::Type type, const QString &path) {
+    void SessionModel::populate(Session::Type type, const QStringList &dirPaths) {
         // read session files
-        QDir dir(path);
-        dir.setNameFilters(QStringList() << QStringLiteral("*.desktop"));
-        dir.setFilter(QDir::Files);
+        QStringList sessions;
+        for (const auto &path: dirPaths) {
+            QDir dir = path;
+            dir.setNameFilters(QStringList() << QStringLiteral("*.desktop"));
+            dir.setFilter(QDir::Files);
+            sessions += dir.entryList();
+        }
         // read session
-        const auto sessions = dir.entryList();
-        for(const QString &session : sessions) {
-            if (!dir.exists(session))
-                continue;
-
+        sessions.removeDuplicates();
+        for (auto& session : qAsConst(sessions)) {
             Session *si = new Session(type, session);
             bool execAllowed = true;
             QFileInfo fi(si->tryExec());
@@ -144,10 +157,12 @@ namespace SDDM {
                 }
             }
             // add to sessions list
-            if (!si->isHidden() && !si->isNoDisplay() && execAllowed)
+            if (!si->isHidden() && !si->isNoDisplay() && execAllowed) {
+                d->displayNames.append(si->displayName());
                 d->sessions.push_back(si);
-            else
+            } else {
                 delete si;
+            }
         }
         // find out index of the last session
         for (int i = 0; i < d->sessions.size(); ++i) {
diff --git a/src/greeter/SessionModel.h b/src/greeter/SessionModel.h
index 2e2efa9..0f935c4 100644
--- a/src/greeter/SessionModel.h
+++ b/src/greeter/SessionModel.h
@@ -34,6 +34,7 @@ namespace SDDM {
         Q_OBJECT
         Q_DISABLE_COPY(SessionModel)
         Q_PROPERTY(int lastIndex READ lastIndex CONSTANT)
+        Q_PROPERTY(int count READ rowCount CONSTANT)
     public:
         enum SessionRole {
             DirectoryRole = Qt::UserRole + 1,
@@ -43,13 +44,14 @@ namespace SDDM {
             ExecRole,
             CommentRole
         };
+        Q_ENUM(SessionRole)
 
         SessionModel(QObject *parent = 0);
         ~SessionModel();
 
         QHash<int, QByteArray> roleNames() const override;
 
-        const int lastIndex() const;
+        int lastIndex() const;
 
         int rowCount(const QModelIndex &parent = QModelIndex()) const override;
         QVariant data(const QModelIndex &index, int role = Qt::DisplayRole) const override;
@@ -57,7 +59,7 @@ namespace SDDM {
     private:
         SessionModelPrivate *d { nullptr };
 
-        void populate(Session::Type type, const QString &path);
+        void populate(Session::Type type, const QStringList &dirPaths);
     };
 }
 
diff --git a/src/greeter/UserModel.cpp b/src/greeter/UserModel.cpp
index 7d7f9e2..c07bcba 100644
--- a/src/greeter/UserModel.cpp
+++ b/src/greeter/UserModel.cpp
@@ -136,14 +136,20 @@ namespace SDDM {
             if (avatarsEnabled) {
                 const QString userFace = QStringLiteral("%1/.face.icon").arg(user->homeDir);
                 const QString systemFace = QStringLiteral("%1/%2.face.icon").arg(facesDir).arg(user->name);
-                QString accountsServiceFace = QStringLiteral("/var/lib/AccountsService/icons/%1").arg(user->name);
+                const QString accountsServiceFace = QStringLiteral(ACCOUNTSSERVICE_DATA_DIR "/icons/%1").arg(user->name);
 
-                if (QFile::exists(userFace))
-                    user->icon = QStringLiteral("file://%1").arg(userFace);
+                QString userIcon;
+                // If the home is encrypted it takes a lot of time to open
+                // up the greeter, therefore we try the system avatar first
+                if (QFile::exists(systemFace))
+                    userIcon = systemFace;
+                else if (QFile::exists(userFace))
+                    userIcon = userFace;
                 else if (QFile::exists(accountsServiceFace))
-                    user->icon = accountsServiceFace;
-                else if (QFile::exists(systemFace))
-                    user->icon = QStringLiteral("file://%1").arg(systemFace);
+                    userIcon = accountsServiceFace;
+
+                if (!userIcon.isEmpty())
+                    user->icon = QStringLiteral("file://%1").arg(userIcon);
             }
         }
     }
@@ -164,7 +170,7 @@ namespace SDDM {
         return roleNames;
     }
 
-    const int UserModel::lastIndex() const {
+    int UserModel::lastIndex() const {
         return d->lastIndex;
     }
 
@@ -173,7 +179,7 @@ namespace SDDM {
     }
 
     int UserModel::rowCount(const QModelIndex &parent) const {
-        return d->users.length();
+        return parent.isValid() ? 0 : d->users.length();
     }
 
     QVariant UserModel::data(const QModelIndex &index, int role) const {
diff --git a/src/greeter/UserModel.h b/src/greeter/UserModel.h
index b63cf9a..96710f7 100644
--- a/src/greeter/UserModel.h
+++ b/src/greeter/UserModel.h
@@ -43,13 +43,14 @@ namespace SDDM {
             IconRole,
             NeedsPasswordRole
         };
+        Q_ENUM(UserRoles)
 
         UserModel(bool needAllUsers, QObject *parent = 0);
         ~UserModel();
 
         QHash<int, QByteArray> roleNames() const override;
 
-        const int lastIndex() const;
+        int lastIndex() const;
         QString lastUser() const;
 
         int rowCount(const QModelIndex &parent = QModelIndex()) const override;
diff --git a/src/greeter/XcbKeyboardBackend.cpp b/src/greeter/XcbKeyboardBackend.cpp
index 446059d..cf3dff5 100644
--- a/src/greeter/XcbKeyboardBackend.cpp
+++ b/src/greeter/XcbKeyboardBackend.cpp
@@ -19,6 +19,7 @@
 
 #include <QtCore/QDebug>
 #include <QtCore/QObject>
+#include <QtCore/QRegularExpression>
 
 #include "KeyboardModel.h"
 #include "KeyboardModel_p.h"
@@ -267,8 +268,7 @@ namespace SDDM {
     }
 
     QList<QString> XcbKeyboardBackend::parseShortNames(QString text) {
-        QRegExp re(QStringLiteral(R"(\+([a-z]+))"));
-        re.setCaseSensitivity(Qt::CaseInsensitive);
+        QRegularExpression re(QStringLiteral(R"(\+([a-z]+))"), QRegularExpression::CaseInsensitiveOption);
 
         QList<QString> res;
         QSet<QString> blackList; // blacklist wrong tokens
@@ -276,10 +276,11 @@ namespace SDDM {
 
         // Loop through matched substrings
         int pos = 0;
-        while ((pos = re.indexIn(text, pos)) != -1) {
-            if (!blackList.contains(re.cap(1)))
-                res << re.cap(1);
-            pos += re.matchedLength();
+        QRegularExpressionMatch match;
+        while ((match = re.match(text, pos)).hasMatch()) {
+            if (!blackList.contains(match.captured(1)))
+                res << match.captured(1);
+            pos += match.capturedLength();
         }
         return res;
     }
@@ -307,7 +308,7 @@ namespace SDDM {
     void XcbKeyboardBackend::connectEventsDispatcher(KeyboardModel *model) {
         // Setup events filter
         xcb_void_cookie_t cookie;
-        xcb_xkb_select_events_details_t foo;
+        xcb_xkb_select_events_details_t foo = {};
         xcb_generic_error_t *error = nullptr;
 
         cookie = xcb_xkb_select_events(m_conn, XCB_XKB_ID_USE_CORE_KBD,
diff --git a/src/greeter/theme.qrc b/src/greeter/theme.qrc
index efed011..299169e 100644
--- a/src/greeter/theme.qrc
+++ b/src/greeter/theme.qrc
@@ -7,7 +7,7 @@
     <file alias="Main.qml">${CMAKE_CURRENT_SOURCE_DIR}/theme/Main.qml</file>
     <file alias="reboot.png">${CMAKE_CURRENT_SOURCE_DIR}/theme/reboot.png</file>
     <file alias="shutdown.png">${CMAKE_CURRENT_SOURCE_DIR}/theme/shutdown.png</file>
-    <file alias="metadata.desktop">${CMAKE_CURRENT_SOURCE_DIR}/theme/metadata.desktop</file>
+    <file alias="metadata.desktop">${CMAKE_CURRENT_BINARY_DIR}/theme/metadata.desktop</file>
     <file alias="theme.conf">${CMAKE_CURRENT_SOURCE_DIR}/theme/theme.conf</file>
 </qresource>
 </RCC>
diff --git a/src/greeter/theme/Main.qml b/src/greeter/theme/Main.qml
index 7d9c6f7..257153b 100644
--- a/src/greeter/theme/Main.qml
+++ b/src/greeter/theme/Main.qml
@@ -40,18 +40,22 @@ Rectangle {
 
     Connections {
         target: sddm
-        onLoginSucceeded: {
+        function onLoginSucceeded() {
         }
 
-        onLoginFailed: {
+        function onLoginFailed() {
             txtMessage.text = textConstants.loginFailed
             listView.currentItem.password = ""
         }
+
+        function onInformationMessage(message) {
+            txtMessage.text = message
+        }
     }
 
     Background {
         anchors.fill: parent
-        source: "qrc:/theme/background.png"
+        source: "qrc:///theme/background.png"
         fillMode: Image.PreserveAspectCrop
         onStatusChanged: {
             if (status == Image.Error && source != config.defaultBackground) {
@@ -127,7 +131,7 @@ Rectangle {
                         anchors.left: parent.left
                         anchors.verticalCenter: parent.verticalCenter
                         anchors.margins: 10
-                        source: "angle-left.png"
+                        source: "qrc:///theme/angle-left.png"
                         onClicked: listView.decrementCurrentIndex()
 
                         KeyNavigation.backtab: btnShutdown; KeyNavigation.tab: listView
@@ -158,7 +162,7 @@ Rectangle {
                         anchors.right: parent.right
                         anchors.verticalCenter: parent.verticalCenter
                         anchors.margins: 10
-                        source: "angle-right.png"
+                        source: "qrc:///theme/angle-right.png"
                         onClicked: listView.incrementCurrentIndex()
                         KeyNavigation.backtab: listView; KeyNavigation.tab: session
                     }
@@ -218,7 +222,7 @@ Rectangle {
                     width: 245
                     anchors.verticalCenter: parent.verticalCenter
 
-                    arrowIcon: "angle-down.png"
+                    arrowIcon: "qrc:///theme/angle-down.png"
 
                     model: sessionModel
                     index: sessionModel.lastIndex
@@ -232,6 +236,8 @@ Rectangle {
                     height: parent.height
                     anchors.verticalCenter: parent.verticalCenter
 
+                    visible: layoutBox.visible
+
                     text: textConstants.layout
                     font.pixelSize: 16
                     verticalAlignment: Text.AlignVCenter
@@ -243,7 +249,9 @@ Rectangle {
                     anchors.verticalCenter: parent.verticalCenter
                     font.pixelSize: 14
 
-                    arrowIcon: "angle-down.png"
+                    visible: keyboard.enabled && keyboard.layouts.length > 0
+
+                    arrowIcon: "qrc:///theme/angle-down.png"
 
                     KeyNavigation.backtab: session; KeyNavigation.tab: btnShutdown
                 }
@@ -258,7 +266,7 @@ Rectangle {
                 ImageButton {
                     id: btnReboot
                     height: parent.height
-                    source: "reboot.png"
+                    source: "qrc:///theme/reboot.png"
 
                     visible: sddm.canReboot
 
@@ -270,7 +278,7 @@ Rectangle {
                 ImageButton {
                     id: btnShutdown
                     height: parent.height
-                    source: "shutdown.png"
+                    source: "qrc:///theme/shutdown.png"
 
                     visible: sddm.canPowerOff
 
diff --git a/src/greeter/theme/metadata.desktop b/src/greeter/theme/metadata.desktop.in
similarity index 92%
rename from src/greeter/theme/metadata.desktop
rename to src/greeter/theme/metadata.desktop.in
index a1c22ce..0a4c9f3 100644
--- a/src/greeter/theme/metadata.desktop
+++ b/src/greeter/theme/metadata.desktop.in
@@ -14,3 +14,4 @@ TranslationsDirectory=translations
 Email=abdurrahmanavci@gmail.com
 Theme-Id=maui
 Theme-API=2.0
+QtVersion=@QT_MAJOR_VERSION@
diff --git a/src/greeter/waylandkeyboardbackend.cpp b/src/greeter/waylandkeyboardbackend.cpp
new file mode 100644
index 0000000..c42bee6
--- /dev/null
+++ b/src/greeter/waylandkeyboardbackend.cpp
@@ -0,0 +1,118 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+* SPDX-FileCopyrightText: 2010 Andriy Rysin <rysin@kde.org>
+* SPDX-FileCopyrightText: 2022 Aleix Pol Gonzalez <aleixpol@kde.org>
+* SPDX-FileCopyrightText: 2022 Volker Krause <vkrause>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include <QDir>
+#include <QDebug>
+#include <QGuiApplication>
+#include <QInputMethod>
+
+#include "KeyboardModel.h"
+#include "KeyboardModel_p.h"
+#include "KeyboardLayout.h"
+#include "waylandkeyboardbackend.h"
+#include <qxmlstream.h>
+
+namespace SDDM {
+
+WaylandKeyboardBackend::WaylandKeyboardBackend(KeyboardModelPrivate *kmp)
+    : KeyboardBackend(kmp)
+{
+}
+
+WaylandKeyboardBackend::~WaylandKeyboardBackend()
+{
+}
+
+
+QList<QObject *> parseRules(const QString &filename, int &current)
+{
+    // FIXME: https://github.com/sddm/sddm/pull/1664#discussion_r1115361314
+    current = 0;
+    QFile file(filename);
+    qDebug() << "Parsing xkb rules from" << file.fileName();
+    if (!file.open(QFile::ReadOnly | QFile::Text)) {
+        qWarning() << "Cannot open the rules file" << file.fileName();
+        return {};
+    }
+
+    QList<QObject *> layouts;
+
+    QString lastName, lastDescription;
+
+    QStringList path;
+    QXmlStreamReader reader(&file);
+    while (!reader.atEnd()) {
+        const auto token = reader.readNext();
+        if (token == QXmlStreamReader::StartElement) {
+            path << reader.name().toString();
+            QString strPath = path.join(QLatin1String("/"));
+
+            if (strPath.endsWith(QLatin1String("layoutList/layout/configItem/name"))) {
+                lastName = reader.readElementText().trimmed();
+            } else if (strPath.endsWith(QLatin1String("layoutList/layout/configItem/description"))) {
+                // TODO: This should be translated using i18nd("xkeyboard-config", lastDescription)
+                lastDescription = reader.readElementText().trimmed();
+            }
+        }
+        // don't use token here, readElementText() above can have moved us forward meanwhile
+        if (reader.tokenType() == QXmlStreamReader::EndElement) {
+            const QString strPath = path.join(QLatin1String("/"));
+            if (strPath.endsWith(QLatin1String("layoutList/layout/configItem/description"))) {
+                layouts << new KeyboardLayout(lastName, lastDescription);
+            }
+            path.removeLast();
+        }
+    }
+
+    if (reader.hasError()) {
+        qWarning() << "Failed to parse the rules file" << file.fileName();
+        return {};
+    }
+    return layouts;
+}
+
+void WaylandKeyboardBackend::init()
+{
+    // TODO: We can't actually switch keyboard layout yet, so don't populate a list of layouts
+    // so that themes can know to not show the option to change layout
+    // d->layouts = parseRules(QStringLiteral("/usr/share/X11/xkb/rules/evdev.xml"), d->layout_id);
+    d->enabled = false;
+}
+
+void WaylandKeyboardBackend::disconnect()
+{
+}
+
+void WaylandKeyboardBackend::sendChanges()
+{
+}
+
+void WaylandKeyboardBackend::dispatchEvents()
+{
+}
+
+void WaylandKeyboardBackend::connectEventsDispatcher(KeyboardModel *model)
+{
+    Q_UNUSED(model);
+}
+
+} // namespace SDDM
diff --git a/src/greeter/waylandkeyboardbackend.h b/src/greeter/waylandkeyboardbackend.h
new file mode 100644
index 0000000..1ab4348
--- /dev/null
+++ b/src/greeter/waylandkeyboardbackend.h
@@ -0,0 +1,43 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef WAYLANDKEYBOARDBACKEND_H
+#define WAYLANDKEYBOARDBACKEND_H
+
+#include "KeyboardBackend.h"
+
+namespace SDDM {
+
+class WaylandKeyboardBackend : public KeyboardBackend
+{
+public:
+    WaylandKeyboardBackend(KeyboardModelPrivate *kmp);
+    virtual ~WaylandKeyboardBackend();
+
+    void init() override;
+    void disconnect() override;
+    void sendChanges() override;
+    void dispatchEvents() override;
+
+    void connectEventsDispatcher(KeyboardModel *model) override;
+};
+
+} // namespace SDDM
+
+#endif // WAYLANDKEYBOARDBACKEND_H
diff --git a/src/helper/Backend.cpp b/src/helper/Backend.cpp
index a324b39..5a1dd60 100644
--- a/src/helper/Backend.cpp
+++ b/src/helper/Backend.cpp
@@ -22,7 +22,6 @@
 #include "HelperApp.h"
 
 #include "backend/PamBackend.h"
-#include "backend/PasswdBackend.h"
 #include "Configuration.h"
 #include "UserSession.h"
 
@@ -43,38 +42,32 @@ namespace SDDM {
 
     Backend *Backend::get(HelperApp* parent)
     {
-    #ifdef USE_PAM
         return new PamBackend(parent);
-    #else
-        return new PasswdBackend(parent);
-    #endif
     }
 
     void Backend::setAutologin(bool on) {
         m_autologin = on;
     }
 
+    void Backend::setDisplayServer(bool on)
+    {
+        m_displayServer = on;
+    }
+
     void Backend::setGreeter(bool on) {
         m_greeter = on;
     }
 
     bool Backend::openSession() {
+        QProcessEnvironment env = m_app->session()->processEnvironment();
         struct passwd *pw;
         pw = getpwnam(qPrintable(qobject_cast<HelperApp*>(parent())->user()));
         if (pw) {
-            QProcessEnvironment env = m_app->session()->processEnvironment();
             env.insert(QStringLiteral("HOME"), QString::fromLocal8Bit(pw->pw_dir));
             env.insert(QStringLiteral("PWD"), QString::fromLocal8Bit(pw->pw_dir));
             env.insert(QStringLiteral("SHELL"), QString::fromLocal8Bit(pw->pw_shell));
             env.insert(QStringLiteral("USER"), QString::fromLocal8Bit(pw->pw_name));
             env.insert(QStringLiteral("LOGNAME"), QString::fromLocal8Bit(pw->pw_name));
-            if (env.contains(QStringLiteral("DISPLAY")) && !env.contains(QStringLiteral("XAUTHORITY"))) {
-                // determine Xauthority path
-                QString value = QStringLiteral("%1/%2")
-                        .arg(QString::fromLocal8Bit(pw->pw_dir))
-                        .arg(mainConfig.X11.UserAuthFile.get());
-                env.insert(QStringLiteral("XAUTHORITY"), value);
-            }
 #if defined(Q_OS_FREEBSD)
         /* get additional environment variables via setclassenvironment();
             this needs to be done here instead of in UserSession::setupChildProcess
@@ -111,9 +104,21 @@ namespace SDDM {
             QProcessEnvironment::systemEnvironment().insert(savedEnv);
         }
 #endif
-            // TODO: I'm fairly sure this shouldn't be done for PAM sessions, investigate!
-            m_app->session()->setProcessEnvironment(env);
         }
+        if (env.value(QStringLiteral("XDG_SESSION_CLASS")) == QLatin1String("greeter")) {
+            // Qt internally may load the xdg portal system early on, prevent this, we do not have a functional session running.
+            env.insert(QStringLiteral("QT_NO_XDG_DESKTOP_PORTAL"), QStringLiteral("1"));
+            for (const auto &entry : mainConfig.GreeterEnvironment.get()) {
+                const int index = entry.indexOf(QLatin1Char('='));
+                if (index < 0) {
+                    qWarning() << "Malformed environment variable" << entry;
+                    continue;
+                }
+                env.insert(entry.left(index), entry.mid(index + 1));
+            }
+        }
+        // TODO: I'm fairly sure this shouldn't be done for PAM sessions, investigate!
+        m_app->session()->setProcessEnvironment(env);
         return m_app->session()->start();
     }
 
diff --git a/src/helper/Backend.h b/src/helper/Backend.h
index b790e00..915d09c 100644
--- a/src/helper/Backend.h
+++ b/src/helper/Backend.h
@@ -36,6 +36,7 @@ namespace SDDM {
         static Backend *get(HelperApp *parent);
 
         void setAutologin(bool on = true);
+        void setDisplayServer(bool on = true);
         void setGreeter(bool on = true);
 
     public slots:
@@ -50,6 +51,7 @@ namespace SDDM {
         Backend(HelperApp *parent);
         HelperApp *m_app;
         bool m_autologin { false };
+        bool m_displayServer = false;
         bool m_greeter { false };
     };
 }
diff --git a/src/helper/CMakeLists.txt b/src/helper/CMakeLists.txt
index 8914ea7..f235a2c 100644
--- a/src/helper/CMakeLists.txt
+++ b/src/helper/CMakeLists.txt
@@ -3,6 +3,7 @@ include(CheckLibraryExists)
 include_directories(
     "${CMAKE_SOURCE_DIR}/src/common"
     "${CMAKE_SOURCE_DIR}/src/auth"
+    ${LIBXAU_INCLUDE_DIRS}
 )
 include_directories("${CMAKE_BINARY_DIR}/src/common")
 
@@ -10,38 +11,30 @@ set(HELPER_SOURCES
     ${CMAKE_SOURCE_DIR}/src/common/Configuration.cpp
     ${CMAKE_SOURCE_DIR}/src/common/ConfigReader.cpp
     ${CMAKE_SOURCE_DIR}/src/common/SafeDataStream.cpp
+    ${CMAKE_SOURCE_DIR}/src/common/XAuth.cpp
+    ${CMAKE_SOURCE_DIR}/src/common/SignalHandler.cpp
+    ${CMAKE_SOURCE_DIR}/src/auth/Auth.cpp
+    ${CMAKE_SOURCE_DIR}/src/auth/AuthRequest.cpp
+    ${CMAKE_SOURCE_DIR}/src/auth/AuthPrompt.cpp
     Backend.cpp
     HelperApp.cpp
     UserSession.cpp
 )
 
-# Different implementations of the VT switching code
-# (where the FreeBSD version does nothing).
-if(${CMAKE_SYSTEM} MATCHES "FreeBSD")
-    list(APPEND HELPER_SOURCES ${CMAKE_SOURCE_DIR}/src/common/VirtualTerminal_FreeBSD.cpp)
-else()
-    list(APPEND HELPER_SOURCES ${CMAKE_SOURCE_DIR}/src/common/VirtualTerminal.cpp)
-endif()
+list(APPEND HELPER_SOURCES ${CMAKE_SOURCE_DIR}/src/common/VirtualTerminal.cpp)
 
-if(PAM_FOUND)
-    set(HELPER_SOURCES
-        ${HELPER_SOURCES}
-        backend/PamHandle.cpp
-        backend/PamBackend.cpp
-    )
-else()
-    set(HELPER_SOURCES
-        ${HELPER_SOURCES}
-        backend/PasswdBackend.cpp
-    )
-
-   if(HAVE_GETSPNAM)
-       add_definitions(-DHAVE_GETSPNAM=1)
-   endif()
-endif()
+set(HELPER_SOURCES
+    ${HELPER_SOURCES}
+    backend/PamHandle.cpp
+    backend/PamBackend.cpp
+)
 
 add_executable(sddm-helper ${HELPER_SOURCES})
-target_link_libraries(sddm-helper Qt5::Network Qt5::DBus Qt5::Qml)
+target_link_libraries(sddm-helper
+                      Qt${QT_MAJOR_VERSION}::Network
+                      Qt${QT_MAJOR_VERSION}::DBus
+                      Qt${QT_MAJOR_VERSION}::Qml
+                      ${LIBXAU_LINK_LIBRARIES})
 if("${CMAKE_SYSTEM_NAME}" STREQUAL "FreeBSD")
     # On FreeBSD (possibly other BSDs as well), we want to use
     # setusercontext() to set up the login configuration from login.conf
@@ -60,8 +53,29 @@ else()
     target_link_libraries(sddm-helper crypt)
 endif()
 
+if (UTMPS_FOUND)
+    target_include_directories(sddm-helper SYSTEM PRIVATE ${UTMPS_INCLUDE_DIR})
+    target_link_libraries(sddm-helper ${UTMPS_LIBRARIES})
+endif (UTMPS_FOUND)
+
+install(TARGETS sddm-helper RUNTIME DESTINATION "${CMAKE_INSTALL_LIBEXECDIR}")
+
+add_executable(sddm-helper-start-wayland HelperStartWayland.cpp waylandsocketwatcher.cpp waylandhelper.cpp ${CMAKE_SOURCE_DIR}/src/common/SignalHandler.cpp)
+target_link_libraries(sddm-helper-start-wayland Qt${QT_MAJOR_VERSION}::Core)
+install(TARGETS sddm-helper-start-wayland RUNTIME DESTINATION "${CMAKE_INSTALL_LIBEXECDIR}")
+
+add_executable(sddm-helper-start-x11user HelperStartX11User.cpp xorguserhelper.cpp
+                                                ${CMAKE_SOURCE_DIR}/src/common/ConfigReader.cpp
+                                                ${CMAKE_SOURCE_DIR}/src/common/Configuration.cpp
+                                                ${CMAKE_SOURCE_DIR}/src/common/XAuth.cpp
+                                                ${CMAKE_SOURCE_DIR}/src/common/SignalHandler.cpp
+                                                )
+target_link_libraries(sddm-helper-start-x11user Qt${QT_MAJOR_VERSION}::Core
+                                                ${LIBXAU_LINK_LIBRARIES})
+install(TARGETS sddm-helper-start-x11user RUNTIME DESTINATION "${CMAKE_INSTALL_LIBEXECDIR}")
+
 if(JOURNALD_FOUND)
     target_link_libraries(sddm-helper ${JOURNALD_LIBRARIES})
+    target_link_libraries(sddm-helper-start-x11user ${JOURNALD_LIBRARIES})
+    target_link_libraries(sddm-helper-start-wayland ${JOURNALD_LIBRARIES})
 endif()
-
-install(TARGETS sddm-helper RUNTIME DESTINATION "${CMAKE_INSTALL_LIBEXECDIR}")
diff --git a/src/helper/HelperApp.cpp b/src/helper/HelperApp.cpp
index 672359a..32da42d 100644
--- a/src/helper/HelperApp.cpp
+++ b/src/helper/HelperApp.cpp
@@ -20,11 +20,13 @@
 
 #include "HelperApp.h"
 #include "Backend.h"
+#include "Configuration.h"
 #include "UserSession.h"
 #include "SafeDataStream.h"
 
 #include "MessageHandler.h"
 #include "VirtualTerminal.h"
+#include "SignalHandler.h"
 
 #include <QtCore/QTimer>
 #include <QtCore/QFile>
@@ -41,6 +43,7 @@
 #endif
 #include <utmpx.h>
 #include <QByteArray>
+#include <signal.h>
 
 namespace SDDM {
     HelperApp::HelperApp(int& argc, char** argv)
@@ -49,12 +52,16 @@ namespace SDDM {
             , m_session(new UserSession(this))
             , m_socket(new QLocalSocket(this)) {
         qInstallMessageHandler(HelperMessageHandler);
+        SignalHandler *s = new SignalHandler(this);
+        QObject::connect(s, &SignalHandler::sigtermReceived, m_session, [] {
+            QCoreApplication::instance()->exit(-1);
+        });
 
         QTimer::singleShot(0, this, SLOT(setUp()));
     }
 
     void HelperApp::setUp() {
-        QStringList args = QCoreApplication::arguments();
+        const QStringList args = QCoreApplication::arguments();
         QString server;
         int pos;
 
@@ -94,6 +101,16 @@ namespace SDDM {
             m_user = args[pos + 1];
         }
 
+        if ((pos = args.indexOf(QStringLiteral("--display-server"))) >= 0) {
+            if (pos >= args.length() - 1) {
+                qCritical() << "This application is not supposed to be executed manually";
+                exit(Auth::HELPER_OTHER_ERROR);
+                return;
+            }
+            m_session->setDisplayServerCommand(args[pos + 1]);
+            m_backend->setDisplayServer(true);
+        }
+
         if ((pos = args.indexOf(QStringLiteral("--autologin"))) >= 0) {
             m_backend->setAutologin(true);
         }
@@ -109,7 +126,7 @@ namespace SDDM {
         }
 
         connect(m_socket, &QLocalSocket::connected, this, &HelperApp::doAuth);
-        connect(m_session, QOverload<int>::of(&QProcess::finished), this, &HelperApp::sessionFinished);
+        connect(m_session, &UserSession::finished, this, &HelperApp::sessionFinished);
         m_socket->connectToServer(server, QIODevice::ReadWrite | QIODevice::Unbuffered);
     }
 
@@ -124,22 +141,23 @@ namespace SDDM {
             authenticated(QString());
 
             // write failed login to btmp
-            QProcessEnvironment env = m_session->processEnvironment();
-            QString displayId = env.value(QStringLiteral("DISPLAY"));
-            QString vt = env.value(QStringLiteral("XDG_VTNR"));
+            const QProcessEnvironment env = m_session->processEnvironment();
+            const QString displayId = env.value(QStringLiteral("DISPLAY"));
+            const QString vt = env.value(QStringLiteral("XDG_VTNR"));
             utmpLogin(vt, displayId, m_user, 0, false);
 
             exit(Auth::HELPER_AUTH_ERROR);
             return;
         }
 
+        Q_ASSERT(getuid() == 0);
         if (!m_backend->authenticate()) {
             authenticated(QString());
 
             // write failed login to btmp
-            QProcessEnvironment env = m_session->processEnvironment();
-            QString displayId = env.value(QStringLiteral("DISPLAY"));
-            QString vt = env.value(QStringLiteral("XDG_VTNR"));
+            const QProcessEnvironment env = m_session->processEnvironment();
+            const QString displayId = env.value(QStringLiteral("DISPLAY"));
+            const QString vt = env.value(QStringLiteral("XDG_VTNR"));
             utmpLogin(vt, displayId, m_user, 0, false);
 
             exit(Auth::HELPER_AUTH_ERROR);
@@ -151,11 +169,6 @@ namespace SDDM {
 
         if (!m_session->path().isEmpty()) {
             env.insert(m_session->processEnvironment());
-            // Allocate a new VT for the wayland session
-            if(env.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("wayland")) {
-                int vtNumber = VirtualTerminal::setUpNewVt();
-                env.insert(QStringLiteral("XDG_VTNR"), QString::number(vtNumber));
-            }
             m_session->setProcessEnvironment(env);
 
             if (!m_backend->openSession()) {
@@ -167,12 +180,11 @@ namespace SDDM {
             sessionOpened(true);
 
             // write successful login to utmp/wtmp
-            QProcessEnvironment env = m_session->processEnvironment();
-            QString displayId = env.value(QStringLiteral("DISPLAY"));
-            QString vt = env.value(QStringLiteral("XDG_VTNR"));
+            const QProcessEnvironment env = m_session->processEnvironment();
+            const QString displayId = env.value(QStringLiteral("DISPLAY"));
+            const QString vt = env.value(QStringLiteral("XDG_VTNR"));
             if (env.value(QStringLiteral("XDG_SESSION_CLASS")) != QLatin1String("greeter")) {
                 // cache pid for session end
-                m_session->setCachedProcessId(m_session->processId());
                 utmpLogin(vt, displayId, m_user, m_session->processId(), true);
             }
         }
@@ -182,17 +194,6 @@ namespace SDDM {
     }
 
     void HelperApp::sessionFinished(int status) {
-        m_backend->closeSession();
-
-        // write logout to utmp/wtmp
-        qint64 pid = m_session->cachedProcessId();
-        QProcessEnvironment env = m_session->processEnvironment();
-        if (env.value(QStringLiteral("XDG_SESSION_CLASS")) != QLatin1String("greeter")) {
-            QString vt = env.value(QStringLiteral("XDG_VTNR"));
-            QString displayId = env.value(QStringLiteral("DISPLAY"));
-            utmpLogout(vt, displayId, pid);
-        }
-
         exit(status);
     }
 
@@ -237,7 +238,7 @@ namespace SDDM {
         str >> m >> env >> m_cookie;
         if (m != AUTHENTICATED) {
             env = QProcessEnvironment();
-            m_cookie = QString();
+            m_cookie = {};
             qCritical() << "Received a wrong opcode instead of AUTHENTICATED:" << m;
         }
         return env;
@@ -255,6 +256,19 @@ namespace SDDM {
         }
     }
 
+    void HelperApp::displayServerStarted(const QString &displayName)
+    {
+        Msg m = Msg::MSG_UNKNOWN;
+        SafeDataStream str(m_socket);
+        str << Msg::DISPLAY_SERVER_STARTED << displayName;
+        str.send();
+        str.receive();
+        str >> m;
+        if (m != DISPLAY_SERVER_STARTED) {
+            qCritical() << "Received a wrong opcode instead of DISPLAY_SERVER_STARTED:" << m;
+        }
+    }
+
     UserSession *HelperApp::session() {
         return m_session;
     }
@@ -263,19 +277,33 @@ namespace SDDM {
         return m_user;
     }
 
-    const QString& HelperApp::cookie() const {
+    const QByteArray& HelperApp::cookie() const {
         return m_cookie;
     }
 
     HelperApp::~HelperApp() {
+        Q_ASSERT(getuid() == 0);
 
+        m_session->stop();
+        m_backend->closeSession();
+
+        // write logout to utmp/wtmp
+        qint64 pid = m_session->cachedProcessId();
+        if (pid < 0) {
+            return;
+        }
+        QProcessEnvironment env = m_session->processEnvironment();
+        if (env.value(QStringLiteral("XDG_SESSION_CLASS")) != QLatin1String("greeter")) {
+            QString vt = env.value(QStringLiteral("XDG_VTNR"));
+            QString displayId = env.value(QStringLiteral("DISPLAY"));
+            utmpLogout(vt, displayId, pid);
+        }
     }
 
     void HelperApp::utmpLogin(const QString &vt, const QString &displayName, const QString &user, qint64 pid, bool authSuccessful) {
-        struct utmpx entry;
+        struct utmpx entry { };
         struct timeval tv;
 
-        entry = { 0 };
         entry.ut_type = USER_PROCESS;
         entry.ut_pid = pid;
 
@@ -308,28 +336,15 @@ namespace SDDM {
             qWarning() << "Failed to write utmpx: " << strerror(errno);
         endutxent();
 
-#if !defined(Q_OS_FREEBSD)
-        // append to failed login database btmp
-        if (!authSuccessful) {
 #if defined(Q_OS_LINUX)
-            updwtmpx("/var/log/btmp", &entry);
-#endif
-        }
-
-        // append to wtmp
-        else {
-#if defined(Q_OS_LINUX)
-            updwtmpx("/var/log/wtmp", &entry);
-#endif
-        }
+        updwtmpx(authSuccessful ? "/var/log/wtmp" : "/var/log/btmp", &entry);
 #endif
     }
 
     void HelperApp::utmpLogout(const QString &vt, const QString &displayName, qint64 pid) {
-        struct utmpx entry;
+        struct utmpx entry { };
         struct timeval tv;
 
-        entry = { 0 };
         entry.ut_type = DEAD_PROCESS;
         entry.ut_pid = pid;
 
diff --git a/src/helper/HelperApp.h b/src/helper/HelperApp.h
index 3742df1..64ea0e1 100644
--- a/src/helper/HelperApp.h
+++ b/src/helper/HelperApp.h
@@ -40,13 +40,14 @@ namespace SDDM {
 
         UserSession *session();
         const QString &user() const;
-        const QString &cookie() const;
+        const QByteArray &cookie() const;
 
     public slots:
         Request request(const Request &request);
         void info(const QString &message, Auth::Info type);
         void error(const QString &message, Auth::Error type);
         QProcessEnvironment authenticated(const QString &user);
+        void displayServerStarted(const QString &displayName);
         void sessionOpened(bool success);
 
     private slots:
@@ -62,7 +63,7 @@ namespace SDDM {
         QLocalSocket *m_socket { nullptr };
         QString m_user { };
         // TODO: get rid of this in a nice clean way along the way with moving to user session X server
-        QString m_cookie { };
+        QByteArray m_cookie { };
 
         /*!
          \brief Write utmp/wtmp/btmp records when a user logs in
diff --git a/src/helper/HelperStartWayland.cpp b/src/helper/HelperStartWayland.cpp
new file mode 100644
index 0000000..a7cf735
--- /dev/null
+++ b/src/helper/HelperStartWayland.cpp
@@ -0,0 +1,72 @@
+/*
+ * Session process wrapper
+ * Copyright (C) 2021 Aleix Pol Gonzalez <aleixpol@kde.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+/**
+ * This application sole purpose is to launch a wayland compositor (first
+ * argument) and as soon as it's set up to launch a client (second argument)
+ */
+
+#include <unistd.h>
+#include <QCoreApplication>
+#include <QTextStream>
+#include <QDebug>
+#include "waylandhelper.h"
+#include "MessageHandler.h"
+#include <signal.h>
+#include "Auth.h"
+#include "SignalHandler.h"
+
+void WaylandHelperMessageHandler(QtMsgType type, const QMessageLogContext &context, const QString &msg) {
+    SDDM::messageHandler(type, context, QStringLiteral("WaylandHelper: "), msg);
+}
+
+int main(int argc, char** argv)
+{
+    qInstallMessageHandler(WaylandHelperMessageHandler);
+    QCoreApplication app(argc, argv);
+    using namespace SDDM;
+    SDDM::SignalHandler s;
+
+    Q_ASSERT(::getuid() != 0);
+    if (argc != 3) {
+        QTextStream(stderr) << "Wrong number of arguments\n";
+        return Auth::HELPER_OTHER_ERROR;
+    }
+
+    WaylandHelper helper;
+    QObject::connect(&s, &SDDM::SignalHandler::sigtermReceived, &app, [] {
+        QCoreApplication::exit(0);
+    });
+    QObject::connect(&app, &QCoreApplication::aboutToQuit, &helper, [&helper] {
+        qDebug("quitting helper-start-wayland");
+        helper.stop();
+    });
+    QObject::connect(&helper, &WaylandHelper::failed, &app, [&app] {
+        QTextStream(stderr) << "Failed to start wayland session" << Qt::endl;
+        app.exit(Auth::HELPER_SESSION_ERROR);
+    });
+
+    if (!helper.startCompositor(app.arguments()[1])) {
+        qWarning() << "SDDM was unable to start" << app.arguments()[1];
+        return Auth::HELPER_DISPLAYSERVER_ERROR;
+    }
+    helper.startGreeter(app.arguments()[2]);
+    return app.exec();
+}
diff --git a/src/helper/HelperStartX11User.cpp b/src/helper/HelperStartX11User.cpp
new file mode 100644
index 0000000..d77b78c
--- /dev/null
+++ b/src/helper/HelperStartX11User.cpp
@@ -0,0 +1,76 @@
+/*
+ * Session process wrapper
+ * Copyright (C) 2021 Aleix Pol Gonzalez <aleixpol@kde.org>
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License as published by
+ * the Free Software Foundation; either version 2 of the License, or
+ * (at your option) any later version.
+ *
+ * This program is distributed in the hope that it will be useful,
+ * but WITHOUT ANY WARRANTY; without even the implied warranty of
+ * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ * GNU General Public License for more details.
+ *
+ * You should have received a copy of the GNU General Public License along
+ * with this program; if not, write to the Free Software Foundation, Inc.,
+ * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+ *
+ */
+
+/**
+ * This application sole purpose is to launch an X11 rootless compositor compositor (first
+ * argument) and as soon as it's set up to launch a client (second argument)
+ */
+
+#include <unistd.h>
+#include <QCoreApplication>
+#include <QTextStream>
+#include <QProcess>
+#include <QDebug>
+#include "xorguserhelper.h"
+#include "MessageHandler.h"
+#include <signal.h>
+#include "SignalHandler.h"
+
+void X11UserHelperMessageHandler(QtMsgType type, const QMessageLogContext &context, const QString &msg) {
+    SDDM::messageHandler(type, context, QStringLiteral("X11UserHelper: "), msg);
+}
+
+int main(int argc, char** argv)
+{
+    qInstallMessageHandler(X11UserHelperMessageHandler);
+    QCoreApplication app(argc, argv);
+    SDDM::SignalHandler s;
+    QObject::connect(&s, &SDDM::SignalHandler::sigtermReceived, &app, [] {
+        QCoreApplication::instance()->exit(-1);
+    });
+
+    Q_ASSERT(::getuid() != 0);
+    if (argc != 3) {
+        QTextStream(stderr) << "Wrong number of arguments\n";
+        return 33;
+    }
+
+    using namespace SDDM;
+    XOrgUserHelper helper;
+    QObject::connect(&app, &QCoreApplication::aboutToQuit, &helper, [&helper] {
+        qDebug("quitting helper-start-x11");
+        helper.stop();
+    });
+    QObject::connect(&helper, &XOrgUserHelper::displayChanged, &app, [&helper, &app] {
+        qDebug() << "starting XOrg Greeter..." << helper.sessionEnvironment().value(QStringLiteral("DISPLAY"));
+        auto args = QProcess::splitCommand(app.arguments()[2]);
+
+        QProcess *process = new QProcess(&app);
+        process->setProcessChannelMode(QProcess::ForwardedChannels);
+        process->setProgram(args.takeFirst());
+        process->setArguments(args);
+        process->setProcessEnvironment(helper.sessionEnvironment());
+        process->start();
+        QObject::connect(process, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished), &app, &QCoreApplication::quit);
+    });
+
+    helper.start(app.arguments()[1]);
+    return app.exec();
+}
diff --git a/src/helper/UserSession.cpp b/src/helper/UserSession.cpp
index c9a8a20..03fd396 100644
--- a/src/helper/UserSession.cpp
+++ b/src/helper/UserSession.cpp
@@ -19,11 +19,16 @@
  *
  */
 
+#include <QSocketNotifier>
+
 #include "Configuration.h"
+#include "Constants.h"
 #include "UserSession.h"
 #include "HelperApp.h"
 #include "VirtualTerminal.h"
+#include "XAuth.h"
 
+#include <functional>
 #include <sys/types.h>
 #include <sys/ioctl.h>
 #include <errno.h>
@@ -34,34 +39,136 @@
 #include <unistd.h>
 #include <fcntl.h>
 #include <sched.h>
+#ifdef Q_OS_FREEBSD
+#include <login_cap.h>
+#endif
 
 namespace SDDM {
     UserSession::UserSession(HelperApp *parent)
-            : QProcess(parent) {
-    }
-
-    UserSession::~UserSession() {
-
+        : QProcess(parent)
+    {
+        connect(this, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished), this, &UserSession::finished);
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        setChildProcessModifier(std::bind(&UserSession::childModifier, this));
+#endif
     }
 
     bool UserSession::start() {
-        QProcessEnvironment env = qobject_cast<HelperApp*>(parent())->session()->processEnvironment();
-
-        if (env.value(QStringLiteral("XDG_SESSION_CLASS")) == QLatin1String("greeter")) {
-            QProcess::start(m_path);
-        } else if (env.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("x11")) {
-            const QString cmd = QStringLiteral("%1 \"%2\"").arg(mainConfig.X11.SessionCommand.get()).arg(m_path);
-            qInfo() << "Starting:" << cmd;
-            QProcess::start(cmd);
+        auto helper = qobject_cast<HelperApp*>(parent());
+        QProcessEnvironment env = processEnvironment();
+
+        bool isWaylandGreeter = false;
+
+        // If the Xorg display server was already started, write the passed
+        // auth cookie to /tmp/xauth_XXXXXX. This is done in the parent process
+        // so that it can clean up the file on session end.
+        if (env.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("x11")
+            && m_displayServerCmd.isEmpty()) {
+            // Create the Xauthority file
+            QByteArray cookie = helper->cookie();
+            if (cookie.isEmpty()) {
+                qCritical() << "Can't start X11 session with empty auth cookie";
+                return false;
+            }
+
+            // Place it into /tmp, which is guaranteed to be read/writeable by
+            // everyone while having the sticky bit set to avoid messing with
+            // other's files.
+            m_xauthFile.setFileTemplate(QStringLiteral("/tmp/xauth_XXXXXX"));
+
+            if (!m_xauthFile.open()) {
+                qCritical() << "Could not create the Xauthority file";
+                return false;
+            }
+
+            QString display = processEnvironment().value(QStringLiteral("DISPLAY"));
+
+            if (!XAuth::writeCookieToFile(display, m_xauthFile.fileName(), cookie)) {
+                qCritical() << "Failed to write the Xauthority file";
+                m_xauthFile.close();
+                return false;
+            }
+
+            env.insert(QStringLiteral("XAUTHORITY"), m_xauthFile.fileName());
+            setProcessEnvironment(env);
+        }
+
+        if (env.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("x11")) {
+            QString command;
+            if (env.value(QStringLiteral("XDG_SESSION_CLASS")) == QLatin1String("greeter")) {
+                command = m_path;
+            } else {
+                command = QStringLiteral("%1 \"%2\"").arg(mainConfig.X11.SessionCommand.get()).arg(m_path);
+            }
+
+            qInfo() << "Starting X11 session:" << m_displayServerCmd << command;
+            if (m_displayServerCmd.isEmpty()) {
+                auto args = QProcess::splitCommand(command);
+                setProgram(args.takeFirst());
+                setArguments(args);
+            } else {
+                setProgram(QStringLiteral(LIBEXEC_INSTALL_DIR "/sddm-helper-start-x11user"));
+                setArguments({m_displayServerCmd, command});
+            }
+            QProcess::start();
+
         } else if (env.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("wayland")) {
-            const QString cmd = QStringLiteral("%1 %2").arg(mainConfig.Wayland.SessionCommand.get()).arg(m_path);
-            qInfo() << "Starting:" << cmd;
-            QProcess::start(cmd);
+            if (env.value(QStringLiteral("XDG_SESSION_CLASS")) == QLatin1String("greeter")) {
+                Q_ASSERT(!m_displayServerCmd.isEmpty());
+                setProgram(QStringLiteral(LIBEXEC_INSTALL_DIR "/sddm-helper-start-wayland"));
+                setArguments({m_displayServerCmd, m_path});
+                QProcess::start();
+                isWaylandGreeter = true;
+            } else {
+                setProgram(mainConfig.Wayland.SessionCommand.get());
+                setArguments(QStringList{m_path});
+                qInfo() << "Starting Wayland user session:" << program() << m_path;
+                QProcess::start();
+                closeWriteChannel();
+                closeReadChannel(QProcess::StandardOutput);
+            }
         } else {
             qCritical() << "Unable to run user session: unknown session type";
         }
 
-        return waitForStarted();
+        const bool started = waitForStarted();
+        m_cachedProcessId = processId();
+        if (started) {
+            return true;
+        } else if (isWaylandGreeter) {
+            // This is probably fine, we need the compositor to start first
+            return true;
+        }
+
+        return false;
+    }
+
+    void UserSession::stop()
+    {
+        if (state() != QProcess::NotRunning) {
+            terminate();
+            const bool isGreeter = processEnvironment().value(QStringLiteral("XDG_SESSION_CLASS")) == QLatin1String("greeter");
+
+            // Wait longer for a session than a greeter
+            if (!waitForFinished(isGreeter ? 5000 : 60000)) {
+                kill();
+                if (!waitForFinished(5000)) {
+                    qWarning() << "Could not fully finish the process" << program();
+                }
+            }
+        } else {
+            Q_EMIT finished(Auth::HELPER_OTHER_ERROR);
+        }
+    }
+
+    QString UserSession::displayServerCommand() const
+    {
+        return m_displayServerCmd;
+    }
+
+    void UserSession::setDisplayServerCommand(const QString &command)
+    {
+        m_displayServerCmd = command;
     }
 
     void UserSession::setPath(const QString& path) {
@@ -72,22 +179,30 @@ namespace SDDM {
         return m_path;
     }
 
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+    void UserSession::childModifier() {
+#else
     void UserSession::setupChildProcess() {
+#endif
         // Session type
         QString sessionType = processEnvironment().value(QStringLiteral("XDG_SESSION_TYPE"));
+        QString sessionClass = processEnvironment().value(QStringLiteral("XDG_SESSION_CLASS"));
+        const bool hasDisplayServer = !m_displayServerCmd.isEmpty();
+        const bool x11UserSession = sessionType == QLatin1String("x11") && sessionClass == QLatin1String("user");
+        const bool waylandUserSession = sessionType == QLatin1String("wayland") && sessionClass == QLatin1String("user");
 
-        // For Wayland sessions we leak the VT into the session as stdin so
-        // that it stays open without races
-        if (sessionType == QLatin1String("wayland")) {
+        // When the display server is part of the session, we leak the VT into
+        // the session as stdin so that it stays open without races
+        if (hasDisplayServer || waylandUserSession) {
             // open VT and get the fd
             int vtNumber = processEnvironment().value(QStringLiteral("XDG_VTNR")).toInt();
-            QString ttyString = QStringLiteral("/dev/tty%1").arg(vtNumber);
+            QString ttyString = VirtualTerminal::path(vtNumber);
             int vtFd = ::open(qPrintable(ttyString), O_RDWR | O_NOCTTY);
 
             // when this is true we'll take control of the tty
             bool takeControl = false;
 
-            if (vtFd > 0) {
+            if (vtNumber > 0 && vtFd > 0) {
                 dup2(vtFd, STDIN_FILENO);
                 ::close(vtFd);
                 takeControl = true;
@@ -101,18 +216,20 @@ namespace SDDM {
             if (setsid() < 0) {
                 qCritical("Failed to set pid %lld as leader of the new session and process group: %s",
                           QCoreApplication::applicationPid(), strerror(errno));
-                exit(Auth::HELPER_OTHER_ERROR);
+                _exit(Auth::HELPER_OTHER_ERROR);
             }
 
             // take control of the tty
             if (takeControl) {
                 if (ioctl(STDIN_FILENO, TIOCSCTTY) < 0) {
-                    qCritical("Failed to take control of the tty: %s", strerror(errno));
-                    exit(Auth::HELPER_OTHER_ERROR);
+                    const auto error = strerror(errno);
+                    qCritical().nospace() << "Failed to take control of " << ttyString << " (" << QFileInfo(ttyString).owner() << "): " << error;
+                    _exit(Auth::HELPER_TTY_ERROR);
                 }
             }
 
-            VirtualTerminal::jumpToVt(vtNumber, false);
+            if (vtNumber > 0)
+                VirtualTerminal::jumpToVt(vtNumber, x11UserSession);
         }
 
 #ifdef Q_OS_LINUX
@@ -140,8 +257,10 @@ namespace SDDM {
         if (bufsize == -1)
             bufsize = 16384;
         QScopedPointer<char, QScopedPointerPodDeleter> buffer(static_cast<char*>(malloc(bufsize)));
-        if (buffer.isNull())
+        if (buffer.isNull()) {
+            qCritical() << "Could not allocate buffer of size" << bufsize;
             exit(Auth::HELPER_OTHER_ERROR);
+        }
         int err = getpwnam_r(username.constData(), &pw, buffer.data(), bufsize, &rpw);
         if (rpw == NULL) {
             if (err == 0)
@@ -150,13 +269,26 @@ namespace SDDM {
                 qCritical() << "getpwnam_r(" << username << ") failed with error: " << strerror(err);
             exit(Auth::HELPER_OTHER_ERROR);
         }
+
+        const int xauthHandle = m_xauthFile.handle();
+        if (xauthHandle != -1 && fchown(xauthHandle, pw.pw_uid, pw.pw_gid) != 0) {
+            qCritical() << "fchown failed for" << m_xauthFile.fileName();
+            exit(Auth::HELPER_OTHER_ERROR);
+        }
+
+#if defined(Q_OS_FREEBSD)
+        // execve() uses the environment prepared in Backend::openSession(),
+        // therefore environment variables which are set here are ignored.
+        if (setusercontext(NULL, &pw, pw.pw_uid, LOGIN_SETALL) != 0) {
+            qCritical() << "setusercontext(NULL, *, " << pw.pw_uid << ", LOGIN_SETALL) failed for user: " << username;
+            exit(Auth::HELPER_OTHER_ERROR);
+        }
+#else
         if (setgid(pw.pw_gid) != 0) {
             qCritical() << "setgid(" << pw.pw_gid << ") failed for user: " << username;
             exit(Auth::HELPER_OTHER_ERROR);
         }
 
-#ifdef USE_PAM
-
         // fetch ambient groups from PAM's environment;
         // these are set by modules such as pam_groups.so
         int n_pam_groups = getgroups(0, NULL);
@@ -175,13 +307,13 @@ namespace SDDM {
         // fetch session's user's groups
         int n_user_groups = 0;
         gid_t *user_groups = NULL;
-        if (-1 == getgrouplist(username.constData(), pw.pw_gid,
+        if (-1 == getgrouplist(pw.pw_name, pw.pw_gid,
                                NULL, &n_user_groups)) {
             user_groups = new gid_t[n_user_groups];
-            if ((n_user_groups = getgrouplist(username.constData(),
+            if ((n_user_groups = getgrouplist(pw.pw_name,
                                               pw.pw_gid, user_groups,
                                               &n_user_groups)) == -1 ) {
-                qCritical() << "getgrouplist(" << username << ", " << pw.pw_gid
+                qCritical() << "getgrouplist(" << pw.pw_name << ", " << pw.pw_gid
                             << ") failed";
                 exit(Auth::HELPER_OTHER_ERROR);
             }
@@ -206,99 +338,54 @@ namespace SDDM {
         delete[] pam_groups;
         delete[] user_groups;
 
-#else
-
-        if (initgroups(pw.pw_name, pw.pw_gid) != 0) {
-            qCritical() << "initgroups(" << pw.pw_name << ", " << pw.pw_gid << ") failed for user: " << username;
-            exit(Auth::HELPER_OTHER_ERROR);
-        }
-
-#endif /* USE_PAM */
-
         if (setuid(pw.pw_uid) != 0) {
             qCritical() << "setuid(" << pw.pw_uid << ") failed for user: " << username;
             exit(Auth::HELPER_OTHER_ERROR);
         }
+#endif /* Q_OS_FREEBSD */
         if (chdir(pw.pw_dir) != 0) {
             qCritical() << "chdir(" << pw.pw_dir << ") failed for user: " << username;
             qCritical() << "verify directory exist and has sufficient permissions";
             exit(Auth::HELPER_OTHER_ERROR);
         }
-        const QString homeDir = QString::fromLocal8Bit(pw.pw_dir);
 
-        //we cannot use setStandardError file as this code is run in the child process
-        //we want to redirect after we setuid so that the log file is owned by the user
-
-        // determine stderr log file based on session type
-        QString sessionLog = QStringLiteral("%1/%2")
-                .arg(homeDir)
-                .arg(sessionType == QLatin1String("x11")
-                     ? mainConfig.X11.SessionLogFile.get()
-                     : mainConfig.Wayland.SessionLogFile.get());
-
-        // create the path
-        QFileInfo finfo(sessionLog);
-        QDir().mkpath(finfo.absolutePath());
-
-        //swap the stderr pipe of this subprcess into a file
-        int fd = ::open(qPrintable(sessionLog), O_WRONLY | O_CREAT | O_TRUNC, 0600);
-        if (fd >= 0)
-        {
-            dup2 (fd, STDERR_FILENO);
-            ::close(fd);
-        } else {
-            qWarning() << "Could not open stderr to" << sessionLog;
-        }
-
-        //redirect any stdout to /dev/null
-        fd = ::open("/dev/null", O_WRONLY);
-        if (fd >= 0)
-        {
-            dup2 (fd, STDOUT_FILENO);
-            ::close(fd);
-        } else {
-            qWarning() << "Could not redirect stdout";
-        }
-
-        // set X authority for X11 sessions only
-        if (sessionType != QLatin1String("x11"))
-            return;
-        QString cookie = qobject_cast<HelperApp*>(parent())->cookie();
-        if (!cookie.isEmpty()) {
-            QString file = processEnvironment().value(QStringLiteral("XAUTHORITY"));
-            QString display = processEnvironment().value(QStringLiteral("DISPLAY"));
-            qDebug() << "Adding cookie to" << file;
+        if (sessionClass != QLatin1String("greeter")) {
+            //we cannot use setStandardError file as this code is run in the child process
+            //we want to redirect after we setuid so that the log file is owned by the user
 
+            // determine stderr log file based on session type
+            QString sessionLog = QStringLiteral("%1/%2")
+                    .arg(QString::fromLocal8Bit(pw.pw_dir))
+                    .arg(sessionType == QLatin1String("x11")
+                         ? mainConfig.X11.SessionLogFile.get()
+                         : mainConfig.Wayland.SessionLogFile.get());
 
             // create the path
-            QFileInfo finfo(file);
+            QFileInfo finfo(sessionLog);
             QDir().mkpath(finfo.absolutePath());
 
-            QFile file_handler(file);
-            file_handler.open(QIODevice::Append);
-            file_handler.close();
+            //swap the stderr pipe of this subprcess into a file
+            int fd = ::open(qPrintable(sessionLog), O_WRONLY | O_CREAT | O_TRUNC, 0600);
+            if (fd >= 0)
+            {
+                dup2 (fd, STDERR_FILENO);
+                ::close(fd);
+            } else {
+                qWarning() << "Could not open stderr to" << sessionLog;
+            }
 
-            QString cmd = QStringLiteral("%1 -f %2 -q").arg(mainConfig.X11.XauthPath.get()).arg(file);
-
-            // execute xauth
-            FILE *fp = popen(qPrintable(cmd), "w");
-
-            // check file
-            if (!fp)
-                return;
-            fprintf(fp, "remove %s\n", qPrintable(display));
-            fprintf(fp, "add %s . %s\n", qPrintable(display), qPrintable(cookie));
-            fprintf(fp, "exit\n");
-
-            // close pipe
-            pclose(fp);
+            //redirect any stdout to /dev/null
+            fd = ::open("/dev/null", O_WRONLY);
+            if (fd >= 0)
+            {
+                dup2 (fd, STDOUT_FILENO);
+                ::close(fd);
+            } else {
+                qWarning() << "Could not redirect stdout";
+            }
         }
     }
 
-    void UserSession::setCachedProcessId(qint64 pid) {
-        m_cachedProcessId = pid;
-    }
-
     qint64 UserSession::cachedProcessId() {
         return m_cachedProcessId;
     }
diff --git a/src/helper/UserSession.h b/src/helper/UserSession.h
index 7069084..ecaef86 100644
--- a/src/helper/UserSession.h
+++ b/src/helper/UserSession.h
@@ -23,42 +23,59 @@
 #define SDDM_AUTH_SESSION_H
 
 #include <QtCore/QObject>
-#include <QtCore/QString>
 #include <QtCore/QProcess>
+#include <QtCore/QTemporaryFile>
 
 namespace SDDM {
     class HelperApp;
+    class XOrgUserHelper;
+    class WaylandHelper;
     class UserSession : public QProcess
     {
         Q_OBJECT
     public:
         explicit UserSession(HelperApp *parent);
-        virtual ~UserSession();
 
         bool start();
+        void stop();
+
+        QString displayServerCommand() const;
+        void setDisplayServerCommand(const QString &command);
 
         void setPath(const QString &path);
         QString path() const;
 
-        /*!
-         \brief Sets m_cachedProcessId. Needed for getting the PID of a finished UserSession
-                and calling HelperApp::utmpLogout
-         \param pid  The process ID
-        */
-        void setCachedProcessId(qint64 pid);
-
         /*!
          \brief Gets m_cachedProcessId
          \return  The cached process ID
         */
         qint64 cachedProcessId();
 
+
+    Q_SIGNALS:
+        void finished(int exitCode);
+
+#if QT_VERSION < QT_VERSION_CHECK(6, 0, 0)
     protected:
-        void setupChildProcess();
+        void setupChildProcess() override;
+#endif
 
     private:
+        void setup();
+
+#if QT_VERSION >= QT_VERSION_CHECK(6, 0, 0)
+        // Don't call it directly, it will be invoked by the child process only
+        void childModifier();
+#endif
+
         QString m_path { };
-        qint64 m_cachedProcessId;
+        QTemporaryFile m_xauthFile;
+        QString m_displayServerCmd;
+
+        /*!
+         Needed for getting the PID of a finished UserSession and calling HelperApp::utmpLogout
+        */
+        qint64 m_cachedProcessId = -1;
     };
 }
 
diff --git a/src/helper/backend/PamBackend.cpp b/src/helper/backend/PamBackend.cpp
index f86d77d..f371c33 100644
--- a/src/helper/backend/PamBackend.cpp
+++ b/src/helper/backend/PamBackend.cpp
@@ -23,9 +23,11 @@
 #include "HelperApp.h"
 #include "UserSession.h"
 #include "Auth.h"
+#include "VirtualTerminal.h"
 
 #include <QtCore/QString>
 #include <QtCore/QDebug>
+#include <QtCore/QRegularExpression>
 
 #include <stdlib.h>
 
@@ -58,14 +60,14 @@ namespace SDDM {
     AuthPrompt::Type PamData::detectPrompt(const struct pam_message* msg) const {
         if (msg->msg_style == PAM_PROMPT_ECHO_OFF) {
             QString message = QString::fromLocal8Bit(msg->msg);
-            if (message.indexOf(QRegExp(QStringLiteral("\\bpassword\\b"), Qt::CaseInsensitive)) >= 0) {
-                if (message.indexOf(QRegExp(QStringLiteral("\\b(re-?(enter|type)|again|confirm|repeat)\\b"), Qt::CaseInsensitive)) >= 0) {
+            if ((QRegularExpression(QStringLiteral("\\bpassword\\b"), QRegularExpression::CaseInsensitiveOption)).match(message).hasMatch()) {
+                if ((QRegularExpression(QStringLiteral("\\b(re-?(enter|type)|again|confirm|repeat)\\b"), QRegularExpression::CaseInsensitiveOption)).match(message).hasMatch()) {
                     return AuthPrompt::CHANGE_REPEAT;
                 }
-                else if (message.indexOf(QRegExp(QStringLiteral("\\bnew\\b"), Qt::CaseInsensitive)) >= 0) {
+                else if ((QRegularExpression(QStringLiteral("\\bnew\\b"), QRegularExpression::CaseInsensitiveOption)).match(message).hasMatch()) {
                     return AuthPrompt::CHANGE_NEW;
                 }
-                else if (message.indexOf(QRegExp(QStringLiteral("\\b(old|current)\\b"), Qt::CaseInsensitive)) >= 0) {
+                else if ((QRegularExpression(QStringLiteral("\\b(old|current)\\b"), QRegularExpression::CaseInsensitiveOption)).match(message).hasMatch()) {
                     return AuthPrompt::CHANGE_CURRENT;
                 }
                 else {
@@ -153,7 +155,7 @@ namespace SDDM {
     }
 
     Auth::Info PamData::handleInfo(const struct pam_message* msg, bool predict) {
-        if (QString::fromLocal8Bit(msg->msg).indexOf(QRegExp(QStringLiteral("^Changing password for [^ ]+$")))) {
+        if ((QRegularExpression(QStringLiteral("^Changing password for [^ ]+$"))).match(QString::fromLocal8Bit(msg->msg)).hasMatch()) {
             if (predict)
                 m_currentRequest = Request(changePassRequest);
             return Auth::INFO_PASS_CHANGE_REQUIRED;
@@ -248,17 +250,21 @@ namespace SDDM {
         }
 
         QProcessEnvironment sessionEnv = m_app->session()->processEnvironment();
-        if (sessionEnv.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("x11")) {
+        const auto sessionType = sessionEnv.value(QStringLiteral("XDG_SESSION_TYPE"));
+        const auto sessionClass = sessionEnv.value(QStringLiteral("XDG_SESSION_CLASS"));
+        if (sessionEnv.contains(QStringLiteral("XDG_VTNR"))) {
+            QString tty = VirtualTerminal::path(sessionEnv.value(QStringLiteral("XDG_VTNR")).toInt());
+            m_pam->setItem(PAM_TTY, qPrintable(tty));
+        }
+        if (sessionType == QLatin1String("x11") && (sessionClass == QLatin1String("user") || !m_displayServer)) {
             QString display = sessionEnv.value(QStringLiteral("DISPLAY"));
             if (!display.isEmpty()) {
 #ifdef PAM_XDISPLAY
                 m_pam->setItem(PAM_XDISPLAY, qPrintable(display));
-#endif
+#else
                 m_pam->setItem(PAM_TTY, qPrintable(display));
+#endif
             }
-        } else if (sessionEnv.value(QStringLiteral("XDG_SESSION_TYPE")) == QLatin1String("wayland")) {
-            QString tty = QStringLiteral("/dev/tty%1").arg(sessionEnv.value(QStringLiteral("XDG_VTNR")));
-            m_pam->setItem(PAM_TTY, qPrintable(tty));
         }
 
         if (!m_pam->putEnv(sessionEnv)) {
diff --git a/src/helper/backend/PamBackend.h b/src/helper/backend/PamBackend.h
index 4c8b4b3..4aba328 100644
--- a/src/helper/backend/PamBackend.h
+++ b/src/helper/backend/PamBackend.h
@@ -18,7 +18,7 @@
  *
  */
 
-#if !defined(PAMBACKEND_H) && defined(USE_PAM)
+#if !defined(PAMBACKEND_H)
 #define PAMBACKEND_H
 
 #include "Constants.h"
diff --git a/src/helper/backend/PasswdBackend.cpp b/src/helper/backend/PasswdBackend.cpp
deleted file mode 100644
index b59cc9b..0000000
--- a/src/helper/backend/PasswdBackend.cpp
+++ /dev/null
@@ -1,109 +0,0 @@
-/*
- * /etc/passwd authentication backend
- * Copyright (C) 2014 Martin Bříza <mbriza@redhat.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- */
-
-#include "PasswdBackend.h"
-
-#include "AuthMessages.h"
-#include "HelperApp.h"
-
-#include <QtCore/QDebug>
-
-#include <sys/types.h>
-#include <pwd.h>
-#include <unistd.h>
-
-#ifdef HAVE_GETSPNAM
-#include <shadow.h>
-#endif
-
-namespace SDDM {
-    PasswdBackend::PasswdBackend(HelperApp *parent)
-            : Backend(parent) { }
-
-    bool PasswdBackend::authenticate() {
-        if (m_autologin)
-            return true;
-
-        if (m_user == QLatin1String("sddm")) {
-            if (m_greeter)
-                return true;
-            else
-                return false;
-        }
-
-        Request r;
-        QString password;
-
-        if (m_user.isEmpty())
-            r.prompts << Prompt(AuthPrompt::LOGIN_USER, QStringLiteral("Login"), false);
-        r.prompts << Prompt(AuthPrompt::LOGIN_PASSWORD, QStringLiteral("Password"), true);
-
-        Request response = m_app->request(r);
-        for(const Prompt &p : qAsConst(response.prompts)) {
-            switch (p.type) {
-                case AuthPrompt::LOGIN_USER:
-                    m_user = QString::fromUtf8(p.response);
-                    break;
-                case AuthPrompt::LOGIN_PASSWORD:
-                    password = QString::fromUtf8(p.response);
-                    break;
-                default:
-                    break;
-            }
-        }
-
-        struct passwd *pw = getpwnam(qPrintable(m_user));
-        if (!pw) {
-            m_app->error(QStringLiteral("Wrong user/password combination"), Auth::ERROR_AUTHENTICATION);
-            return false;
-        }
-        const char *system_passwd = pw->pw_passwd;
-
-#ifdef HAVE_GETSPNAM
-        struct spwd *spw = getspnam(pw->pw_name);
-        if (!spw) {
-            qWarning() << "[Passwd] Could get passwd but not shadow";
-            return false;
-        }
-
-        if(!spw->sp_pwdp || !spw->sp_pwdp[0])
-            return true;
-
-        system_passwd = spw->sp_pwdp;
-#endif
-
-        const char * const crypted = crypt(qPrintable(password), system_passwd);
-        if (0 == strcmp(crypted, system_passwd)) {
-            return true;
-        }
-
-        m_app->error(QStringLiteral("Wrong user/password combination"), Auth::ERROR_AUTHENTICATION);
-        return false;
-    }
-
-    bool PasswdBackend::start(const QString& user) {
-        m_user = user;
-        return true;
-    }
-
-    QString PasswdBackend::userName() {
-        return m_user;
-    }
-}
diff --git a/src/helper/backend/PasswdBackend.h b/src/helper/backend/PasswdBackend.h
deleted file mode 100644
index c55d331..0000000
--- a/src/helper/backend/PasswdBackend.h
+++ /dev/null
@@ -1,43 +0,0 @@
-/*
- * /etc/passwd authentication backend
- * Copyright (C) 2014 Martin Bříza <mbriza@redhat.com>
- *
- * This program is free software; you can redistribute it and/or modify
- * it under the terms of the GNU General Public License as published by
- * the Free Software Foundation; either version 2 of the License, or
- * (at your option) any later version.
- *
- * This program is distributed in the hope that it will be useful,
- * but WITHOUT ANY WARRANTY; without even the implied warranty of
- * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
- * GNU General Public License for more details.
- *
- * You should have received a copy of the GNU General Public License along
- * with this program; if not, write to the Free Software Foundation, Inc.,
- * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
- *
- */
-
-#if !defined(PASSWDBACKEND_H) && !defined(USE_PAM)
-#define PASSWDBACKEND_H
-
-#include "../Backend.h"
-
-namespace SDDM {
-    class PasswdBackend : public Backend {
-        Q_OBJECT
-    public:
-        PasswdBackend(HelperApp *parent);
-
-    public slots:
-        virtual bool start(const QString &user = QString());
-        virtual bool authenticate();
-
-        virtual QString userName();
-
-    private:
-        QString m_user { };
-    };
-}
-
-#endif // PASSWDBACKEND_H
diff --git a/src/helper/waylandhelper.cpp b/src/helper/waylandhelper.cpp
new file mode 100644
index 0000000..d98562c
--- /dev/null
+++ b/src/helper/waylandhelper.cpp
@@ -0,0 +1,140 @@
+/***************************************************************************
+* Copyright (c) 2021 Aleix Pol Gonzalez <aleixpol@kde.org>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include <QCoreApplication>
+#include <QFile>
+#include <QStandardPaths>
+
+#include "Configuration.h"
+
+#include "waylandhelper.h"
+#include "waylandsocketwatcher.h"
+#include "VirtualTerminal.h"
+
+#include <fcntl.h>
+#include <unistd.h>
+
+namespace SDDM {
+
+WaylandHelper::WaylandHelper(QObject *parent)
+    : QObject(parent)
+    , m_environment(QProcessEnvironment::systemEnvironment())
+    , m_watcher(new WaylandSocketWatcher(this))
+{
+}
+
+bool WaylandHelper::startCompositor(const QString &cmd)
+{
+    m_watcher->start();
+    return startProcess(cmd, &m_serverProcess);
+}
+
+void stopProcess(QProcess *process)
+{
+    if (process && process->state() != QProcess::NotRunning) {
+        qInfo() << "Stopping..." << process->program();
+        process->terminate();
+        if (!process->waitForFinished(5000)) {
+            process->kill();
+            process->waitForFinished(25000);
+        }
+        process->deleteLater();
+        process = nullptr;
+    }
+}
+
+void WaylandHelper::stop()
+{
+    m_watcher->stop();
+    stopProcess(m_greeterProcess);
+    stopProcess(m_serverProcess);
+}
+
+bool WaylandHelper::startProcess(const QString &cmd, QProcess **p)
+{
+    auto *process = new QProcess(this);
+    process->setProcessEnvironment(m_environment);
+    process->setInputChannelMode(QProcess::ForwardedInputChannel);
+    connect(process, &QProcess::readyReadStandardError, this, [process] {
+        qWarning() << process->readAllStandardError();
+    });
+    connect(process, &QProcess::readyReadStandardOutput, this, [process] {
+        qInfo() << process->readAllStandardOutput();
+    });
+    qDebug() << "Starting Wayland process" << cmd << m_environment.value(QStringLiteral("USER"));
+    connect(process, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
+            process, [](int exitCode, QProcess::ExitStatus exitStatus) {
+        qDebug() << "wayland compositor finished" << exitCode << exitStatus;
+        if (exitCode != 0 || exitStatus != QProcess::NormalExit)
+            QCoreApplication::instance()->quit();
+    });
+
+    auto args = QProcess::splitCommand(cmd);
+    const auto program = args.takeFirst();
+    process->start(program, args);
+    if (!process->waitForStarted(10000)) {
+        qWarning("Failed to start \"%s\": %s",
+                 qPrintable(cmd),
+                 qPrintable(process->errorString()));
+        return false;
+    }
+
+    if (p)
+        *p = process;
+
+    qDebug() << "started succesfully" << cmd;
+    return true;
+}
+
+void WaylandHelper::startGreeter(const QString &cmd)
+{
+    auto args = QProcess::splitCommand(cmd);
+
+    m_greeterProcess = new QProcess(this);
+    m_greeterProcess->setProgram(args.takeFirst());
+    m_greeterProcess->setArguments(args);
+    connect(m_greeterProcess, &QProcess::readyReadStandardError, this, [this] {
+        qWarning() << m_greeterProcess->readAllStandardError();
+    });
+    connect(m_greeterProcess, &QProcess::readyReadStandardOutput, this, [this] {
+        qInfo() << m_greeterProcess->readAllStandardOutput();
+    });
+    connect(m_greeterProcess, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
+            m_greeterProcess, [](int exitCode, QProcess::ExitStatus exitStatus) {
+        qDebug() << "wayland greeter finished" << exitCode << exitStatus;
+        QCoreApplication::instance()->quit();
+    });
+    if (m_watcher->status() == WaylandSocketWatcher::Started) {
+        m_environment.insert(QStringLiteral("WAYLAND_DISPLAY"), m_watcher->socketName());
+        m_greeterProcess->setProcessEnvironment(m_environment);
+        m_greeterProcess->start();
+    } else if (m_watcher->status() == WaylandSocketWatcher::Failed) {
+        Q_EMIT failed();
+    } else {
+        connect(m_watcher, &WaylandSocketWatcher::failed, this, &WaylandHelper::failed);
+        connect(m_watcher, &WaylandSocketWatcher::started, this, [this] {
+            m_watcher->stop();
+            m_environment.insert(QStringLiteral("WAYLAND_DISPLAY"), m_watcher->socketName());
+            m_greeterProcess->setProcessEnvironment(m_environment);
+            m_greeterProcess->start();
+        });
+    }
+}
+
+} // namespace SDDM
diff --git a/src/helper/waylandhelper.h b/src/helper/waylandhelper.h
new file mode 100644
index 0000000..c938660
--- /dev/null
+++ b/src/helper/waylandhelper.h
@@ -0,0 +1,54 @@
+/***************************************************************************
+* Copyright (c) 2021 Aleix Pol Gonzalez <aleixpol@kde.org>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef WAYLANDHELPER_H
+#define WAYLANDHELPER_H
+
+#include <QProcess>
+
+namespace SDDM {
+class WaylandSocketWatcher;
+
+class WaylandHelper : public QObject
+{
+    Q_OBJECT
+public:
+    explicit WaylandHelper(QObject *parent = nullptr);
+
+    bool startCompositor(const QString &cmd);
+    void startGreeter(const QString &cmd);
+    void stop();
+
+Q_SIGNALS:
+    void failed();
+
+private:
+    QProcessEnvironment m_environment;
+    QProcess *m_serverProcess = nullptr;
+    QProcess *m_greeterProcess = nullptr;
+    WaylandSocketWatcher * const m_watcher;
+
+    bool startProcess(const QString &cmd, QProcess **p = nullptr);
+};
+
+} // namespace SDDM
+
+
+
+#endif
diff --git a/src/helper/waylandsocketwatcher.cpp b/src/helper/waylandsocketwatcher.cpp
new file mode 100644
index 0000000..837bb18
--- /dev/null
+++ b/src/helper/waylandsocketwatcher.cpp
@@ -0,0 +1,107 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+* Copyright (C) 2021 Aleix Pol Gonzalez <aleixpol@kde.org>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include <unistd.h>
+#include <QDebug>
+#include <QStandardPaths>
+
+#include "waylandsocketwatcher.h"
+
+namespace SDDM {
+
+WaylandSocketWatcher::WaylandSocketWatcher(QObject *parent )
+    : QObject(parent)
+    , m_runtimeDir(QDir(QStandardPaths::writableLocation(QStandardPaths::RuntimeLocation)))
+{
+    m_runtimeDir.setFilter(QDir::Files | QDir::System);
+    m_runtimeDir.setNameFilters(QStringList() << QLatin1String("wayland-?"));
+}
+
+WaylandSocketWatcher::Status WaylandSocketWatcher::status() const
+{
+    return m_status;
+}
+
+QString WaylandSocketWatcher::socketName() const
+{
+    return m_socketName;
+}
+
+void WaylandSocketWatcher::start()
+{
+    m_watcher = new QFileSystemWatcher(this);
+
+    // Give the compositor some time to start
+    m_timer.setSingleShot(true);
+    m_timer.setInterval(15000);
+    connect(&m_timer, &QTimer::timeout, this, [this] {
+        // Time is up and a socket was not found
+        if (!m_watcher.isNull())
+            m_watcher->deleteLater();
+        qWarning("Wayland socket watcher timed out");
+        m_status = Failed;
+        Q_EMIT failed();
+    });
+
+    // Check if the socket exists
+    connect(m_watcher, &QFileSystemWatcher::directoryChanged, this,
+            [this](const QString &path) {
+        qDebug() << "Directory" << path << "has changed, checking for Wayland socket";
+
+        m_runtimeDir.refresh();
+        const QFileInfoList fileInfoList = m_runtimeDir.entryInfoList();
+        for (const QFileInfo &fileInfo : fileInfoList) {
+            if (fileInfo.ownerId() == ::getuid()) {
+                qDebug() << "Found Wayland socket" << fileInfo.absoluteFilePath();
+                m_timer.stop();
+                if (!m_watcher.isNull())
+                    m_watcher->deleteLater();
+                m_socketName = fileInfo.fileName();
+                m_status = Started;
+                Q_EMIT started();
+                break;
+            }
+        }
+    });
+
+    // Watch for runtime directory changes
+    if (!m_runtimeDir.exists() || !m_watcher->addPath(m_runtimeDir.absolutePath())) {
+        qWarning("Cannot watch directory \"%s\" for Wayland socket",
+                 qPrintable(m_runtimeDir.absolutePath()));
+        m_watcher->deleteLater();
+        m_status = Failed;
+        Q_EMIT failed();
+    }
+
+    // Start
+    m_timer.start();
+}
+
+void WaylandSocketWatcher::stop()
+{
+    m_timer.stop();
+    if (!m_watcher.isNull())
+        m_watcher->deleteLater();
+    m_watcher.clear();
+    m_status = Stopped;
+    Q_EMIT stopped();
+}
+
+} // namespace SDDM
diff --git a/src/helper/waylandsocketwatcher.h b/src/helper/waylandsocketwatcher.h
new file mode 100644
index 0000000..0032c18
--- /dev/null
+++ b/src/helper/waylandsocketwatcher.h
@@ -0,0 +1,64 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef WAYLANDSOCKETWATCHER_H
+#define WAYLANDSOCKETWATCHER_H
+
+#include <QDir>
+#include <QFileSystemWatcher>
+#include <QPointer>
+#include <QTimer>
+
+namespace SDDM {
+
+class WaylandSocketWatcher : public QObject
+{
+    Q_OBJECT
+public:
+    enum Status {
+        Started,
+        Stopped,
+        Failed
+    };
+    Q_ENUM(Status)
+
+    explicit WaylandSocketWatcher(QObject *parent = nullptr);
+
+    Status status() const;
+    QString socketName() const;
+
+    void start();
+    void stop();
+
+Q_SIGNALS:
+    void started();
+    void stopped();
+    void failed();
+
+private:
+    Status m_status = Stopped;
+    QDir m_runtimeDir;
+    QString m_socketName;
+    QTimer m_timer;
+    QPointer<QFileSystemWatcher> m_watcher;
+};
+
+} // namespace SDDM
+
+#endif // WAYLANDSOCKETWATCHER_H
diff --git a/src/helper/xorguserhelper.cpp b/src/helper/xorguserhelper.cpp
new file mode 100644
index 0000000..65dbe1e
--- /dev/null
+++ b/src/helper/xorguserhelper.cpp
@@ -0,0 +1,266 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include <QCoreApplication>
+#include <QFile>
+#include <QStandardPaths>
+
+#include "Configuration.h"
+
+#include "xorguserhelper.h"
+
+#include <fcntl.h>
+#include <unistd.h>
+
+namespace SDDM {
+
+XOrgUserHelper::XOrgUserHelper(QObject *parent)
+    : QObject(parent)
+{
+}
+
+QProcessEnvironment XOrgUserHelper::sessionEnvironment() const
+{
+    auto env = QProcessEnvironment::systemEnvironment();
+    env.insert(QStringLiteral("DISPLAY"), m_display);
+    env.insert(QStringLiteral("XAUTHORITY"), m_xauth.authPath());
+    env.insert(QStringLiteral("QT_QPA_PLATFORM"), QStringLiteral("xcb"));
+    return env;
+}
+
+QString XOrgUserHelper::display() const
+{
+    return m_display;
+}
+
+bool XOrgUserHelper::start(const QString &cmd)
+{
+    // Create xauthority
+    m_xauth.setAuthDirectory(qEnvironmentVariable("XDG_RUNTIME_DIR"));
+    m_xauth.setup();
+
+    // Start server process
+    if (!startServer(cmd))
+        return false;
+
+    // Setup display
+    startDisplayCommand();
+
+    return true;
+}
+
+void XOrgUserHelper::stop()
+{
+    if (m_serverProcess) {
+        qInfo("Stopping server...");
+        m_serverProcess->terminate();
+        if (!m_serverProcess->waitForFinished(5000)) {
+            m_serverProcess->kill();
+            m_serverProcess->waitForFinished(25000);
+        }
+        m_serverProcess->deleteLater();
+        m_serverProcess = nullptr;
+
+        displayFinished();
+    }
+}
+
+bool XOrgUserHelper::startProcess(const QString &cmd,
+                                  const QProcessEnvironment &env,
+                                  QProcess **p)
+{
+    auto args = QProcess::splitCommand(cmd);
+    const auto program = args.takeFirst();
+
+    // Make sure to forward the input of this process into the Xorg
+    // server, otherwise it will complain that only console users are allowed
+    auto *process = new QProcess(this);
+    process->setProcessEnvironment(env);
+    process->setInputChannelMode(QProcess::ForwardedInputChannel);
+    connect(process, &QProcess::readyReadStandardError, this, [process] {
+        qWarning() << process->readAllStandardError();
+    });
+    connect(process, &QProcess::readyReadStandardOutput, this, [process] {
+        qInfo() << process->readAllStandardOutput();
+    });
+    connect(process, QOverload<int, QProcess::ExitStatus>::of(&QProcess::finished),
+            process, [](int exitCode, QProcess::ExitStatus exitStatus) {
+        if (exitCode != 0 || exitStatus != QProcess::NormalExit)
+            QCoreApplication::instance()->quit();
+    });
+
+    process->start(program, args);
+    if (!process->waitForStarted(10000)) {
+        qWarning("Failed to start \"%s\": %s",
+                 qPrintable(cmd),
+                 qPrintable(process->errorString()));
+        return false;
+    }
+
+    if (p)
+        *p = process;
+
+    return true;
+}
+
+bool XOrgUserHelper::startServer(const QString &cmd)
+{
+    QString serverCmd = cmd;
+
+    // Create pipe for communicating with X server
+    // 0 == read from X, 1 == write to X
+    int pipeFds[2];
+    if (::pipe(pipeFds) != 0) {
+        qCritical("Could not create pipe to start X server");
+        return false;
+    }
+
+    // Do not leak the read endpoint to the X server process
+    fcntl(pipeFds[0], F_SETFD, FD_CLOEXEC);
+
+    // Server environment
+    // Not setting XORG_RUN_AS_USER_OK=1 will make Xorg require root privileges
+    // under Fedora and all distros that use their patch.
+    // https://src.fedoraproject.org/rpms/xorg-x11-server/blob/rawhide/f/0001-Fedora-hack-Make-the-suid-root-wrapper-always-start-.patch
+    // https://fedoraproject.org/wiki/Changes/XorgWithoutRootRights
+    auto serverEnv = QProcessEnvironment::systemEnvironment();
+    serverEnv.insert(QStringLiteral("XORG_RUN_AS_USER_OK"), QStringLiteral("1"));
+
+    // Append xauth and display fd to the command
+    auto args = QStringList()
+            << QStringLiteral("-auth") << m_xauth.authPath()
+            << QStringLiteral("-displayfd") << QString::number(pipeFds[1]);
+
+    // Append VT from environment
+    args << QStringLiteral("vt%1").arg(serverEnv.value(QStringLiteral("XDG_VTNR")));
+
+    // Command string
+    serverCmd += QLatin1Char(' ') + args.join(QLatin1Char(' '));
+
+    // Start the server process
+    qInfo("Running server: %s", qPrintable(serverCmd));
+    if (!startProcess(serverCmd, serverEnv, &m_serverProcess)) {
+        ::close(pipeFds[0]);
+        return false;
+    }
+
+    // Close the other side of pipe in our process, otherwise reading
+    // from it may stuck even X server exit
+    ::close(pipeFds[1]);
+
+    // Read the display number from the pipe
+    QFile readPipe;
+    if (!readPipe.open(pipeFds[0], QIODevice::ReadOnly)) {
+        qCritical("Failed to open pipe to start X Server");
+        ::close(pipeFds[0]);
+        return false;
+    }
+    QByteArray displayNumber = readPipe.readLine();
+    if (displayNumber.size() < 2) {
+        // X server gave nothing (or a whitespace)
+        qCritical("Failed to read display number from pipe");
+        ::close(pipeFds[0]);
+        return false;
+    }
+    displayNumber.prepend(QByteArray(":"));
+    displayNumber.remove(displayNumber.size() -1, 1); // trim trailing whitespace
+    m_display = QString::fromLocal8Bit(displayNumber);
+    qDebug("X11 display: %s", qPrintable(m_display));
+    Q_EMIT displayChanged(m_display);
+
+    // Generate xauthority file
+    // For the X server's copy, the display number doesn't matter.
+    // An empty file would result in no access control!
+    if (!m_xauth.addCookie(m_display)) {
+        qCritical("Failed to write xauth file");
+        return false;
+    }
+
+    // Close our pipe
+    ::close(pipeFds[0]);
+
+    return true;
+}
+
+void XOrgUserHelper::startDisplayCommand()
+{
+    const QString xcursorTheme = mainConfig.Theme.CursorTheme.get(),
+                  xcursorSize = mainConfig.Theme.CursorSize.get();
+
+    auto env = QProcessEnvironment::systemEnvironment();
+    env.insert(QStringLiteral("DISPLAY"), m_display);
+    env.insert(QStringLiteral("XAUTHORITY"), m_xauth.authPath());
+    if (!xcursorTheme.isEmpty())
+        env.insert(QStringLiteral("XCURSOR_THEME"), xcursorTheme);
+    if (!xcursorSize.isEmpty())
+        env.insert(QStringLiteral("XCURSOR_SIZE"), xcursorSize);
+
+    // Set cursor
+    qInfo("Setting default cursor...");
+    QProcess *setCursor = nullptr;
+    if (startProcess(QStringLiteral("xsetroot -cursor_name left_ptr"), env, &setCursor)) {
+        if (!setCursor->waitForFinished(1000)) {
+            qWarning() << "Could not setup default cursor";
+            setCursor->kill();
+        }
+        setCursor->deleteLater();
+    }
+
+    // Unlike libXcursor, xcb-util-cursor no longer looks at XCURSOR_*. Set the resources.
+    if (!xcursorTheme.isEmpty() || !xcursorSize.isEmpty()) {
+        QProcess xrdbProcess;
+        xrdbProcess.setProcessEnvironment(env);
+        xrdbProcess.start(QStringLiteral("xrdb"), QStringList{QStringLiteral("-nocpp"), QStringLiteral("-merge")});
+        if (!xcursorTheme.isEmpty())
+            xrdbProcess.write(QStringLiteral("Xcursor.theme: %1\n").arg(xcursorTheme).toUtf8());
+
+        if (!xcursorSize.isEmpty())
+            xrdbProcess.write(QStringLiteral("Xcursor.size: %1\n").arg(xcursorSize).toUtf8());
+
+        xrdbProcess.closeWriteChannel();
+        if (!xrdbProcess.waitForFinished(1000)) {
+            qDebug() << "Could not set Xcursor resources" << xrdbProcess.error();
+            xrdbProcess.kill();
+        }
+    }
+
+    // Display setup script
+    auto cmd = mainConfig.X11.DisplayCommand.get();
+    qInfo("Running display setup script: %s", qPrintable(cmd));
+    QProcess *displayScript = nullptr;
+    if (startProcess(cmd, env, &displayScript)) {
+        if (!displayScript->waitForFinished(30000))
+            displayScript->kill();
+        displayScript->deleteLater();
+    }
+}
+
+void XOrgUserHelper::displayFinished()
+{
+    auto cmd = mainConfig.X11.DisplayStopCommand.get();
+    qInfo("Running display stop script: %s", qPrintable(cmd));
+    QProcess *displayStopScript = nullptr;
+    if (startProcess(cmd, sessionEnvironment(), &displayStopScript)) {
+        if (!displayStopScript->waitForFinished(5000))
+            displayStopScript->kill();
+        displayStopScript->deleteLater();
+    }
+}
+
+} // namespace SDDM
diff --git a/src/helper/xorguserhelper.h b/src/helper/xorguserhelper.h
new file mode 100644
index 0000000..c85a558
--- /dev/null
+++ b/src/helper/xorguserhelper.h
@@ -0,0 +1,61 @@
+/***************************************************************************
+* Copyright (c) 2021 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#ifndef XORGUSERHELPER_H
+#define XORGUSERHELPER_H
+
+#include <QProcess>
+
+#include "XAuth.h"
+
+namespace SDDM {
+
+class XOrgUserHelper : public QObject
+{
+    Q_OBJECT
+    Q_PROPERTY(QString display READ display NOTIFY displayChanged)
+public:
+    explicit XOrgUserHelper(QObject *parent = nullptr);
+
+    /// @returns the system environment plus the variables we need here
+    QProcessEnvironment sessionEnvironment() const;
+
+    QString display() const;
+
+    bool start(const QString &cmd);
+    void stop();
+
+Q_SIGNALS:
+    void displayChanged(const QString &display);
+
+private:
+    QString m_display = QStringLiteral(":0");
+    XAuth m_xauth;
+    QProcess *m_serverProcess = nullptr;
+
+    bool startProcess(const QString &cmd, const QProcessEnvironment &env,
+                      QProcess **p = nullptr);
+    bool startServer(const QString &cmd);
+    void startDisplayCommand();
+    void displayFinished();
+};
+
+} // namespace SDDM
+
+#endif // XORGUSERHELPER_H
diff --git a/test/CMakeLists.txt b/test/CMakeLists.txt
index bb85ddd..c76fefb 100644
--- a/test/CMakeLists.txt
+++ b/test/CMakeLists.txt
@@ -6,4 +6,16 @@ set(ConfigurationTest_SRCS ConfigurationTest.cpp ../src/common/ConfigReader.cpp)
 add_executable(ConfigurationTest ${ConfigurationTest_SRCS})
 add_test(NAME Configuration COMMAND ConfigurationTest)
 
-target_link_libraries(ConfigurationTest Qt5::Core Qt5::Test)
+target_link_libraries(ConfigurationTest Qt${QT_MAJOR_VERSION}::Core Qt${QT_MAJOR_VERSION}::Test)
+
+set(QMLThemeConfigTest_SRCS QMLThemeConfigTest.cpp ../src/common/ThemeConfig.cpp ../src/common/ThemeConfig.h)
+add_executable(QMLThemeConfigTest ${QMLThemeConfigTest_SRCS})
+target_include_directories(QMLThemeConfigTest PRIVATE ../src/common/)
+add_test(NAME QMLThemeConfig COMMAND QMLThemeConfigTest -platform offscreen -input ${CMAKE_CURRENT_SOURCE_DIR}/QMLThemeConfigTest.qml WORKING_DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR})
+target_link_libraries(QMLThemeConfigTest PRIVATE Qt${QT_MAJOR_VERSION}::Quick Qt${QT_MAJOR_VERSION}::QuickTest)
+
+set(SessionTest_SRCS SessionTest.cpp ../src/common/Configuration.cpp ../src/common/ConfigReader.cpp ../src/common/Session.cpp)
+add_executable(SessionTest ${SessionTest_SRCS})
+target_include_directories(SessionTest PRIVATE ${CMAKE_CURRENT_BINARY_DIR}/../src/common)
+add_test(NAME Session COMMAND SessionTest)
+target_link_libraries(SessionTest Qt${QT_MAJOR_VERSION}::Core Qt${QT_MAJOR_VERSION}::Test)
diff --git a/src/common/VirtualTerminal_FreeBSD.cpp b/test/QMLThemeConfigTest.cpp
similarity index 62%
rename from src/common/VirtualTerminal_FreeBSD.cpp
rename to test/QMLThemeConfigTest.cpp
index aaf1b61..800f14f 100644
--- a/src/common/VirtualTerminal_FreeBSD.cpp
+++ b/test/QMLThemeConfigTest.cpp
@@ -1,5 +1,5 @@
 /***************************************************************************
-* Copyright (c) 2015 Pier Luigi Fiorini <pierluigi.fiorini@gmail.com>
+* Copyright (c) 2023 Fabian Vogt <fabian@ritter-vogt.de>
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
@@ -17,21 +17,23 @@
 * 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
 ***************************************************************************/
 
-#include <QDebug>
-#include <QString>
-
-#include "VirtualTerminal.h"
-
-
-namespace SDDM {
-    namespace VirtualTerminal {
-        int setUpNewVt() {
-            qDebug() << "New VT is unsupported on FreeBSD";
-            return -1;
-        }
-
-        void jumpToVt(int vt, bool vt_auto) {
-            qDebug() << "Jumping to VT" << vt << "is unsupported on FreeBSD";
-        }
+#include <QQmlContext>
+#include <QQmlEngine>
+#include <QtQuickTest>
+
+#include "ThemeConfig.h"
+
+class Setup : public QObject
+{
+    Q_OBJECT
+public slots:
+    void qmlEngineAvailable(QQmlEngine *engine)
+    {
+        auto *config = new SDDM::ThemeConfig(QStringLiteral("theme.conf"), this);
+        engine->rootContext()->setContextProperty(QStringLiteral("config"), config);
     }
-}
+};
+
+QUICK_TEST_MAIN_WITH_SETUP(QMLThemeConfigTest, Setup)
+
+#include "QMLThemeConfigTest.moc"
diff --git a/test/QMLThemeConfigTest.qml b/test/QMLThemeConfigTest.qml
new file mode 100644
index 0000000..a658fad
--- /dev/null
+++ b/test/QMLThemeConfigTest.qml
@@ -0,0 +1,67 @@
+/***************************************************************************
+* Copyright (c) 2023 Fabian Vogt <fabian@ritter-vogt.de>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+import QtQuick 2.3
+import QtTest 1.0
+
+TestCase {
+    name: "QMLThemeConfigTest"
+
+    function test_keys() {
+        let keys = Object.keys(config);
+        compare(keys.indexOf("doesnotexist"), -1);
+        verify(keys.indexOf("someInteger") >= 0);
+        keys = config.keys();
+        compare(keys.indexOf("doesnotexist"), -1);
+        verify(keys.indexOf("someInteger") >= 0);
+    }
+
+    // Everything is a string
+    function test_propertyAPI() {
+        compare(config.doesnotexist, undefined);
+        compare(config.someTrueBool, "yes");
+        compare(!!config.someTrueBool, true);
+        compare(config.someFalseBool, "false");
+        // "false" as a string is truthy!
+        compare(!!config.someFalseBool, true);
+        compare(config.someInteger, "042");
+        compare(+config.someInteger, 42);
+        compare(config.someRealNumber, "01.5");
+        compare(+config.someRealNumber, 1.5);
+        compare(config.someString, "Pie/180");
+    }
+
+    // Strings are converted to specific types
+    function test_typedAPI() {
+        compare(config.stringValue("doesnotexist"), "");
+        compare(config.boolValue("someTrueBool"), true);
+        compare(config.boolValue("someFalseBool"), false);
+        // "false" as a string is truthy!
+        compare(!!config.someFalseBool, true);
+        compare(config.stringValue("someInteger"), "042");
+        compare(config.intValue("someInteger"), 42);
+        compare(config.realValue("someRealNumber"), 1.5);
+        // conversion fails -> 0
+        compare(config.intValue("someRealNumber"), 0);
+        compare(config.stringValue("someString"), "Pie/180");
+        // conversion fails -> 0
+        compare(config.intValue("someString"), 0);
+        compare(config.realValue("someString"), 0);
+    }
+}
diff --git a/test/SessionTest.cpp b/test/SessionTest.cpp
new file mode 100644
index 0000000..ef8df6f
--- /dev/null
+++ b/test/SessionTest.cpp
@@ -0,0 +1,66 @@
+/***************************************************************************
+* Copyright (c) 2023 Fabian Vogt <fvogt@suse.de>
+*
+* This program is free software; you can redistribute it and/or modify
+* it under the terms of the GNU General Public License as published by
+* the Free Software Foundation; either version 2 of the License, or
+* (at your option) any later version.
+*
+* This program is distributed in the hope that it will be useful,
+* but WITHOUT ANY WARRANTY; without even the implied warranty of
+* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
+* GNU General Public License for more details.
+*
+* You should have received a copy of the GNU General Public License
+* along with this program; if not, write to the
+* Free Software Foundation, Inc.,
+* 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.
+***************************************************************************/
+
+#include "Session.h"
+
+#include <QLocale>
+#include <QTest>
+
+class SessionTest : public QObject {
+    Q_OBJECT
+private slots:
+    void testCLocale()
+    {
+        QLocale::setDefault(QLocale::c());
+        auto fileName = QFINDTESTDATA("plasmawayland-dev.desktop");
+        SDDM::Session session(SDDM::Session::WaylandSession, fileName);
+        QVERIFY(session.isValid());
+        QCOMPARE(session.xdgSessionType(), QStringLiteral("wayland"));
+        QCOMPARE(session.fileName(), fileName);
+        QCOMPARE(session.displayName(), QStringLiteral("Plasma (Development, Wayland /usr/bin)"));
+        QCOMPARE(session.comment(), QStringLiteral("Plasma by KDE"));
+        QCOMPARE(session.exec(), QStringLiteral("/usr/lib64/libexec/plasma-dbus-run-session-if-needed /usr/lib64/libexec/startplasma-dev.sh -wayland"));
+        QCOMPARE(session.tryExec(), QString());
+        QCOMPARE(session.desktopSession(), QStringLiteral("plasmawayland-dev"));
+        QCOMPARE(session.desktopNames(), QStringLiteral("KDE"));
+        QCOMPARE(session.isHidden(), false);
+        QCOMPARE(session.isNoDisplay(), false);
+    }
+    void testKOLocale()
+    {
+        QLocale::setDefault(QLocale{QStringLiteral("ko_KO")});
+        auto fileName = QFINDTESTDATA("plasmawayland-dev.desktop");
+        SDDM::Session session(SDDM::Session::WaylandSession, fileName);
+        QVERIFY(session.isValid());
+        QCOMPARE(session.xdgSessionType(), QStringLiteral("wayland"));
+        QCOMPARE(session.fileName(), fileName);
+        QCOMPARE(session.displayName(), QStringLiteral("Plasma(\uAC1C\uBC1C, Wayland /usr/bin)"));
+        QCOMPARE(session.comment(), QStringLiteral("KDE Plasma"));
+        QCOMPARE(session.exec(), QStringLiteral("/usr/lib64/libexec/plasma-dbus-run-session-if-needed /usr/lib64/libexec/startplasma-dev.sh -wayland"));
+        QCOMPARE(session.tryExec(), QString());
+        QCOMPARE(session.desktopSession(), QStringLiteral("plasmawayland-dev"));
+        QCOMPARE(session.desktopNames(), QStringLiteral("KDE"));
+        QCOMPARE(session.isHidden(), false);
+        QCOMPARE(session.isNoDisplay(), false);
+    }
+};
+
+QTEST_MAIN(SessionTest);
+
+#include "SessionTest.moc"
diff --git a/test/plasmawayland-dev.desktop b/test/plasmawayland-dev.desktop
new file mode 100644
index 0000000..0fa1b87
--- /dev/null
+++ b/test/plasmawayland-dev.desktop
@@ -0,0 +1,106 @@
+[Desktop Entry]
+Exec=/usr/lib64/libexec/plasma-dbus-run-session-if-needed /usr/lib64/libexec/startplasma-dev.sh -wayland
+DesktopNames=KDE
+Name=Plasma (Development, Wayland /usr/bin)
+Name[ar]=بلازما (تطوير, ويلاند /usr/bin)
+Name[az]=Plasma (Tərtib mərhələsində olan Wayland /usr/bin)
+Name[be]=Plasma (Development, Wayland /usr/bin)
+Name[bg]=Plasma (Development, Wayland /usr/bin)
+Name[ca]=Plasma (Desenvolupament, Wayland /usr/bin)
+Name[ca@valencia]=Plasma (Desenvolupament, Wayland /usr/bin)
+Name[da]=Plasma (udvikling, Wayland /usr/bin)
+Name[de]=Plasma (Development, Wayland /usr/bin)
+Name[en_GB]=Plasma (Development, Wayland /usr/bin)
+Name[es]=Plasma (Desarrollo, Wayland /usr/bin)
+Name[et]=Plasma (arendus, Wayland /usr/bin)
+Name[eu]=Plasma (Garapena, Wayland /usr/bin)
+Name[fi]=Plasma (kehitys, Wayland /usr/bin)
+Name[fr]=Plasma (Développement, Wayland /usr/bin)
+Name[gl]=Plasma (desenvolvemento, Wayland /usr/bin)
+Name[hi]=प्लाज़्मा (विकास, वैलेंड /usr/bin)
+Name[hu]=Plasma (Fejlesztői verzió, Wayland /usr/bin)
+Name[ia]=Plasma (Disveloppamento, Wayland /usr/bin)
+Name[id]=Plasma (Development, Wayland /usr/bin)
+Name[is]=Plasma (Þróunarútgáfa, Wayland /usr/bin)
+Name[it]=Plasma (Sviluppo, Wayland /usr/bin)
+Name[ja]=Plasma (Development, Wayland /usr/bin)
+Name[ka]=Plasma (Development, Wayland /usr/bin)
+Name[ko]=Plasma(개발, Wayland /usr/bin)
+Name[lt]=Plasma (Plėtojimas, Wayland /usr/bin)
+Name[ml]=പ്ലാസ്മ (വികസനം, വേലാൻഡ് /usr/bin)
+Name[nl]=Plasma (Ontwikkeling, Wayland /usr/bin)
+Name[nn]=Plasma (utvikling, Wayland /usr/bin)
+Name[pa]=ਪਲਾਜ਼ਮਾ (ਡਿਵੈਲਪਮੈਂਟ, ਵੇਅਲੈਂਡ /usr/bin)
+Name[pl]=Plazma (Rozwój , Wayland /usr/bin)
+Name[pt]=Plasma (Desenvolvimento, Wayland /usr/bin)
+Name[pt_BR]=Plasma (Desenvolvimento, Wayland /usr/bin)
+Name[ro]=Plasma (Dezvoltare, Wayland /usr/bin)
+Name[ru]=Plasma (разрабатываемая версия, Wayland /usr/bin)
+Name[sk]=Plasma (Development, Wayland /usr/bin)
+Name[sl]=Plasma (Razvoj, Wayland /usr/bin)
+Name[sv]=Plasma (utveckling, Wayland /usr/bin)
+Name[ta]=பிளாஸ்மா (Development, Wayland /usr/bin)
+Name[tr]=Plasma (Geliştirme, Wayland $ {CMAKE_INSTALL_FULL_BINDIR})
+Name[uk]=Плазма (Розробка, Wayland /usr/bin)
+Name[vi]=Plasma (Phát triển, Wayland /usr/bin)
+Name[x-test]=xxPlasma (Development, Wayland /usr/bin)xx
+Name[zh_CN]=Plasma (Development, Wayland /usr/bin)
+Name[zh_TW]=Plasma (開發版本，Wayland /usr/bin)
+Comment=Plasma by KDE
+Comment[ar]=بلازما كدي
+Comment[az]=KDE Plasma
+Comment[be]=Plasma KDE
+Comment[bg]=Plasma от KDE
+Comment[bs]=Plazma od strane KDe
+Comment[ca]=Plasma, creat per la comunitat KDE
+Comment[ca@valencia]=Plasma, creat per la comunitat KDE
+Comment[cs]=Plasma z KDE
+Comment[da]=Plasma fra KDE
+Comment[de]=Plasma von KDE
+Comment[el]=Plasma από το KDE
+Comment[en_GB]=Plasma by KDE
+Comment[es]=Plasma, por KDE
+Comment[et]=KDE Plasma
+Comment[eu]=KDEren Plasma
+Comment[fi]=Plasma KDE:ltä
+Comment[fr]=Plasma, par KDE
+Comment[gl]=Plasma, fornecido por KDE.
+Comment[he]=פלזמה באמצעות KDE
+Comment[hi]=केडीइ द्वारा प्लाज़्मा
+Comment[hsb]=Plasma wot KDE
+Comment[hu]=Plasma a KDE-től
+Comment[ia]=Plasma per KDE
+Comment[id]=Plasma oleh KDE
+Comment[is]=Plasma frá KDE
+Comment[it]=Plasma di KDE
+Comment[ja]=Plasma by KDE
+Comment[ka]=Plasma, KDE-სგან
+Comment[ko]=KDE Plasma
+Comment[lt]=Plasma pagal KDE
+Comment[ml]=കെഡിഇയുടെ പ്ലാസ്മ
+Comment[nb]=Plasma av KDE
+Comment[nds]=Plasma vun KDE
+Comment[nl]=Plasma door KDE
+Comment[nn]=Plasma frå KDE
+Comment[pa]=KDE ਵਲੋਂ ਪਲਾਜ਼ਮਾ
+Comment[pl]=Plazma dzięki KDE
+Comment[pt]=Plasma do KDE
+Comment[pt_BR]=Plasma do KDE
+Comment[ro]=Plasma, de către KDE
+Comment[ru]=KDE Plasma
+Comment[sk]=Plasma od KDE
+Comment[sl]=KDE Plasma
+Comment[sr]=Плазма од КДЕ‑а
+Comment[sr@ijekavian]=Плазма од КДЕ‑а
+Comment[sr@ijekavianlatin]=Plasma od KDE‑a
+Comment[sr@latin]=Plasma od KDE‑a
+Comment[sv]=Plasma av KDE
+Comment[ta]=கே.டீ.யீ. வழங்கும் பிளாஸ்மா
+Comment[tg]=Plasma аз ҷониби KDE
+Comment[tr]=KDE Plasma
+Comment[uk]=Плазма KDE
+Comment[vi]=Plasma, do KDE
+Comment[x-test]=xxPlasma by KDExx
+Comment[zh_CN]=KDE Plasma
+Comment[zh_TW]=Plasma by KDE
+X-KDE-PluginInfo-Version=5.27.0
diff --git a/test/theme.conf b/test/theme.conf
new file mode 100644
index 0000000..cb74cf0
--- /dev/null
+++ b/test/theme.conf
@@ -0,0 +1,6 @@
+[General]
+someTrueBool=yes
+someFalseBool=false
+someInteger=042
+someRealNumber=01.5
+someString="Pie/180"
